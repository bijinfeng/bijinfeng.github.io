[
  {
    "id": 112602372,
    "slug": "wsw9n2wof9gge7be",
    "title": "使用 i18next & react-i18next 进行国际化",
    "book_id": 36027021,
    "book": {
      "id": 36027021,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 12711679,
      "description": null,
      "creator_id": 12711679,
      "public": 0,
      "items_count": 1,
      "likes_count": 0,
      "watches_count": 0,
      "content_updated_at": "2023-01-30T13:34:03.214Z",
      "updated_at": "2023-01-30T13:36:03.000Z",
      "created_at": "2023-01-30T13:33:11.000Z",
      "namespace": "bijinfeng-fyjgs/blog",
      "user": {
        "id": 12711679,
        "type": "User",
        "login": "bijinfeng-fyjgs",
        "name": "毕金锋",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2023/png/12711679/1674963171401-avatar/cb2bbb41-d0e1-4cb6-b1a9-1a3702efe118.png",
        "books_count": 4,
        "public_books_count": 0,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2021-02-28T03:58:27.000Z",
        "updated_at": "2023-01-30T13:34:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 12711679,
    "creator": {
      "id": 12711679,
      "type": "User",
      "login": "bijinfeng-fyjgs",
      "name": "毕金锋",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2023/png/12711679/1674963171401-avatar/cb2bbb41-d0e1-4cb6-b1a9-1a3702efe118.png",
      "books_count": 4,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2021-02-28T03:58:27.000Z",
      "updated_at": "2023-01-30T13:34:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "[i18next](https://www.i18next.com/) 是社区中优秀的国际化框架，在 react 中广泛使用，我司的大量产品都使用 i18next 进行国际化，而 [react-i18next](https://react.i18next.com/) 是 i18next 的一个扩展，提供了一些 HOC 及 hook 方便我们在 react 中使用 i18next。\n\n由于 electron 是多进程机制，主进程和渲染进程都需要个 i18next 实例，但是多实例带来了一些问题，比如多实例的语言如何同步，文案如何集中管理？\n\n针对上面的两个问题，经过实践，我给出的解决方案如下：\n\n1. 主进程负责加载用户选择的语言和对应的文案\n2. 渲染进程通过进程通信从主进程的实例上获取初始化语言和文案初始化实例\n3. 用户在渲染进程切换语言，通过进程通信，主进程的 i18next 实例加载新语言的文案，并返回给渲染进程动态加载到渲染进程的实例中\n\n整个流程大致如下：<br />![](https://cdn.nlark.com/yuque/0/2023/jpeg/12711679/1674985695061-816932b3-df74-4162-af0b-832768d17345.jpeg)\n\n<a name=\"ySWOT\"></a>\n## 主进程\n用户选择的系统语言保存在 electron-store 中，通过 `getConfigStore`方法获取上次用户选择的系统语言，默认为中文\n```typescript\nimport Store from 'electron-store';\n\nexport interface StoreState {\n  theme: string;\n  config: NOTES.Config;\n}\n\nexport const getConfigStore = <K extends keyof NOTES.Config>(key: K) => {\n  return getStore<NOTES.Config[K]>(`config.${key}`);\n};\n\nexport const setConfigStore = (value: Partial<NOTES.Config>) => {\n  const config = getAllConfigStore();\n  return setStore('config', { ...config, ...value });\n};\n\n\n```\n\n[ i18next-fs-backend](https://github.com/i18next/i18next-fs-backend) 是 i18next 的一个扩展，允许 Node.js 从本地文件系统中加载翻译\n```typescript\nimport i18next from 'i18next';\nimport i18nextBackend from 'i18next-fs-backend';\n\nimport { getConfigStore } from './store';\n\ni18next.use(i18nextBackend).init({\n  lng: getConfigStore('lang') || 'zh-CN',\n  fallbackLng: 'en-US',\n  backend: {\n    loadPath: path.join(__dirname, './i18n/{{lng}}.json'),\n  },\n  interpolation: {\n    escapeValue: false, // react already safes from xss\n  },\n});\n\nexport default i18next;\n```\n\ni18next 实例初始化后，通过 `loadLanguages`加载对应语言的文案，`getResourceBundle`获取语言的文案，通过这两个方法，渲染进程就可以共享主进程的文案，实现文案的集中管理。\n```typescript\nimport logger from 'electron-log';\n\n\nimport i18next, { LngOptions } from '../../utils/i18n';\n\n\nexport const getI18nLanguages = () => {\n  return LngOptions;\n};\n\n\nexport const getI18nInitResource = async () => {\n  const lng = i18next.language;\n  const resource = await getI18nResource(lng);\n\n\n  return { lng, resource };\n};\n\n\nexport const getI18nResource = async (lng: string) => {\n  await i18next.loadLanguages(lng).catch((err) => {\n    logger.error(err);\n  });\n\n\n  return i18next.getResourceBundle(lng, '');\n};\n\n\nexport const changeI18nLang = async (lng: string) => {\n  return new Promise<boolean>((resolve) => {\n    i18next.changeLanguage(lng, (err) => {\n      if (err) logger.error(err);\n      resolve(!err);\n    });\n  });\n};\n```\n<a name=\"hivPf\"></a>\n## \n<a name=\"is0wP\"></a>\n## 渲染进程\n`invokeCommand`同学 window 上挂载的变量和主进程双向通行\n```typescript\nexport const invokeCommand = <T>(type: string, payload = {}) => {\n  return window.api.invoke<T>('fromRenderer', {\n    type,\n    payload,\n  });\n};\n```\n\n渲染进程通过 `invokeCommand` 调用主进程的 `getI18nInitResource` 方法获取初始的语言和文案完成实例的初始化。<br />用户切换语言时，同样通过进程通信获取新语言的文案，通过 `i18next.addResourceBundle`动态加载到实例中，调用 `i18next.changeLanguage`完成语言的切换。\n```typescript\nimport i18next, { ResourceKey } from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport { invokeCommand } from '@/commands';\n\nexport const initI18next = async () => {\n  const { lng, resource } = await invokeCommand<{ lng: string; resource: ResourceKey }>(\n    'getI18nInitResource',\n  );\n\n  return i18next.use(initReactI18next).init({\n    lng,\n    resources: {\n      [lng]: {\n        translation: resource,\n      },\n    },\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n};\n\nexport const changeLanguage = async (lng: string) => {\n  if (!i18next.hasResourceBundle(lng, 'translation')) {\n    // 动态加载语言\n    const resource = await invokeCommand<ResourceKey>('getI18nResource', lng);\n    i18next.addResourceBundle(lng, 'translation', resource);\n  }\n\n  return i18next.changeLanguage(lng);\n};\n\nexport default i18next;\n\n```\n\n<a name=\"YNoH7\"></a>\n## 总结：\nelectron 的多进程机制导致 i18next 不得不初始化出多个实例，但是我们同样可以利用进程通信，让一个实例加载文案，再同步到另一个实例，实现文案的集中管理。\n\n",
    "body_draft": "[i18next](https://www.i18next.com/) 是社区中优秀的国际化框架，在 react 中广泛使用，我司的大量产品都使用 i18next 进行国际化，而 [react-i18next](https://react.i18next.com/) 是 i18next 的一个扩展，提供了一些 HOC 及 hook 方便我们在 react 中使用 i18next。\n\n由于 electron 是多进程机制，主进程和渲染进程都需要个 i18next 实例，但是多实例带来了一些问题，比如多实例的语言如何同步，文案如何集中管理？\n\n针对上面的两个问题，经过实践，我给出的解决方案如下：\n\n1. 主进程负责加载用户选择的语言和对应的文案\n2. 渲染进程通过进程通信从主进程的实例上获取初始化语言和文案初始化实例\n3. 用户在渲染进程切换语言，通过进程通信，主进程的 i18next 实例加载新语言的文案，并返回给渲染进程动态加载到渲染进程的实例中\n\n整个流程大致如下：<br />![](https://cdn.nlark.com/yuque/0/2023/jpeg/12711679/1674985695061-816932b3-df74-4162-af0b-832768d17345.jpeg)\n\n<a name=\"ySWOT\"></a>\n## 主进程\n用户选择的系统语言保存在 electron-store 中，通过 `getConfigStore`方法获取上次用户选择的系统语言，默认为中文\n```typescript\nimport Store from 'electron-store';\n\nexport interface StoreState {\n  theme: string;\n  config: NOTES.Config;\n}\n\nexport const getConfigStore = <K extends keyof NOTES.Config>(key: K) => {\n  return getStore<NOTES.Config[K]>(`config.${key}`);\n};\n\nexport const setConfigStore = (value: Partial<NOTES.Config>) => {\n  const config = getAllConfigStore();\n  return setStore('config', { ...config, ...value });\n};\n\n\n```\n\n[ i18next-fs-backend](https://github.com/i18next/i18next-fs-backend) 是 i18next 的一个扩展，允许 Node.js 从本地文件系统中加载翻译\n```typescript\nimport i18next from 'i18next';\nimport i18nextBackend from 'i18next-fs-backend';\n\nimport { getConfigStore } from './store';\n\ni18next.use(i18nextBackend).init({\n  lng: getConfigStore('lang') || 'zh-CN',\n  fallbackLng: 'en-US',\n  backend: {\n    loadPath: path.join(__dirname, './i18n/{{lng}}.json'),\n  },\n  interpolation: {\n    escapeValue: false, // react already safes from xss\n  },\n});\n\nexport default i18next;\n```\n\ni18next 实例初始化后，通过 `loadLanguages`加载对应语言的文案，`getResourceBundle`获取语言的文案，通过这两个方法，渲染进程就可以共享主进程的文案，实现文案的集中管理。\n```typescript\nimport logger from 'electron-log';\n\n\nimport i18next, { LngOptions } from '../../utils/i18n';\n\n\nexport const getI18nLanguages = () => {\n  return LngOptions;\n};\n\n\nexport const getI18nInitResource = async () => {\n  const lng = i18next.language;\n  const resource = await getI18nResource(lng);\n\n\n  return { lng, resource };\n};\n\n\nexport const getI18nResource = async (lng: string) => {\n  await i18next.loadLanguages(lng).catch((err) => {\n    logger.error(err);\n  });\n\n\n  return i18next.getResourceBundle(lng, '');\n};\n\n\nexport const changeI18nLang = async (lng: string) => {\n  return new Promise<boolean>((resolve) => {\n    i18next.changeLanguage(lng, (err) => {\n      if (err) logger.error(err);\n      resolve(!err);\n    });\n  });\n};\n```\n<a name=\"hivPf\"></a>\n## \n<a name=\"is0wP\"></a>\n## 渲染进程\n`invokeCommand`同学 window 上挂载的变量和主进程双向通行\n```typescript\nexport const invokeCommand = <T>(type: string, payload = {}) => {\n  return window.api.invoke<T>('fromRenderer', {\n    type,\n    payload,\n  });\n};\n```\n\n渲染进程通过 `invokeCommand` 调用主进程的 `getI18nInitResource` 方法获取初始的语言和文案完成实例的初始化。<br />用户切换语言时，同样通过进程通信获取新语言的文案，通过 `i18next.addResourceBundle`动态加载到实例中，调用 `i18next.changeLanguage`完成语言的切换。\n```typescript\nimport i18next, { ResourceKey } from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport { invokeCommand } from '@/commands';\n\nexport const initI18next = async () => {\n  const { lng, resource } = await invokeCommand<{ lng: string; resource: ResourceKey }>(\n    'getI18nInitResource',\n  );\n\n  return i18next.use(initReactI18next).init({\n    lng,\n    resources: {\n      [lng]: {\n        translation: resource,\n      },\n    },\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n};\n\nexport const changeLanguage = async (lng: string) => {\n  if (!i18next.hasResourceBundle(lng, 'translation')) {\n    // 动态加载语言\n    const resource = await invokeCommand<ResourceKey>('getI18nResource', lng);\n    i18next.addResourceBundle(lng, 'translation', resource);\n  }\n\n  return i18next.changeLanguage(lng);\n};\n\nexport default i18next;\n\n```\n\n<a name=\"YNoH7\"></a>\n## 总结：\nelectron 的多进程机制导致 i18next 不得不初始化出多个实例，但是我们同样可以利用进程通信，让一个实例加载文案，再同步到另一个实例，实现文案的集中管理。\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"uca582e1c\" class=\"ne-p\"><a href=\"https://www.i18next.com/\" data-href=\"https://www.i18next.com/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">i18next</span></a><span class=\"ne-text\"> 是社区中优秀的国际化框架，在 react 中广泛使用，我司的大量产品都使用 i18next 进行国际化，而 </span><a href=\"https://react.i18next.com/\" data-href=\"https://react.i18next.com/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">react-i18next</span></a><span class=\"ne-text\"> 是 i18next 的一个扩展，提供了一些 HOC 及 hook 方便我们在 react 中使用 i18next。</span></p><p id=\"ud858109f\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u839f511e\" class=\"ne-p\"><span class=\"ne-text\">由于 electron 是多进程机制，主进程和渲染进程都需要个 i18next 实例，但是多实例带来了一些问题，比如多实例的语言如何同步，文案如何集中管理？</span></p><p id=\"u2aadcef2\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"uda12842d\" class=\"ne-p\"><span class=\"ne-text\">针对上面的两个问题，经过实践，我给出的解决方案如下：</span></p><ol class=\"ne-ol\"><li id=\"u61120671\"><span class=\"ne-text\">主进程负责加载用户选择的语言和对应的文案</span></li><li id=\"u659e2cdc\"><span class=\"ne-text\">渲染进程通过进程通信从主进程的实例上获取初始化语言和文案初始化实例</span></li><li id=\"u2a23abf2\"><span class=\"ne-text\">用户在渲染进程切换语言，通过进程通信，主进程的 i18next 实例加载新语言的文案，并返回给渲染进程动态加载到渲染进程的实例中</span></li></ol><p id=\"u5d51435a\" class=\"ne-p\"><br></p><p id=\"u41a425e0\" class=\"ne-p\"><span class=\"ne-text\">整个流程大致如下：</span></p><img src=\"https://cdn.nlark.com/yuque/0/2023/jpeg/12711679/1674985695061-816932b3-df74-4162-af0b-832768d17345.jpeg\" id=\"g7ptA\" style=\"display: block; width: 100%\"><p id=\"u8e539458\" class=\"ne-p\"><br></p><h2 id=\"ySWOT\"><span class=\"ne-text\">主进程</span></h2><p id=\"u85068bd4\" class=\"ne-p\"><span class=\"ne-text\" style=\"font-size: 16px\">用户选择的系统语言保存在 </span><span class=\"ne-text\">electron-store 中，通过 </span><code class=\"ne-code\"><span class=\"ne-text\">getConfigStore</span></code><span class=\"ne-text\">方法获取上次用户选择的系统语言，默认为中文</span></p><pre data-language=\"typescript\" id=\"U5Wr9\" class=\"ne-codeblock language-typescript\">import Store from 'electron-store';\n\nexport interface StoreState {\n  theme: string;\n  config: NOTES.Config;\n}\n\nexport const getConfigStore = &lt;K extends keyof NOTES.Config&gt;(key: K) =&gt; {\n  return getStore&lt;NOTES.Config[K]&gt;(`config.${key}`);\n};\n\nexport const setConfigStore = (value: Partial&lt;NOTES.Config&gt;) =&gt; {\n  const config = getAllConfigStore();\n  return setStore('config', { ...config, ...value });\n};\n\n</pre><p id=\"u7df4b793\" class=\"ne-p\"><br></p><p id=\"uba7dc1be\" class=\"ne-p\"><a href=\"https://github.com/i18next/i18next-fs-backend\" data-href=\"https://github.com/i18next/i18next-fs-backend\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\"> i18next-fs-backend</span></a><span class=\"ne-text\"> 是 </span><span class=\"ne-text\" style=\"color: rgb(36, 41, 47); font-size: 16px\">i18next 的一个扩展，允许 Node.js 从本地文件系统中加载翻译</span></p><pre data-language=\"typescript\" id=\"GjbsS\" class=\"ne-codeblock language-typescript\">import i18next from 'i18next';\nimport i18nextBackend from 'i18next-fs-backend';\n\nimport { getConfigStore } from './store';\n\ni18next.use(i18nextBackend).init({\n  lng: getConfigStore('lang') || 'zh-CN',\n  fallbackLng: 'en-US',\n  backend: {\n    loadPath: path.join(__dirname, './i18n/{{lng}}.json'),\n  },\n  interpolation: {\n    escapeValue: false, // react already safes from xss\n  },\n});\n\nexport default i18next;</pre><p id=\"u904fe770\" class=\"ne-p\"><br></p><p id=\"u290ce275\" class=\"ne-p\"><span class=\"ne-text\">i18next 实例初始化后，通过 </span><code class=\"ne-code\"><span class=\"ne-text\">loadLanguages</span></code><span class=\"ne-text\">加载对应语言的文案，</span><code class=\"ne-code\"><span class=\"ne-text\">getResourceBundle</span></code><span class=\"ne-text\">获取语言的文案，通过这两个方法，渲染进程就可以共享主进程的文案，实现文案的集中管理。</span></p><pre data-language=\"typescript\" id=\"FDe0P\" class=\"ne-codeblock language-typescript\">import logger from 'electron-log';\n\n\nimport i18next, { LngOptions } from '../../utils/i18n';\n\n\nexport const getI18nLanguages = () =&gt; {\n  return LngOptions;\n};\n\n\nexport const getI18nInitResource = async () =&gt; {\n  const lng = i18next.language;\n  const resource = await getI18nResource(lng);\n\n\n  return { lng, resource };\n};\n\n\nexport const getI18nResource = async (lng: string) =&gt; {\n  await i18next.loadLanguages(lng).catch((err) =&gt; {\n    logger.error(err);\n  });\n\n\n  return i18next.getResourceBundle(lng, '');\n};\n\n\nexport const changeI18nLang = async (lng: string) =&gt; {\n  return new Promise&lt;boolean&gt;((resolve) =&gt; {\n    i18next.changeLanguage(lng, (err) =&gt; {\n      if (err) logger.error(err);\n      resolve(!err);\n    });\n  });\n};</pre><h2 id=\"hivPf\"></h2><h2 id=\"is0wP\"><span class=\"ne-text\">渲染进程</span></h2><p id=\"u739b2f1d\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">invokeCommand</span></code><span class=\"ne-text\">同学 window 上挂载的变量和主进程双向通行</span></p><pre data-language=\"typescript\" id=\"agPtx\" class=\"ne-codeblock language-typescript\">export const invokeCommand = &lt;T&gt;(type: string, payload = {}) =&gt; {\n  return window.api.invoke&lt;T&gt;('fromRenderer', {\n    type,\n    payload,\n  });\n};</pre><p id=\"uc8da250c\" class=\"ne-p\"><br></p><p id=\"ubd091e6b\" class=\"ne-p\"><span class=\"ne-text\">渲染进程通过 </span><code class=\"ne-code\"><span class=\"ne-text\">invokeCommand</span></code><span class=\"ne-text\"> 调用主进程的 </span><code class=\"ne-code\"><span class=\"ne-text\">getI18nInitResource</span></code><span class=\"ne-text\"> 方法获取初始的语言和文案完成实例的初始化。</span></p><p id=\"u18de3f2a\" class=\"ne-p\"><span class=\"ne-text\">用户切换语言时，同样通过进程通信获取新语言的文案，通过 </span><code class=\"ne-code\"><span class=\"ne-text\">i18next.addResourceBundle</span></code><span class=\"ne-text\">动态加载到实例中，调用 </span><code class=\"ne-code\"><span class=\"ne-text\">i18next.changeLanguage</span></code><span class=\"ne-text\">完成语言的切换。</span></p><pre data-language=\"typescript\" id=\"H5UJB\" class=\"ne-codeblock language-typescript\">import i18next, { ResourceKey } from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport { invokeCommand } from '@/commands';\n\nexport const initI18next = async () =&gt; {\n  const { lng, resource } = await invokeCommand&lt;{ lng: string; resource: ResourceKey }&gt;(\n    'getI18nInitResource',\n  );\n\n  return i18next.use(initReactI18next).init({\n    lng,\n    resources: {\n      [lng]: {\n        translation: resource,\n      },\n    },\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n};\n\nexport const changeLanguage = async (lng: string) =&gt; {\n  if (!i18next.hasResourceBundle(lng, 'translation')) {\n    // 动态加载语言\n    const resource = await invokeCommand&lt;ResourceKey&gt;('getI18nResource', lng);\n    i18next.addResourceBundle(lng, 'translation', resource);\n  }\n\n  return i18next.changeLanguage(lng);\n};\n\nexport default i18next;\n</pre><p id=\"u94fb810e\" class=\"ne-p\"><span class=\"ne-text\"></span></p><h2 id=\"YNoH7\"><span class=\"ne-text\">总结：</span></h2><p id=\"u7192c3fb\" class=\"ne-p\"><span class=\"ne-text\">electron 的多进程机制导致 i18next 不得不初始化出多个实例，但是我们同样可以利用进程通信，让一个实例加载文案，再同步到另一个实例，实现文案的集中管理。</span></p><p id=\"u0a78ee58\" class=\"ne-p\"><span class=\"ne-text\"></span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"uca582e1c\" id=\"uca582e1c\"><a href=\"https://www.i18next.com/\" target=\"_blank\" data-lake-id=\"u83ffd375\" id=\"u83ffd375\"><span data-lake-id=\"udbdf2a47\" id=\"udbdf2a47\">i18next</span></a><span data-lake-id=\"ub3a4afcf\" id=\"ub3a4afcf\"> 是社区中优秀的国际化框架，在 react 中广泛使用，我司的大量产品都使用 i18next 进行国际化，而 </span><a href=\"https://react.i18next.com/\" target=\"_blank\" data-lake-id=\"u78c6180e\" id=\"u78c6180e\"><span data-lake-id=\"u8a11b7ca\" id=\"u8a11b7ca\">react-i18next</span></a><span data-lake-id=\"u60c9343d\" id=\"u60c9343d\"> 是 i18next 的一个扩展，提供了一些 HOC 及 hook 方便我们在 react 中使用 i18next。</span></p><p data-lake-id=\"ud858109f\" id=\"ud858109f\"><span data-lake-id=\"u8f74487b\" id=\"u8f74487b\">​</span><br></p><p data-lake-id=\"u839f511e\" id=\"u839f511e\"><span data-lake-id=\"u45de0e65\" id=\"u45de0e65\">由于 electron 是多进程机制，主进程和渲染进程都需要个 i18next 实例，但是多实例带来了一些问题，比如多实例的语言如何同步，文案如何集中管理？</span></p><p data-lake-id=\"u2aadcef2\" id=\"u2aadcef2\"><span data-lake-id=\"u4617fbb3\" id=\"u4617fbb3\">​</span><br></p><p data-lake-id=\"uda12842d\" id=\"uda12842d\"><span data-lake-id=\"u737a6bf3\" id=\"u737a6bf3\">针对上面的两个问题，经过实践，我给出的解决方案如下：</span></p><ol list=\"u8f814805\"><li fid=\"u1f04a27b\" data-lake-id=\"u61120671\" id=\"u61120671\"><span data-lake-id=\"u6436980f\" id=\"u6436980f\">主进程负责加载用户选择的语言和对应的文案</span></li><li fid=\"u1f04a27b\" data-lake-id=\"u659e2cdc\" id=\"u659e2cdc\"><span data-lake-id=\"u56d7c4f0\" id=\"u56d7c4f0\">渲染进程通过进程通信从主进程的实例上获取初始化语言和文案初始化实例</span></li><li fid=\"u1f04a27b\" data-lake-id=\"u2a23abf2\" id=\"u2a23abf2\"><span data-lake-id=\"ua4bc0994\" id=\"ua4bc0994\">用户在渲染进程切换语言，通过进程通信，主进程的 i18next 实例加载新语言的文案，并返回给渲染进程动态加载到渲染进程的实例中</span></li></ol><p data-lake-id=\"u5d51435a\" id=\"u5d51435a\"><br></p><p data-lake-id=\"u41a425e0\" id=\"u41a425e0\"><span data-lake-id=\"u294a7778\" id=\"u294a7778\">整个流程大致如下：</span></p><card type=\"block\" name=\"board\" value=\"data:%7B%22diagramData%22%3A%7B%22head%22%3A%7B%22version%22%3A%222.0.0%22%2C%22theme%22%3A%7B%22name%22%3A%22default%22%7D%2C%22rough%22%3A%7B%22name%22%3A%22default%22%7D%7D%2C%22body%22%3A%5B%7B%22id%22%3A%2290840089-9a0e-45f0-bda4-20570026a73e%22%2C%22type%22%3A%22group%22%2C%22children%22%3A%5B%7B%22type%22%3A%22geometry%22%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%26%238203%3B%3Cbr%3E%3C%2Fdiv%3E%22%2C%22shape%22%3A%22activation%22%2C%22category%22%3A%22UML%22%2C%22id%22%3A%22650891be-3413-4f4d-b066-97c214c23fb4%22%2C%22x%22%3A-576.5%2C%22y%22%3A90.671875%2C%22fill%22%3A%7B%22color%22%3A%22%23FFFFFF%22%7D%2C%22stroke%22%3A%7B%22color%22%3A%22%23585A5A%22%7D%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22width%22%3A52%2C%22height%22%3A295%2C%22zIndex%22%3A0%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22text%22%2C%22html%22%3A%22%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%22%2C%22shape%22%3A%22text%22%2C%22category%22%3A%22UML%22%2C%22id%22%3A%2271f959a4-402d-444e-8197-d71bfe1a1f6c%22%2C%22x%22%3A-559%2C%22y%22%3A187.671875%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22zIndex%22%3A1%2C%22width%22%3A17%2C%22height%22%3A101%2C%22rotate%22%3A0%7D%5D%2C%22zIndex%22%3A2%7D%2C%7B%22id%22%3A%22647a0790-7f61-4170-9778-273430f6c768%22%2C%22type%22%3A%22group%22%2C%22children%22%3A%5B%7B%22type%22%3A%22geometry%22%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%26nbsp%3B%3C%2Fdiv%3E%22%2C%22shape%22%3A%22activation%22%2C%22category%22%3A%22UML%22%2C%22id%22%3A%22a91ad1f5-3bbb-48aa-bf99-b73588febb97%22%2C%22x%22%3A-350%2C%22y%22%3A90.671875%2C%22fill%22%3A%7B%22color%22%3A%22%23FFFFFF%22%7D%2C%22stroke%22%3A%7B%22color%22%3A%22%23585A5A%22%7D%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22width%22%3A52%2C%22height%22%3A295%2C%22zIndex%22%3A3%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22text%22%2C%22html%22%3A%22%E4%B8%BB%E8%BF%9B%E7%A8%8B%22%2C%22shape%22%3A%22text%22%2C%22category%22%3A%22UML%22%2C%22id%22%3A%22890d885b-3c87-474f-ba8f-113540278942%22%2C%22x%22%3A-332.5%2C%22y%22%3A208.67000000000002%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22zIndex%22%3A4%2C%22width%22%3A17%2C%22height%22%3A59%2C%22rotate%22%3A0%7D%5D%2C%22zIndex%22%3A5%7D%2C%7B%22id%22%3A%227d42d9ac-621c-49f8-9279-cb0246c33a3c%22%2C%22type%22%3A%22group%22%2C%22children%22%3A%5B%7B%22type%22%3A%22geometry%22%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%26nbsp%3B%3C%2Fdiv%3E%22%2C%22shape%22%3A%22multi-document%22%2C%22category%22%3A%22flowchart%22%2C%22stroke%22%3A%7B%22color%22%3A%22%23585A5A%22%7D%2C%22id%22%3A%221da6a51a-83f8-4200-a13c-df65da987a7b%22%2C%22x%22%3A-159%2C%22y%22%3A205.171875%2C%22fill%22%3A%7B%22color%22%3A%22%23FFFFFF%22%7D%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22width%22%3A120%2C%22height%22%3A80%2C%22zIndex%22%3A6%7D%2C%7B%22type%22%3A%22text%22%2C%22html%22%3A%22%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%22%2C%22shape%22%3A%22text%22%2C%22category%22%3A%22flowchart%22%2C%22id%22%3A%22b43d8a9d-8a91-43c4-9c13-866b3a079705%22%2C%22x%22%3A-136%2C%22y%22%3A228.671875%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22zIndex%22%3A7%7D%5D%2C%22zIndex%22%3A8%7D%2C%7B%22type%22%3A%22geometry%22%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%26nbsp%3B%3C%2Fdiv%3E%22%2C%22shape%22%3A%22actor%22%2C%22category%22%3A%22UML%22%2C%22id%22%3A%22f3c283dd-128a-4eaa-bd0c-c006a7ef372a%22%2C%22x%22%3A-707%2C%22y%22%3A187.67000000000002%2C%22fill%22%3A%7B%22color%22%3A%22%23FFFFFF%22%7D%2C%22stroke%22%3A%7B%22color%22%3A%22%23585A5A%22%7D%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22width%22%3A40%2C%22height%22%3A80%2C%22zIndex%22%3A9%2C%22rotate%22%3A0%7D%2C%7B%22id%22%3A%22b1fa48ac-f009-4712-94da-f495390976d3%22%2C%22type%22%3A%22pen%22%2C%22points%22%3A%5B%5B-383%2C267.67%5D%5D%2C%22zIndex%22%3A10%7D%2C%7B%22shape%22%3A%22straight%22%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22a91ad1f5-3bbb-48aa-bf99-b73588febb97%22%2C%22connection%22%3A%5B0%2C0.16852861824682203%5D%7D%2C%22type%22%3A%22line%22%2C%22source%22%3A%7B%22id%22%3A%22650891be-3413-4f4d-b066-97c214c23fb4%22%2C%22connection%22%3A%5B1%2C0.16852861824682203%5D%7D%2C%22stroke%22%3A%7B%22color%22%3A%22%23585A5A%22%7D%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22id%22%3A%227cb7548e-1180-4b8a-a24e-7d776edb6221%22%2C%22zIndex%22%3A11%2C%22controlPoints%22%3A%5B%5D%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E2%80%8B%E8%AF%B7%E6%B1%82%E5%88%9D%E5%A7%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E6%96%87%E6%A1%88%3C%2Fdiv%3E%22%2C%22opacity%22%3A1%7D%2C%7B%22shape%22%3A%22straight%22%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22connection%22%3A%5B0%2C0.4%5D%2C%22id%22%3A%221da6a51a-83f8-4200-a13c-df65da987a7b%22%7D%2C%22type%22%3A%22line%22%2C%22source%22%3A%7B%22id%22%3A%22a91ad1f5-3bbb-48aa-bf99-b73588febb97%22%2C%22connection%22%3A%22E%22%7D%2C%22stroke%22%3A%7B%22color%22%3A%22%23585A5A%22%7D%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22id%22%3A%22e6044b71-1efc-41e8-a32f-2bec3e407add%22%2C%22zIndex%22%3A12%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E2%80%8B%E5%8A%A0%E8%BD%BD%E6%96%87%E6%A1%88%E5%88%9D%E5%A7%8B%E5%8C%96%3C%2Fdiv%3E%22%2C%22opacity%22%3A1%7D%2C%7B%22shape%22%3A%22straight%22%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22650891be-3413-4f4d-b066-97c214c23fb4%22%2C%22connection%22%3A%5B1%2C0.29734217756885595%5D%7D%2C%22type%22%3A%22line%22%2C%22source%22%3A%7B%22id%22%3A%22a91ad1f5-3bbb-48aa-bf99-b73588febb97%22%2C%22connection%22%3A%5B0%2C0.29734217756885595%5D%7D%2C%22stroke%22%3A%7B%22color%22%3A%22%23585A5A%22%7D%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22id%22%3A%2208f79a11-a45b-4870-ad84-956e8c1d0672%22%2C%22zIndex%22%3A13%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E2%80%8B%E4%B8%BB%E8%BF%9B%E7%A8%8B%E5%AE%9E%E4%BE%8B%E8%BF%94%E5%9B%9E%3C%2Fdiv%3E%22%2C%22opacity%22%3A1%7D%2C%7B%22shape%22%3A%22straight%22%2C%22stroke%22%3A%7B%22width%22%3A2%2C%22color%22%3A%22%23585A5A%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22connection%22%3A%5B3.854360714355538e-8%2C0.16899083024364406%5D%2C%22id%22%3A%22650891be-3413-4f4d-b066-97c214c23fb4%22%7D%2C%22source%22%3A%7B%22id%22%3A%22f3c283dd-128a-4eaa-bd0c-c006a7ef372a%22%2C%22connection%22%3A%5B1%2C0.4375%5D%7D%2C%22type%22%3A%22line%22%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22id%22%3A%22d458ee9c-39e7-4681-8406-1f7b873c278d%22%2C%22zIndex%22%3A14%2C%22controlPoints%22%3A%5B%5D%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E2%80%8B%E8%AE%BF%E9%97%AE%3C%2Fdiv%3E%22%7D%2C%7B%22shape%22%3A%22straight%22%2C%22stroke%22%3A%7B%22width%22%3A2%2C%22color%22%3A%22%23585A5A%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22open-triangle%22%2C%22connection%22%3A%5B1.8312742283272271e-7%2C0.7520416777012712%5D%2C%22id%22%3A%22650891be-3413-4f4d-b066-97c214c23fb4%22%7D%2C%22source%22%3A%7B%22id%22%3A%22f3c283dd-128a-4eaa-bd0c-c006a7ef372a%22%2C%22connection%22%3A%22E%22%7D%2C%22type%22%3A%22line%22%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22id%22%3A%226d4ea57f-c724-4371-b9d4-154632bdf5d2%22%2C%22zIndex%22%3A15%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E2%80%8B%E5%88%87%E6%8D%A2%E8%AF%AD%E8%A8%80%3C%2Fdiv%3E%22%7D%2C%7B%22shape%22%3A%22straight%22%2C%22stroke%22%3A%7B%22width%22%3A2%2C%22color%22%3A%22%23585A5A%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22open-triangle%22%2C%22id%22%3A%22a91ad1f5-3bbb-48aa-bf99-b73588febb97%22%2C%22connection%22%3A%5B0%2C0.7515794657044491%5D%7D%2C%22source%22%3A%7B%22id%22%3A%22650891be-3413-4f4d-b066-97c214c23fb4%22%2C%22connection%22%3A%5B1%2C0.7515794657044491%5D%7D%2C%22type%22%3A%22line%22%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22id%22%3A%22ac7572fa-2e59-4a16-8a9a-216011f419e7%22%2C%22zIndex%22%3A16%2C%22controlPoints%22%3A%5B%5D%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E2%80%8B%E4%B8%BB%E8%BF%9B%E7%A8%8B%E5%AE%9E%E4%BE%8B%E5%88%87%E6%8D%A2%E8%AF%AD%E8%A8%80%3C%2Fdiv%3E%22%7D%2C%7B%22shape%22%3A%22straight%22%2C%22stroke%22%3A%7B%22width%22%3A2%2C%22color%22%3A%22%23585A5A%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22open-triangle%22%2C%22id%22%3A%22650891be-3413-4f4d-b066-97c214c23fb4%22%2C%22connection%22%3A%5B1%2C0.8774654065148305%5D%7D%2C%22source%22%3A%7B%22id%22%3A%22a91ad1f5-3bbb-48aa-bf99-b73588febb97%22%2C%22connection%22%3A%5B2.1422976295490605e-7%2C0.8774654065148305%5D%7D%2C%22type%22%3A%22line%22%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22id%22%3A%22168cab9a-bfae-4cf5-a06b-88255567f19a%22%2C%22zIndex%22%3A17%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E2%80%8B%E8%BF%94%E5%9B%9E%E6%96%B0%E8%AF%AD%E8%A8%80%E7%9A%84%E6%96%87%E6%A1%88%3C%2Fdiv%3E%22%7D%5D%7D%2C%22viewportOption%22%3A%22adapt%22%2C%22viewportSetting%22%3A%7B%22zoom%22%3A1%2C%22tlCanvasPoint%22%3A%5B-762%2C9.421875%2C1%5D%2C%22width%22%3A764%2C%22height%22%3A478%7D%2C%22search%22%3A%22%E2%80%8B%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%C2%A0%E4%B8%BB%E8%BF%9B%E7%A8%8B%C2%A0%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%C2%A0%E2%80%8B%E8%AF%B7%E6%B1%82%E5%88%9D%E5%A7%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E6%96%87%E6%A1%88%E2%80%8B%E5%8A%A0%E8%BD%BD%E6%96%87%E6%A1%88%E5%88%9D%E5%A7%8B%E5%8C%96%E2%80%8B%E4%B8%BB%E8%BF%9B%E7%A8%8B%E5%AE%9E%E4%BE%8B%E8%BF%94%E5%9B%9E%E2%80%8B%E8%AE%BF%E9%97%AE%E2%80%8B%E5%88%87%E6%8D%A2%E8%AF%AD%E8%A8%80%E2%80%8B%E4%B8%BB%E8%BF%9B%E7%A8%8B%E5%AE%9E%E4%BE%8B%E5%88%87%E6%8D%A2%E8%AF%AD%E8%A8%80%E2%80%8B%E8%BF%94%E5%9B%9E%E6%96%B0%E8%AF%AD%E8%A8%80%E7%9A%84%E6%96%87%E6%A1%88%22%2C%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fjpeg%2F12711679%2F1674985695061-816932b3-df74-4162-af0b-832768d17345.jpeg%22%2C%22graphicsBBox%22%3A%7B%22x%22%3A-767%2C%22y%22%3A90.671875%2C%22width%22%3A728%2C%22height%22%3A327.5%7D%2C%22id%22%3A%22g7ptA%22%7D\"></card><p data-lake-id=\"u8e539458\" id=\"u8e539458\"><br></p><h2 data-lake-id=\"ySWOT\" id=\"ySWOT\"><span data-lake-id=\"u5c88ad5a\" id=\"u5c88ad5a\">主进程</span></h2><p data-lake-id=\"u85068bd4\" id=\"u85068bd4\"><span data-lake-id=\"ub09571f1\" id=\"ub09571f1\" class=\"lake-fontsize-12\">用户选择的系统语言保存在 </span><span data-lake-id=\"u74d30eac\" id=\"u74d30eac\">electron-store 中，通过 </span><code data-lake-id=\"u07983a60\" id=\"u07983a60\"><span data-lake-id=\"ue95bb667\" id=\"ue95bb667\">getConfigStore</span></code><span data-lake-id=\"u246fbfc1\" id=\"u246fbfc1\">方法获取上次用户选择的系统语言，默认为中文</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22import%20Store%20from%20'electron-store'%3B%5Cn%5Cnexport%20interface%20StoreState%20%7B%5Cn%20%20theme%3A%20string%3B%5Cn%20%20config%3A%20NOTES.Config%3B%5Cn%7D%5Cn%5Cnexport%20const%20getConfigStore%20%3D%20%3CK%20extends%20keyof%20NOTES.Config%3E(key%3A%20K)%20%3D%3E%20%7B%5Cn%20%20return%20getStore%3CNOTES.Config%5BK%5D%3E(%60config.%24%7Bkey%7D%60)%3B%5Cn%7D%3B%5Cn%5Cnexport%20const%20setConfigStore%20%3D%20(value%3A%20Partial%3CNOTES.Config%3E)%20%3D%3E%20%7B%5Cn%20%20const%20config%20%3D%20getAllConfigStore()%3B%5Cn%20%20return%20setStore('config'%2C%20%7B%20...config%2C%20...value%20%7D)%3B%5Cn%7D%3B%5Cn%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22U5Wr9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u7df4b793\" id=\"u7df4b793\"><br></p><p data-lake-id=\"uba7dc1be\" id=\"uba7dc1be\"><a href=\"https://github.com/i18next/i18next-fs-backend\" target=\"_blank\" data-lake-id=\"ufe92853a\" id=\"ufe92853a\"><span data-lake-id=\"uabcbc54e\" id=\"uabcbc54e\"> i18next-fs-backend</span></a><span data-lake-id=\"uc508059c\" id=\"uc508059c\"> 是 </span><span data-lake-id=\"u0bab3922\" id=\"u0bab3922\" class=\"lake-fontsize-12\" style=\"color: rgb(36, 41, 47)\">i18next 的一个扩展，允许 Node.js 从本地文件系统中加载翻译</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22import%20i18next%20from%20'i18next'%3B%5Cnimport%20i18nextBackend%20from%20'i18next-fs-backend'%3B%5Cn%5Cnimport%20%7B%20getConfigStore%20%7D%20from%20'.%2Fstore'%3B%5Cn%5Cni18next.use(i18nextBackend).init(%7B%5Cn%20%20lng%3A%20getConfigStore('lang')%20%7C%7C%20'zh-CN'%2C%5Cn%20%20fallbackLng%3A%20'en-US'%2C%5Cn%20%20backend%3A%20%7B%5Cn%20%20%20%20loadPath%3A%20path.join(__dirname%2C%20'.%2Fi18n%2F%7B%7Blng%7D%7D.json')%2C%5Cn%20%20%7D%2C%5Cn%20%20interpolation%3A%20%7B%5Cn%20%20%20%20escapeValue%3A%20false%2C%20%2F%2F%20react%20already%20safes%20from%20xss%5Cn%20%20%7D%2C%5Cn%7D)%3B%5Cn%5Cnexport%20default%20i18next%3B%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22i18n.main.ts%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GjbsS%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u904fe770\" id=\"u904fe770\"><br></p><p data-lake-id=\"u290ce275\" id=\"u290ce275\"><span data-lake-id=\"u031359ae\" id=\"u031359ae\">i18next 实例初始化后，通过 </span><code data-lake-id=\"u1255b627\" id=\"u1255b627\"><span data-lake-id=\"ue85d597e\" id=\"ue85d597e\">loadLanguages</span></code><span data-lake-id=\"u9ba0765d\" id=\"u9ba0765d\">加载对应语言的文案，</span><code data-lake-id=\"u99ca0a6c\" id=\"u99ca0a6c\"><span data-lake-id=\"uabfba25a\" id=\"uabfba25a\">getResourceBundle</span></code><span data-lake-id=\"ua6d03b6f\" id=\"ua6d03b6f\">获取语言的文案，通过这两个方法，渲染进程就可以共享主进程的文案，实现文案的集中管理。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22import%20logger%20from%20'electron-log'%3B%5Cn%5Cn%5Cnimport%20i18next%2C%20%7B%20LngOptions%20%7D%20from%20'..%2F..%2Futils%2Fi18n'%3B%5Cn%5Cn%5Cnexport%20const%20getI18nLanguages%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20return%20LngOptions%3B%5Cn%7D%3B%5Cn%5Cn%5Cnexport%20const%20getI18nInitResource%20%3D%20async%20()%20%3D%3E%20%7B%5Cn%20%20const%20lng%20%3D%20i18next.language%3B%5Cn%20%20const%20resource%20%3D%20await%20getI18nResource(lng)%3B%5Cn%5Cn%5Cn%20%20return%20%7B%20lng%2C%20resource%20%7D%3B%5Cn%7D%3B%5Cn%5Cn%5Cnexport%20const%20getI18nResource%20%3D%20async%20(lng%3A%20string)%20%3D%3E%20%7B%5Cn%20%20await%20i18next.loadLanguages(lng).catch((err)%20%3D%3E%20%7B%5Cn%20%20%20%20logger.error(err)%3B%5Cn%20%20%7D)%3B%5Cn%5Cn%5Cn%20%20return%20i18next.getResourceBundle(lng%2C%20'')%3B%5Cn%7D%3B%5Cn%5Cn%5Cnexport%20const%20changeI18nLang%20%3D%20async%20(lng%3A%20string)%20%3D%3E%20%7B%5Cn%20%20return%20new%20Promise%3Cboolean%3E((resolve)%20%3D%3E%20%7B%5Cn%20%20%20%20i18next.changeLanguage(lng%2C%20(err)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20if%20(err)%20logger.error(err)%3B%5Cn%20%20%20%20%20%20resolve(!err)%3B%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%7D)%3B%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22i18n.utils.ts%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22FDe0P%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"hivPf\" id=\"hivPf\"><br></h2><h2 data-lake-id=\"is0wP\" id=\"is0wP\"><span data-lake-id=\"uc91ed8d7\" id=\"uc91ed8d7\">渲染进程</span></h2><p data-lake-id=\"u739b2f1d\" id=\"u739b2f1d\"><code data-lake-id=\"u2e2ac6e5\" id=\"u2e2ac6e5\"><span data-lake-id=\"u7a996e50\" id=\"u7a996e50\">invokeCommand</span></code><span data-lake-id=\"u33eee8e2\" id=\"u33eee8e2\">同学 window 上挂载的变量和主进程双向通行</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22export%20const%20invokeCommand%20%3D%20%3CT%3E(type%3A%20string%2C%20payload%20%3D%20%7B%7D)%20%3D%3E%20%7B%5Cn%20%20return%20window.api.invoke%3CT%3E('fromRenderer'%2C%20%7B%5Cn%20%20%20%20type%2C%5Cn%20%20%20%20payload%2C%5Cn%20%20%7D)%3B%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22commands%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22agPtx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uc8da250c\" id=\"uc8da250c\"><br></p><p data-lake-id=\"ubd091e6b\" id=\"ubd091e6b\"><span data-lake-id=\"ue10e27c8\" id=\"ue10e27c8\">渲染进程通过 </span><code data-lake-id=\"u2b1422c2\" id=\"u2b1422c2\"><span data-lake-id=\"u6c81219d\" id=\"u6c81219d\">invokeCommand</span></code><span data-lake-id=\"u93323aa1\" id=\"u93323aa1\"> 调用主进程的 </span><code data-lake-id=\"u24082b24\" id=\"u24082b24\"><span data-lake-id=\"ub6674aee\" id=\"ub6674aee\">getI18nInitResource</span></code><span data-lake-id=\"ub1a372cd\" id=\"ub1a372cd\"> 方法获取初始的语言和文案完成实例的初始化。</span></p><p data-lake-id=\"u18de3f2a\" id=\"u18de3f2a\"><span data-lake-id=\"ue16916f3\" id=\"ue16916f3\">用户切换语言时，同样通过进程通信获取新语言的文案，通过 </span><code data-lake-id=\"u44f25088\" id=\"u44f25088\"><span data-lake-id=\"u7ead8aaf\" id=\"u7ead8aaf\">i18next.addResourceBundle</span></code><span data-lake-id=\"u8e37edff\" id=\"u8e37edff\">动态加载到实例中，调用 </span><code data-lake-id=\"ue014097f\" id=\"ue014097f\"><span data-lake-id=\"u297be7cc\" id=\"u297be7cc\">i18next.changeLanguage</span></code><span data-lake-id=\"u8861862c\" id=\"u8861862c\">完成语言的切换。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22import%20i18next%2C%20%7B%20ResourceKey%20%7D%20from%20'i18next'%3B%5Cnimport%20%7B%20initReactI18next%20%7D%20from%20'react-i18next'%3B%5Cn%5Cnimport%20%7B%20invokeCommand%20%7D%20from%20'%40%2Fcommands'%3B%5Cn%5Cnexport%20const%20initI18next%20%3D%20async%20()%20%3D%3E%20%7B%5Cn%20%20const%20%7B%20lng%2C%20resource%20%7D%20%3D%20await%20invokeCommand%3C%7B%20lng%3A%20string%3B%20resource%3A%20ResourceKey%20%7D%3E(%5Cn%20%20%20%20'getI18nInitResource'%2C%5Cn%20%20)%3B%5Cn%5Cn%20%20return%20i18next.use(initReactI18next).init(%7B%5Cn%20%20%20%20lng%2C%5Cn%20%20%20%20resources%3A%20%7B%5Cn%20%20%20%20%20%20%5Blng%5D%3A%20%7B%5Cn%20%20%20%20%20%20%20%20translation%3A%20resource%2C%5Cn%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20interpolation%3A%20%7B%5Cn%20%20%20%20%20%20escapeValue%3A%20false%2C%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D)%3B%5Cn%7D%3B%5Cn%5Cnexport%20const%20changeLanguage%20%3D%20async%20(lng%3A%20string)%20%3D%3E%20%7B%5Cn%20%20if%20(!i18next.hasResourceBundle(lng%2C%20'translation'))%20%7B%5Cn%20%20%20%20%2F%2F%20%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E8%AF%AD%E8%A8%80%5Cn%20%20%20%20const%20resource%20%3D%20await%20invokeCommand%3CResourceKey%3E('getI18nResource'%2C%20lng)%3B%5Cn%20%20%20%20i18next.addResourceBundle(lng%2C%20'translation'%2C%20resource)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20return%20i18next.changeLanguage(lng)%3B%5Cn%7D%3B%5Cn%5Cnexport%20default%20i18next%3B%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22i18n.render.ts%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22H5UJB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u94fb810e\" id=\"u94fb810e\"><span data-lake-id=\"uab8d45e7\" id=\"uab8d45e7\">​</span><br></p><h2 data-lake-id=\"YNoH7\" id=\"YNoH7\"><span data-lake-id=\"uccf8f86e\" id=\"uccf8f86e\">总结：</span></h2><p data-lake-id=\"u7192c3fb\" id=\"u7192c3fb\"><span data-lake-id=\"u49841ff6\" id=\"u49841ff6\">electron 的多进程机制导致 i18next 不得不初始化出多个实例，但是我们同样可以利用进程通信，让一个实例加载文案，再同步到另一个实例，实现文案的集中管理。</span></p><p data-lake-id=\"u0a78ee58\" id=\"u0a78ee58\"><span data-lake-id=\"ubb0fc32c\" id=\"ubb0fc32c\">​</span><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"uca582e1c\" id=\"uca582e1c\"><a href=\"https://www.i18next.com/\" target=\"_blank\" data-lake-id=\"u83ffd375\" id=\"u83ffd375\"><span data-lake-id=\"udbdf2a47\" id=\"udbdf2a47\">i18next</span></a><span data-lake-id=\"ub3a4afcf\" id=\"ub3a4afcf\"> 是社区中优秀的国际化框架，在 react 中广泛使用，我司的大量产品都使用 i18next 进行国际化，而 </span><a href=\"https://react.i18next.com/\" target=\"_blank\" data-lake-id=\"u78c6180e\" id=\"u78c6180e\"><span data-lake-id=\"u8a11b7ca\" id=\"u8a11b7ca\">react-i18next</span></a><span data-lake-id=\"u60c9343d\" id=\"u60c9343d\"> 是 i18next 的一个扩展，提供了一些 HOC 及 hook 方便我们在 react 中使用 i18next。</span></p><p data-lake-id=\"ud858109f\" id=\"ud858109f\"><span data-lake-id=\"u8f74487b\" id=\"u8f74487b\">​</span><br></p><p data-lake-id=\"u839f511e\" id=\"u839f511e\"><span data-lake-id=\"u45de0e65\" id=\"u45de0e65\">由于 electron 是多进程机制，主进程和渲染进程都需要个 i18next 实例，但是多实例带来了一些问题，比如多实例的语言如何同步，文案如何集中管理？</span></p><p data-lake-id=\"u2aadcef2\" id=\"u2aadcef2\"><span data-lake-id=\"u4617fbb3\" id=\"u4617fbb3\">​</span><br></p><p data-lake-id=\"uda12842d\" id=\"uda12842d\"><span data-lake-id=\"u737a6bf3\" id=\"u737a6bf3\">针对上面的两个问题，经过实践，我给出的解决方案如下：</span></p><ol list=\"u8f814805\"><li fid=\"u1f04a27b\" data-lake-id=\"u61120671\" id=\"u61120671\"><span data-lake-id=\"u6436980f\" id=\"u6436980f\">主进程负责加载用户选择的语言和对应的文案</span></li><li fid=\"u1f04a27b\" data-lake-id=\"u659e2cdc\" id=\"u659e2cdc\"><span data-lake-id=\"u56d7c4f0\" id=\"u56d7c4f0\">渲染进程通过进程通信从主进程的实例上获取初始化语言和文案初始化实例</span></li><li fid=\"u1f04a27b\" data-lake-id=\"u2a23abf2\" id=\"u2a23abf2\"><span data-lake-id=\"ua4bc0994\" id=\"ua4bc0994\">用户在渲染进程切换语言，通过进程通信，主进程的 i18next 实例加载新语言的文案，并返回给渲染进程动态加载到渲染进程的实例中</span></li></ol><p data-lake-id=\"u5d51435a\" id=\"u5d51435a\"><br></p><p data-lake-id=\"u41a425e0\" id=\"u41a425e0\"><span data-lake-id=\"u294a7778\" id=\"u294a7778\">整个流程大致如下：</span></p><card type=\"block\" name=\"board\" value=\"data:%7B%22diagramData%22%3A%7B%22head%22%3A%7B%22version%22%3A%222.0.0%22%2C%22theme%22%3A%7B%22name%22%3A%22default%22%7D%2C%22rough%22%3A%7B%22name%22%3A%22default%22%7D%7D%2C%22body%22%3A%5B%7B%22id%22%3A%2290840089-9a0e-45f0-bda4-20570026a73e%22%2C%22type%22%3A%22group%22%2C%22children%22%3A%5B%7B%22type%22%3A%22geometry%22%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%26%238203%3B%3Cbr%3E%3C%2Fdiv%3E%22%2C%22shape%22%3A%22activation%22%2C%22category%22%3A%22UML%22%2C%22id%22%3A%22650891be-3413-4f4d-b066-97c214c23fb4%22%2C%22x%22%3A-576.5%2C%22y%22%3A90.671875%2C%22fill%22%3A%7B%22color%22%3A%22%23FFFFFF%22%7D%2C%22stroke%22%3A%7B%22color%22%3A%22%23585A5A%22%7D%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22width%22%3A52%2C%22height%22%3A295%2C%22zIndex%22%3A0%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22text%22%2C%22html%22%3A%22%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%22%2C%22shape%22%3A%22text%22%2C%22category%22%3A%22UML%22%2C%22id%22%3A%2271f959a4-402d-444e-8197-d71bfe1a1f6c%22%2C%22x%22%3A-559%2C%22y%22%3A187.671875%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22zIndex%22%3A1%2C%22width%22%3A17%2C%22height%22%3A101%2C%22rotate%22%3A0%7D%5D%2C%22zIndex%22%3A2%7D%2C%7B%22id%22%3A%22647a0790-7f61-4170-9778-273430f6c768%22%2C%22type%22%3A%22group%22%2C%22children%22%3A%5B%7B%22type%22%3A%22geometry%22%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%26nbsp%3B%3C%2Fdiv%3E%22%2C%22shape%22%3A%22activation%22%2C%22category%22%3A%22UML%22%2C%22id%22%3A%22a91ad1f5-3bbb-48aa-bf99-b73588febb97%22%2C%22x%22%3A-350%2C%22y%22%3A90.671875%2C%22fill%22%3A%7B%22color%22%3A%22%23FFFFFF%22%7D%2C%22stroke%22%3A%7B%22color%22%3A%22%23585A5A%22%7D%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22width%22%3A52%2C%22height%22%3A295%2C%22zIndex%22%3A3%2C%22rotate%22%3A0%7D%2C%7B%22type%22%3A%22text%22%2C%22html%22%3A%22%E4%B8%BB%E8%BF%9B%E7%A8%8B%22%2C%22shape%22%3A%22text%22%2C%22category%22%3A%22UML%22%2C%22id%22%3A%22890d885b-3c87-474f-ba8f-113540278942%22%2C%22x%22%3A-332.5%2C%22y%22%3A208.67000000000002%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22zIndex%22%3A4%2C%22width%22%3A17%2C%22height%22%3A59%2C%22rotate%22%3A0%7D%5D%2C%22zIndex%22%3A5%7D%2C%7B%22id%22%3A%227d42d9ac-621c-49f8-9279-cb0246c33a3c%22%2C%22type%22%3A%22group%22%2C%22children%22%3A%5B%7B%22type%22%3A%22geometry%22%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%26nbsp%3B%3C%2Fdiv%3E%22%2C%22shape%22%3A%22multi-document%22%2C%22category%22%3A%22flowchart%22%2C%22stroke%22%3A%7B%22color%22%3A%22%23585A5A%22%7D%2C%22id%22%3A%221da6a51a-83f8-4200-a13c-df65da987a7b%22%2C%22x%22%3A-159%2C%22y%22%3A205.171875%2C%22fill%22%3A%7B%22color%22%3A%22%23FFFFFF%22%7D%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22width%22%3A120%2C%22height%22%3A80%2C%22zIndex%22%3A6%7D%2C%7B%22type%22%3A%22text%22%2C%22html%22%3A%22%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%22%2C%22shape%22%3A%22text%22%2C%22category%22%3A%22flowchart%22%2C%22id%22%3A%22b43d8a9d-8a91-43c4-9c13-866b3a079705%22%2C%22x%22%3A-136%2C%22y%22%3A228.671875%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22zIndex%22%3A7%7D%5D%2C%22zIndex%22%3A8%7D%2C%7B%22type%22%3A%22geometry%22%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%26nbsp%3B%3C%2Fdiv%3E%22%2C%22shape%22%3A%22actor%22%2C%22category%22%3A%22UML%22%2C%22id%22%3A%22f3c283dd-128a-4eaa-bd0c-c006a7ef372a%22%2C%22x%22%3A-707%2C%22y%22%3A187.67000000000002%2C%22fill%22%3A%7B%22color%22%3A%22%23FFFFFF%22%7D%2C%22stroke%22%3A%7B%22color%22%3A%22%23585A5A%22%7D%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22width%22%3A40%2C%22height%22%3A80%2C%22zIndex%22%3A9%2C%22rotate%22%3A0%7D%2C%7B%22id%22%3A%22b1fa48ac-f009-4712-94da-f495390976d3%22%2C%22type%22%3A%22pen%22%2C%22points%22%3A%5B%5B-383%2C267.67%5D%5D%2C%22zIndex%22%3A10%7D%2C%7B%22shape%22%3A%22straight%22%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22a91ad1f5-3bbb-48aa-bf99-b73588febb97%22%2C%22connection%22%3A%5B0%2C0.16852861824682203%5D%7D%2C%22type%22%3A%22line%22%2C%22source%22%3A%7B%22id%22%3A%22650891be-3413-4f4d-b066-97c214c23fb4%22%2C%22connection%22%3A%5B1%2C0.16852861824682203%5D%7D%2C%22stroke%22%3A%7B%22color%22%3A%22%23585A5A%22%7D%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22id%22%3A%227cb7548e-1180-4b8a-a24e-7d776edb6221%22%2C%22zIndex%22%3A11%2C%22controlPoints%22%3A%5B%5D%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E2%80%8B%E8%AF%B7%E6%B1%82%E5%88%9D%E5%A7%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E6%96%87%E6%A1%88%3C%2Fdiv%3E%22%2C%22opacity%22%3A1%7D%2C%7B%22shape%22%3A%22straight%22%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22connection%22%3A%5B0%2C0.4%5D%2C%22id%22%3A%221da6a51a-83f8-4200-a13c-df65da987a7b%22%7D%2C%22type%22%3A%22line%22%2C%22source%22%3A%7B%22id%22%3A%22a91ad1f5-3bbb-48aa-bf99-b73588febb97%22%2C%22connection%22%3A%22E%22%7D%2C%22stroke%22%3A%7B%22color%22%3A%22%23585A5A%22%7D%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22id%22%3A%22e6044b71-1efc-41e8-a32f-2bec3e407add%22%2C%22zIndex%22%3A12%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E2%80%8B%E5%8A%A0%E8%BD%BD%E6%96%87%E6%A1%88%E5%88%9D%E5%A7%8B%E5%8C%96%3C%2Fdiv%3E%22%2C%22opacity%22%3A1%7D%2C%7B%22shape%22%3A%22straight%22%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22id%22%3A%22650891be-3413-4f4d-b066-97c214c23fb4%22%2C%22connection%22%3A%5B1%2C0.29734217756885595%5D%7D%2C%22type%22%3A%22line%22%2C%22source%22%3A%7B%22id%22%3A%22a91ad1f5-3bbb-48aa-bf99-b73588febb97%22%2C%22connection%22%3A%5B0%2C0.29734217756885595%5D%7D%2C%22stroke%22%3A%7B%22color%22%3A%22%23585A5A%22%7D%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22id%22%3A%2208f79a11-a45b-4870-ad84-956e8c1d0672%22%2C%22zIndex%22%3A13%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E2%80%8B%E4%B8%BB%E8%BF%9B%E7%A8%8B%E5%AE%9E%E4%BE%8B%E8%BF%94%E5%9B%9E%3C%2Fdiv%3E%22%2C%22opacity%22%3A1%7D%2C%7B%22shape%22%3A%22straight%22%2C%22stroke%22%3A%7B%22width%22%3A2%2C%22color%22%3A%22%23585A5A%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22arrow%22%2C%22connection%22%3A%5B3.854360714355538e-8%2C0.16899083024364406%5D%2C%22id%22%3A%22650891be-3413-4f4d-b066-97c214c23fb4%22%7D%2C%22source%22%3A%7B%22id%22%3A%22f3c283dd-128a-4eaa-bd0c-c006a7ef372a%22%2C%22connection%22%3A%5B1%2C0.4375%5D%7D%2C%22type%22%3A%22line%22%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22id%22%3A%22d458ee9c-39e7-4681-8406-1f7b873c278d%22%2C%22zIndex%22%3A14%2C%22controlPoints%22%3A%5B%5D%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E2%80%8B%E8%AE%BF%E9%97%AE%3C%2Fdiv%3E%22%7D%2C%7B%22shape%22%3A%22straight%22%2C%22stroke%22%3A%7B%22width%22%3A2%2C%22color%22%3A%22%23585A5A%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22open-triangle%22%2C%22connection%22%3A%5B1.8312742283272271e-7%2C0.7520416777012712%5D%2C%22id%22%3A%22650891be-3413-4f4d-b066-97c214c23fb4%22%7D%2C%22source%22%3A%7B%22id%22%3A%22f3c283dd-128a-4eaa-bd0c-c006a7ef372a%22%2C%22connection%22%3A%22E%22%7D%2C%22type%22%3A%22line%22%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22id%22%3A%226d4ea57f-c724-4371-b9d4-154632bdf5d2%22%2C%22zIndex%22%3A15%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E2%80%8B%E5%88%87%E6%8D%A2%E8%AF%AD%E8%A8%80%3C%2Fdiv%3E%22%7D%2C%7B%22shape%22%3A%22straight%22%2C%22stroke%22%3A%7B%22width%22%3A2%2C%22color%22%3A%22%23585A5A%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22open-triangle%22%2C%22id%22%3A%22a91ad1f5-3bbb-48aa-bf99-b73588febb97%22%2C%22connection%22%3A%5B0%2C0.7515794657044491%5D%7D%2C%22source%22%3A%7B%22id%22%3A%22650891be-3413-4f4d-b066-97c214c23fb4%22%2C%22connection%22%3A%5B1%2C0.7515794657044491%5D%7D%2C%22type%22%3A%22line%22%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22id%22%3A%22ac7572fa-2e59-4a16-8a9a-216011f419e7%22%2C%22zIndex%22%3A16%2C%22controlPoints%22%3A%5B%5D%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E2%80%8B%E4%B8%BB%E8%BF%9B%E7%A8%8B%E5%AE%9E%E4%BE%8B%E5%88%87%E6%8D%A2%E8%AF%AD%E8%A8%80%3C%2Fdiv%3E%22%7D%2C%7B%22shape%22%3A%22straight%22%2C%22stroke%22%3A%7B%22width%22%3A2%2C%22color%22%3A%22%23585A5A%22%7D%2C%22target%22%3A%7B%22marker%22%3A%22open-triangle%22%2C%22id%22%3A%22650891be-3413-4f4d-b066-97c214c23fb4%22%2C%22connection%22%3A%5B1%2C0.8774654065148305%5D%7D%2C%22source%22%3A%7B%22id%22%3A%22a91ad1f5-3bbb-48aa-bf99-b73588febb97%22%2C%22connection%22%3A%5B2.1422976295490605e-7%2C0.8774654065148305%5D%7D%2C%22type%22%3A%22line%22%2C%22defaultContentStyle%22%3A%7B%22color%22%3A%22%23262626%22%7D%2C%22id%22%3A%22168cab9a-bfae-4cf5-a06b-88255567f19a%22%2C%22zIndex%22%3A17%2C%22html%22%3A%22%3Cdiv%20style%3D%5C%22text-align%3Acenter%3B%5C%22%3E%E2%80%8B%E8%BF%94%E5%9B%9E%E6%96%B0%E8%AF%AD%E8%A8%80%E7%9A%84%E6%96%87%E6%A1%88%3C%2Fdiv%3E%22%7D%5D%7D%2C%22viewportOption%22%3A%22adapt%22%2C%22viewportSetting%22%3A%7B%22zoom%22%3A1%2C%22tlCanvasPoint%22%3A%5B-762%2C9.421875%2C1%5D%2C%22width%22%3A764%2C%22height%22%3A478%7D%2C%22search%22%3A%22%E2%80%8B%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%C2%A0%E4%B8%BB%E8%BF%9B%E7%A8%8B%C2%A0%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%C2%A0%E2%80%8B%E8%AF%B7%E6%B1%82%E5%88%9D%E5%A7%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E6%96%87%E6%A1%88%E2%80%8B%E5%8A%A0%E8%BD%BD%E6%96%87%E6%A1%88%E5%88%9D%E5%A7%8B%E5%8C%96%E2%80%8B%E4%B8%BB%E8%BF%9B%E7%A8%8B%E5%AE%9E%E4%BE%8B%E8%BF%94%E5%9B%9E%E2%80%8B%E8%AE%BF%E9%97%AE%E2%80%8B%E5%88%87%E6%8D%A2%E8%AF%AD%E8%A8%80%E2%80%8B%E4%B8%BB%E8%BF%9B%E7%A8%8B%E5%AE%9E%E4%BE%8B%E5%88%87%E6%8D%A2%E8%AF%AD%E8%A8%80%E2%80%8B%E8%BF%94%E5%9B%9E%E6%96%B0%E8%AF%AD%E8%A8%80%E7%9A%84%E6%96%87%E6%A1%88%22%2C%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fjpeg%2F12711679%2F1674985695061-816932b3-df74-4162-af0b-832768d17345.jpeg%22%2C%22graphicsBBox%22%3A%7B%22x%22%3A-767%2C%22y%22%3A90.671875%2C%22width%22%3A728%2C%22height%22%3A327.5%7D%2C%22id%22%3A%22g7ptA%22%7D\"></card><p data-lake-id=\"u8e539458\" id=\"u8e539458\"><br></p><h2 data-lake-id=\"ySWOT\" id=\"ySWOT\"><span data-lake-id=\"u5c88ad5a\" id=\"u5c88ad5a\">主进程</span></h2><p data-lake-id=\"u85068bd4\" id=\"u85068bd4\"><span data-lake-id=\"ub09571f1\" id=\"ub09571f1\" class=\"lake-fontsize-12\">用户选择的系统语言保存在 </span><span data-lake-id=\"u74d30eac\" id=\"u74d30eac\">electron-store 中，通过 </span><code data-lake-id=\"u07983a60\" id=\"u07983a60\"><span data-lake-id=\"ue95bb667\" id=\"ue95bb667\">getConfigStore</span></code><span data-lake-id=\"u246fbfc1\" id=\"u246fbfc1\">方法获取上次用户选择的系统语言，默认为中文</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22import%20Store%20from%20'electron-store'%3B%5Cn%5Cnexport%20interface%20StoreState%20%7B%5Cn%20%20theme%3A%20string%3B%5Cn%20%20config%3A%20NOTES.Config%3B%5Cn%7D%5Cn%5Cnexport%20const%20getConfigStore%20%3D%20%3CK%20extends%20keyof%20NOTES.Config%3E(key%3A%20K)%20%3D%3E%20%7B%5Cn%20%20return%20getStore%3CNOTES.Config%5BK%5D%3E(%60config.%24%7Bkey%7D%60)%3B%5Cn%7D%3B%5Cn%5Cnexport%20const%20setConfigStore%20%3D%20(value%3A%20Partial%3CNOTES.Config%3E)%20%3D%3E%20%7B%5Cn%20%20const%20config%20%3D%20getAllConfigStore()%3B%5Cn%20%20return%20setStore('config'%2C%20%7B%20...config%2C%20...value%20%7D)%3B%5Cn%7D%3B%5Cn%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22U5Wr9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u7df4b793\" id=\"u7df4b793\"><br></p><p data-lake-id=\"uba7dc1be\" id=\"uba7dc1be\"><a href=\"https://github.com/i18next/i18next-fs-backend\" target=\"_blank\" data-lake-id=\"ufe92853a\" id=\"ufe92853a\"><span data-lake-id=\"uabcbc54e\" id=\"uabcbc54e\"> i18next-fs-backend</span></a><span data-lake-id=\"uc508059c\" id=\"uc508059c\"> 是 </span><span data-lake-id=\"u0bab3922\" id=\"u0bab3922\" class=\"lake-fontsize-12\" style=\"color: rgb(36, 41, 47)\">i18next 的一个扩展，允许 Node.js 从本地文件系统中加载翻译</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22import%20i18next%20from%20'i18next'%3B%5Cnimport%20i18nextBackend%20from%20'i18next-fs-backend'%3B%5Cn%5Cnimport%20%7B%20getConfigStore%20%7D%20from%20'.%2Fstore'%3B%5Cn%5Cni18next.use(i18nextBackend).init(%7B%5Cn%20%20lng%3A%20getConfigStore('lang')%20%7C%7C%20'zh-CN'%2C%5Cn%20%20fallbackLng%3A%20'en-US'%2C%5Cn%20%20backend%3A%20%7B%5Cn%20%20%20%20loadPath%3A%20path.join(__dirname%2C%20'.%2Fi18n%2F%7B%7Blng%7D%7D.json')%2C%5Cn%20%20%7D%2C%5Cn%20%20interpolation%3A%20%7B%5Cn%20%20%20%20escapeValue%3A%20false%2C%20%2F%2F%20react%20already%20safes%20from%20xss%5Cn%20%20%7D%2C%5Cn%7D)%3B%5Cn%5Cnexport%20default%20i18next%3B%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22i18n.main.ts%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GjbsS%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u904fe770\" id=\"u904fe770\"><br></p><p data-lake-id=\"u290ce275\" id=\"u290ce275\"><span data-lake-id=\"u031359ae\" id=\"u031359ae\">i18next 实例初始化后，通过 </span><code data-lake-id=\"u1255b627\" id=\"u1255b627\"><span data-lake-id=\"ue85d597e\" id=\"ue85d597e\">loadLanguages</span></code><span data-lake-id=\"u9ba0765d\" id=\"u9ba0765d\">加载对应语言的文案，</span><code data-lake-id=\"u99ca0a6c\" id=\"u99ca0a6c\"><span data-lake-id=\"uabfba25a\" id=\"uabfba25a\">getResourceBundle</span></code><span data-lake-id=\"ua6d03b6f\" id=\"ua6d03b6f\">获取语言的文案，通过这两个方法，渲染进程就可以共享主进程的文案，实现文案的集中管理。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22import%20logger%20from%20'electron-log'%3B%5Cn%5Cn%5Cnimport%20i18next%2C%20%7B%20LngOptions%20%7D%20from%20'..%2F..%2Futils%2Fi18n'%3B%5Cn%5Cn%5Cnexport%20const%20getI18nLanguages%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20return%20LngOptions%3B%5Cn%7D%3B%5Cn%5Cn%5Cnexport%20const%20getI18nInitResource%20%3D%20async%20()%20%3D%3E%20%7B%5Cn%20%20const%20lng%20%3D%20i18next.language%3B%5Cn%20%20const%20resource%20%3D%20await%20getI18nResource(lng)%3B%5Cn%5Cn%5Cn%20%20return%20%7B%20lng%2C%20resource%20%7D%3B%5Cn%7D%3B%5Cn%5Cn%5Cnexport%20const%20getI18nResource%20%3D%20async%20(lng%3A%20string)%20%3D%3E%20%7B%5Cn%20%20await%20i18next.loadLanguages(lng).catch((err)%20%3D%3E%20%7B%5Cn%20%20%20%20logger.error(err)%3B%5Cn%20%20%7D)%3B%5Cn%5Cn%5Cn%20%20return%20i18next.getResourceBundle(lng%2C%20'')%3B%5Cn%7D%3B%5Cn%5Cn%5Cnexport%20const%20changeI18nLang%20%3D%20async%20(lng%3A%20string)%20%3D%3E%20%7B%5Cn%20%20return%20new%20Promise%3Cboolean%3E((resolve)%20%3D%3E%20%7B%5Cn%20%20%20%20i18next.changeLanguage(lng%2C%20(err)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20if%20(err)%20logger.error(err)%3B%5Cn%20%20%20%20%20%20resolve(!err)%3B%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%7D)%3B%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22i18n.utils.ts%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22FDe0P%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"hivPf\" id=\"hivPf\"><br></h2><h2 data-lake-id=\"is0wP\" id=\"is0wP\"><span data-lake-id=\"uc91ed8d7\" id=\"uc91ed8d7\">渲染进程</span></h2><p data-lake-id=\"u739b2f1d\" id=\"u739b2f1d\"><code data-lake-id=\"u2e2ac6e5\" id=\"u2e2ac6e5\"><span data-lake-id=\"u7a996e50\" id=\"u7a996e50\">invokeCommand</span></code><span data-lake-id=\"u33eee8e2\" id=\"u33eee8e2\">同学 window 上挂载的变量和主进程双向通行</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22export%20const%20invokeCommand%20%3D%20%3CT%3E(type%3A%20string%2C%20payload%20%3D%20%7B%7D)%20%3D%3E%20%7B%5Cn%20%20return%20window.api.invoke%3CT%3E('fromRenderer'%2C%20%7B%5Cn%20%20%20%20type%2C%5Cn%20%20%20%20payload%2C%5Cn%20%20%7D)%3B%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22commands%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22agPtx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uc8da250c\" id=\"uc8da250c\"><br></p><p data-lake-id=\"ubd091e6b\" id=\"ubd091e6b\"><span data-lake-id=\"ue10e27c8\" id=\"ue10e27c8\">渲染进程通过 </span><code data-lake-id=\"u2b1422c2\" id=\"u2b1422c2\"><span data-lake-id=\"u6c81219d\" id=\"u6c81219d\">invokeCommand</span></code><span data-lake-id=\"u93323aa1\" id=\"u93323aa1\"> 调用主进程的 </span><code data-lake-id=\"u24082b24\" id=\"u24082b24\"><span data-lake-id=\"ub6674aee\" id=\"ub6674aee\">getI18nInitResource</span></code><span data-lake-id=\"ub1a372cd\" id=\"ub1a372cd\"> 方法获取初始的语言和文案完成实例的初始化。</span></p><p data-lake-id=\"u18de3f2a\" id=\"u18de3f2a\"><span data-lake-id=\"ue16916f3\" id=\"ue16916f3\">用户切换语言时，同样通过进程通信获取新语言的文案，通过 </span><code data-lake-id=\"u44f25088\" id=\"u44f25088\"><span data-lake-id=\"u7ead8aaf\" id=\"u7ead8aaf\">i18next.addResourceBundle</span></code><span data-lake-id=\"u8e37edff\" id=\"u8e37edff\">动态加载到实例中，调用 </span><code data-lake-id=\"ue014097f\" id=\"ue014097f\"><span data-lake-id=\"u297be7cc\" id=\"u297be7cc\">i18next.changeLanguage</span></code><span data-lake-id=\"u8861862c\" id=\"u8861862c\">完成语言的切换。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22import%20i18next%2C%20%7B%20ResourceKey%20%7D%20from%20'i18next'%3B%5Cnimport%20%7B%20initReactI18next%20%7D%20from%20'react-i18next'%3B%5Cn%5Cnimport%20%7B%20invokeCommand%20%7D%20from%20'%40%2Fcommands'%3B%5Cn%5Cnexport%20const%20initI18next%20%3D%20async%20()%20%3D%3E%20%7B%5Cn%20%20const%20%7B%20lng%2C%20resource%20%7D%20%3D%20await%20invokeCommand%3C%7B%20lng%3A%20string%3B%20resource%3A%20ResourceKey%20%7D%3E(%5Cn%20%20%20%20'getI18nInitResource'%2C%5Cn%20%20)%3B%5Cn%5Cn%20%20return%20i18next.use(initReactI18next).init(%7B%5Cn%20%20%20%20lng%2C%5Cn%20%20%20%20resources%3A%20%7B%5Cn%20%20%20%20%20%20%5Blng%5D%3A%20%7B%5Cn%20%20%20%20%20%20%20%20translation%3A%20resource%2C%5Cn%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20interpolation%3A%20%7B%5Cn%20%20%20%20%20%20escapeValue%3A%20false%2C%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D)%3B%5Cn%7D%3B%5Cn%5Cnexport%20const%20changeLanguage%20%3D%20async%20(lng%3A%20string)%20%3D%3E%20%7B%5Cn%20%20if%20(!i18next.hasResourceBundle(lng%2C%20'translation'))%20%7B%5Cn%20%20%20%20%2F%2F%20%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E8%AF%AD%E8%A8%80%5Cn%20%20%20%20const%20resource%20%3D%20await%20invokeCommand%3CResourceKey%3E('getI18nResource'%2C%20lng)%3B%5Cn%20%20%20%20i18next.addResourceBundle(lng%2C%20'translation'%2C%20resource)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20return%20i18next.changeLanguage(lng)%3B%5Cn%7D%3B%5Cn%5Cnexport%20default%20i18next%3B%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22i18n.render.ts%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22H5UJB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u94fb810e\" id=\"u94fb810e\"><span data-lake-id=\"uab8d45e7\" id=\"uab8d45e7\">​</span><br></p><h2 data-lake-id=\"YNoH7\" id=\"YNoH7\"><span data-lake-id=\"uccf8f86e\" id=\"uccf8f86e\">总结：</span></h2><p data-lake-id=\"u7192c3fb\" id=\"u7192c3fb\"><span data-lake-id=\"u49841ff6\" id=\"u49841ff6\">electron 的多进程机制导致 i18next 不得不初始化出多个实例，但是我们同样可以利用进程通信，让一个实例加载文案，再同步到另一个实例，实现文案的集中管理。</span></p><p data-lake-id=\"u0a78ee58\" id=\"u0a78ee58\"><span data-lake-id=\"ubb0fc32c\" id=\"ubb0fc32c\">​</span><br></p>",
    "public": 0,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2023-01-29T10:00:11.000Z",
    "deleted_at": null,
    "created_at": "2023-01-29T03:33:25.000Z",
    "updated_at": "2023-01-30T13:34:03.000Z",
    "published_at": "2023-01-29T10:00:11.000Z",
    "first_published_at": "2023-01-29T04:04:10.391Z",
    "word_count": 868,
    "cover": "https://cdn.nlark.com/yuque/0/2023/jpeg/12711679/1674985695061-816932b3-df74-4162-af0b-832768d17345.jpeg",
    "description": "i18next 是社区中优秀的国际化框架，在 react 中广泛使用，我司的大量产品都使用 i18next 进行国际化，而 react-i18next 是 i18next 的一个扩展，提供了一些 HOC 及 hook 方便我们在 react 中使用 i18next。由于 electron 是多...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  }
]